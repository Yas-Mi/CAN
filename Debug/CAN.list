
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aee0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  0800b0e0  0800b0e0  0000c0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc30  0800bc30  0000d068  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc30  0800bc30  0000cc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc38  0800bc38  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc38  0800bc38  0000cc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc3c  0800bc3c  0000cc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800bc40  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004169c  20000068  0800bca8  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20041704  0800bca8  0000d704  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd50  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c52  00000000  00000000  00028de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0002da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f1  00000000  00000000  0002f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003195d  00000000  00000000  00030161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da1b  00000000  00000000  00061abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d652  00000000  00000000  0007f4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019cb2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd4  00000000  00000000  0019cb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001a2744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b0c8 	.word	0x0800b0c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	0800b0c8 	.word	0x0800b0c8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b96a 	b.w	800053c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	460c      	mov	r4, r1
 8000288:	2b00      	cmp	r3, #0
 800028a:	d14e      	bne.n	800032a <__udivmoddi4+0xaa>
 800028c:	4694      	mov	ip, r2
 800028e:	458c      	cmp	ip, r1
 8000290:	4686      	mov	lr, r0
 8000292:	fab2 f282 	clz	r2, r2
 8000296:	d962      	bls.n	800035e <__udivmoddi4+0xde>
 8000298:	b14a      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029a:	f1c2 0320 	rsb	r3, r2, #32
 800029e:	4091      	lsls	r1, r2
 80002a0:	fa20 f303 	lsr.w	r3, r0, r3
 80002a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a8:	4319      	orrs	r1, r3
 80002aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f f68c 	uxth.w	r6, ip
 80002b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	fb07 1114 	mls	r1, r7, r4, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb04 f106 	mul.w	r1, r4, r6
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002d6:	f080 8112 	bcs.w	80004fe <__udivmoddi4+0x27e>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 810f 	bls.w	80004fe <__udivmoddi4+0x27e>
 80002e0:	3c02      	subs	r4, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ee:	fb07 1110 	mls	r1, r7, r0, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb00 f606 	mul.w	r6, r0, r6
 80002fa:	429e      	cmp	r6, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x94>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f100 31ff 	add.w	r1, r0, #4294967295
 8000306:	f080 80fc 	bcs.w	8000502 <__udivmoddi4+0x282>
 800030a:	429e      	cmp	r6, r3
 800030c:	f240 80f9 	bls.w	8000502 <__udivmoddi4+0x282>
 8000310:	4463      	add	r3, ip
 8000312:	3802      	subs	r0, #2
 8000314:	1b9b      	subs	r3, r3, r6
 8000316:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800031a:	2100      	movs	r1, #0
 800031c:	b11d      	cbz	r5, 8000326 <__udivmoddi4+0xa6>
 800031e:	40d3      	lsrs	r3, r2
 8000320:	2200      	movs	r2, #0
 8000322:	e9c5 3200 	strd	r3, r2, [r5]
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d905      	bls.n	800033a <__udivmoddi4+0xba>
 800032e:	b10d      	cbz	r5, 8000334 <__udivmoddi4+0xb4>
 8000330:	e9c5 0100 	strd	r0, r1, [r5]
 8000334:	2100      	movs	r1, #0
 8000336:	4608      	mov	r0, r1
 8000338:	e7f5      	b.n	8000326 <__udivmoddi4+0xa6>
 800033a:	fab3 f183 	clz	r1, r3
 800033e:	2900      	cmp	r1, #0
 8000340:	d146      	bne.n	80003d0 <__udivmoddi4+0x150>
 8000342:	42a3      	cmp	r3, r4
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xcc>
 8000346:	4290      	cmp	r0, r2
 8000348:	f0c0 80f0 	bcc.w	800052c <__udivmoddi4+0x2ac>
 800034c:	1a86      	subs	r6, r0, r2
 800034e:	eb64 0303 	sbc.w	r3, r4, r3
 8000352:	2001      	movs	r0, #1
 8000354:	2d00      	cmp	r5, #0
 8000356:	d0e6      	beq.n	8000326 <__udivmoddi4+0xa6>
 8000358:	e9c5 6300 	strd	r6, r3, [r5]
 800035c:	e7e3      	b.n	8000326 <__udivmoddi4+0xa6>
 800035e:	2a00      	cmp	r2, #0
 8000360:	f040 8090 	bne.w	8000484 <__udivmoddi4+0x204>
 8000364:	eba1 040c 	sub.w	r4, r1, ip
 8000368:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800036c:	fa1f f78c 	uxth.w	r7, ip
 8000370:	2101      	movs	r1, #1
 8000372:	fbb4 f6f8 	udiv	r6, r4, r8
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb08 4416 	mls	r4, r8, r6, r4
 800037e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000382:	fb07 f006 	mul.w	r0, r7, r6
 8000386:	4298      	cmp	r0, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x11c>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x11a>
 8000394:	4298      	cmp	r0, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2b4>
 800039a:	4626      	mov	r6, r4
 800039c:	1a1c      	subs	r4, r3, r0
 800039e:	fa1f f38e 	uxth.w	r3, lr
 80003a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003a6:	fb08 4410 	mls	r4, r8, r0, r4
 80003aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ae:	fb00 f707 	mul.w	r7, r0, r7
 80003b2:	429f      	cmp	r7, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x148>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x146>
 80003c0:	429f      	cmp	r7, r3
 80003c2:	f200 80b0 	bhi.w	8000526 <__udivmoddi4+0x2a6>
 80003c6:	4620      	mov	r0, r4
 80003c8:	1bdb      	subs	r3, r3, r7
 80003ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ce:	e7a5      	b.n	800031c <__udivmoddi4+0x9c>
 80003d0:	f1c1 0620 	rsb	r6, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 f706 	lsr.w	r7, r2, r6
 80003da:	431f      	orrs	r7, r3
 80003dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003e0:	fa04 f301 	lsl.w	r3, r4, r1
 80003e4:	ea43 030c 	orr.w	r3, r3, ip
 80003e8:	40f4      	lsrs	r4, r6
 80003ea:	fa00 f801 	lsl.w	r8, r0, r1
 80003ee:	0c38      	lsrs	r0, r7, #16
 80003f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f4:	fbb4 fef0 	udiv	lr, r4, r0
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000400:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000404:	fb0e f90c 	mul.w	r9, lr, ip
 8000408:	45a1      	cmp	r9, r4
 800040a:	fa02 f201 	lsl.w	r2, r2, r1
 800040e:	d90a      	bls.n	8000426 <__udivmoddi4+0x1a6>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000416:	f080 8084 	bcs.w	8000522 <__udivmoddi4+0x2a2>
 800041a:	45a1      	cmp	r9, r4
 800041c:	f240 8081 	bls.w	8000522 <__udivmoddi4+0x2a2>
 8000420:	f1ae 0e02 	sub.w	lr, lr, #2
 8000424:	443c      	add	r4, r7
 8000426:	eba4 0409 	sub.w	r4, r4, r9
 800042a:	fa1f f983 	uxth.w	r9, r3
 800042e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000432:	fb00 4413 	mls	r4, r0, r3, r4
 8000436:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043a:	fb03 fc0c 	mul.w	ip, r3, ip
 800043e:	45a4      	cmp	ip, r4
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x1d2>
 8000442:	193c      	adds	r4, r7, r4
 8000444:	f103 30ff 	add.w	r0, r3, #4294967295
 8000448:	d267      	bcs.n	800051a <__udivmoddi4+0x29a>
 800044a:	45a4      	cmp	ip, r4
 800044c:	d965      	bls.n	800051a <__udivmoddi4+0x29a>
 800044e:	3b02      	subs	r3, #2
 8000450:	443c      	add	r4, r7
 8000452:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000456:	fba0 9302 	umull	r9, r3, r0, r2
 800045a:	eba4 040c 	sub.w	r4, r4, ip
 800045e:	429c      	cmp	r4, r3
 8000460:	46ce      	mov	lr, r9
 8000462:	469c      	mov	ip, r3
 8000464:	d351      	bcc.n	800050a <__udivmoddi4+0x28a>
 8000466:	d04e      	beq.n	8000506 <__udivmoddi4+0x286>
 8000468:	b155      	cbz	r5, 8000480 <__udivmoddi4+0x200>
 800046a:	ebb8 030e 	subs.w	r3, r8, lr
 800046e:	eb64 040c 	sbc.w	r4, r4, ip
 8000472:	fa04 f606 	lsl.w	r6, r4, r6
 8000476:	40cb      	lsrs	r3, r1
 8000478:	431e      	orrs	r6, r3
 800047a:	40cc      	lsrs	r4, r1
 800047c:	e9c5 6400 	strd	r6, r4, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	e750      	b.n	8000326 <__udivmoddi4+0xa6>
 8000484:	f1c2 0320 	rsb	r3, r2, #32
 8000488:	fa20 f103 	lsr.w	r1, r0, r3
 800048c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000490:	fa24 f303 	lsr.w	r3, r4, r3
 8000494:	4094      	lsls	r4, r2
 8000496:	430c      	orrs	r4, r1
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa00 fe02 	lsl.w	lr, r0, r2
 80004a0:	fa1f f78c 	uxth.w	r7, ip
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ac:	0c23      	lsrs	r3, r4, #16
 80004ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b2:	fb00 f107 	mul.w	r1, r0, r7
 80004b6:	4299      	cmp	r1, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x24c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f100 36ff 	add.w	r6, r0, #4294967295
 80004c2:	d22c      	bcs.n	800051e <__udivmoddi4+0x29e>
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d92a      	bls.n	800051e <__udivmoddi4+0x29e>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	1a5b      	subs	r3, r3, r1
 80004ce:	b2a4      	uxth	r4, r4
 80004d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004d4:	fb08 3311 	mls	r3, r8, r1, r3
 80004d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004dc:	fb01 f307 	mul.w	r3, r1, r7
 80004e0:	42a3      	cmp	r3, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x276>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ec:	d213      	bcs.n	8000516 <__udivmoddi4+0x296>
 80004ee:	42a3      	cmp	r3, r4
 80004f0:	d911      	bls.n	8000516 <__udivmoddi4+0x296>
 80004f2:	3902      	subs	r1, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	1ae4      	subs	r4, r4, r3
 80004f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004fc:	e739      	b.n	8000372 <__udivmoddi4+0xf2>
 80004fe:	4604      	mov	r4, r0
 8000500:	e6f0      	b.n	80002e4 <__udivmoddi4+0x64>
 8000502:	4608      	mov	r0, r1
 8000504:	e706      	b.n	8000314 <__udivmoddi4+0x94>
 8000506:	45c8      	cmp	r8, r9
 8000508:	d2ae      	bcs.n	8000468 <__udivmoddi4+0x1e8>
 800050a:	ebb9 0e02 	subs.w	lr, r9, r2
 800050e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000512:	3801      	subs	r0, #1
 8000514:	e7a8      	b.n	8000468 <__udivmoddi4+0x1e8>
 8000516:	4631      	mov	r1, r6
 8000518:	e7ed      	b.n	80004f6 <__udivmoddi4+0x276>
 800051a:	4603      	mov	r3, r0
 800051c:	e799      	b.n	8000452 <__udivmoddi4+0x1d2>
 800051e:	4630      	mov	r0, r6
 8000520:	e7d4      	b.n	80004cc <__udivmoddi4+0x24c>
 8000522:	46d6      	mov	lr, sl
 8000524:	e77f      	b.n	8000426 <__udivmoddi4+0x1a6>
 8000526:	4463      	add	r3, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e74d      	b.n	80003c8 <__udivmoddi4+0x148>
 800052c:	4606      	mov	r6, r0
 800052e:	4623      	mov	r3, r4
 8000530:	4608      	mov	r0, r1
 8000532:	e70f      	b.n	8000354 <__udivmoddi4+0xd4>
 8000534:	3e02      	subs	r6, #2
 8000536:	4463      	add	r3, ip
 8000538:	e730      	b.n	800039c <__udivmoddi4+0x11c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <recv_frame1_callback>:

#include "can_app.h"

// 受信フレーム1コールバック
static void recv_frame1_callback(uint8_t *p_data, uint8_t size)
{
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	b089      	sub	sp, #36	@ 0x24
 8000544:	af06      	add	r7, sp, #24
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]
	console_printf("0x300 %x %x %x %x %x %x %x %x\n", p_data[0], p_data[1], p_data[2], p_data[3], p_data[4], p_data[5], p_data[6], p_data[7]);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461d      	mov	r5, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	3301      	adds	r3, #1
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	461e      	mov	r6, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3302      	adds	r3, #2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	469c      	mov	ip, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3303      	adds	r3, #3
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3304      	adds	r3, #4
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3305      	adds	r3, #5
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3306      	adds	r3, #6
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461c      	mov	r4, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3307      	adds	r3, #7
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	9304      	str	r3, [sp, #16]
 800058a:	9403      	str	r4, [sp, #12]
 800058c:	9002      	str	r0, [sp, #8]
 800058e:	9101      	str	r1, [sp, #4]
 8000590:	9200      	str	r2, [sp, #0]
 8000592:	4663      	mov	r3, ip
 8000594:	4632      	mov	r2, r6
 8000596:	4629      	mov	r1, r5
 8000598:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <recv_frame1_callback+0x68>)
 800059a:	f000 fecb 	bl	8001334 <console_printf>
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a6:	bf00      	nop
 80005a8:	0800b0e0 	.word	0x0800b0e0

080005ac <recv_frame2_callback>:

// 受信フレーム2コールバック
static void recv_frame2_callback(uint8_t *p_data, uint8_t size)
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	b089      	sub	sp, #36	@ 0x24
 80005b0:	af06      	add	r7, sp, #24
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
	console_printf("0x400 %x %x %x %x %x %x %x %x\n", p_data[0], p_data[1], p_data[2], p_data[3], p_data[4], p_data[5], p_data[6], p_data[7]);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461d      	mov	r5, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3301      	adds	r3, #1
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461e      	mov	r6, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3302      	adds	r3, #2
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	469c      	mov	ip, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3303      	adds	r3, #3
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3304      	adds	r3, #4
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3305      	adds	r3, #5
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3306      	adds	r3, #6
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461c      	mov	r4, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3307      	adds	r3, #7
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	9304      	str	r3, [sp, #16]
 80005f6:	9403      	str	r4, [sp, #12]
 80005f8:	9002      	str	r0, [sp, #8]
 80005fa:	9101      	str	r1, [sp, #4]
 80005fc:	9200      	str	r2, [sp, #0]
 80005fe:	4663      	mov	r3, ip
 8000600:	4632      	mov	r2, r6
 8000602:	4629      	mov	r1, r5
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <recv_frame2_callback+0x68>)
 8000606:	f000 fe95 	bl	8001334 <console_printf>
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000612:	bf00      	nop
 8000614:	0800b100 	.word	0x0800b100

08000618 <recv_frame3_callback>:

// 受信フレーム3コールバック
static void recv_frame3_callback(uint8_t *p_data, uint8_t size)
{
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	b089      	sub	sp, #36	@ 0x24
 800061c:	af06      	add	r7, sp, #24
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
	console_printf("0x500 %x %x %x %x %x %x %x %x\n", p_data[0], p_data[1], p_data[2], p_data[3], p_data[4], p_data[5], p_data[6], p_data[7]);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461d      	mov	r5, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3301      	adds	r3, #1
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461e      	mov	r6, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3302      	adds	r3, #2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	469c      	mov	ip, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3303      	adds	r3, #3
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3304      	adds	r3, #4
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4619      	mov	r1, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3305      	adds	r3, #5
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3306      	adds	r3, #6
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461c      	mov	r4, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3307      	adds	r3, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	9304      	str	r3, [sp, #16]
 8000662:	9403      	str	r4, [sp, #12]
 8000664:	9002      	str	r0, [sp, #8]
 8000666:	9101      	str	r1, [sp, #4]
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	4663      	mov	r3, ip
 800066c:	4632      	mov	r2, r6
 800066e:	4629      	mov	r1, r5
 8000670:	4803      	ldr	r0, [pc, #12]	@ (8000680 <recv_frame3_callback+0x68>)
 8000672:	f000 fe5f 	bl	8001334 <console_printf>
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067e:	bf00      	nop
 8000680:	0800b120 	.word	0x0800b120

08000684 <recv_frame4_callback>:

// 受信フレーム4コールバック
static void recv_frame4_callback(uint8_t *p_data, uint8_t size)
{
 8000684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000686:	b089      	sub	sp, #36	@ 0x24
 8000688:	af06      	add	r7, sp, #24
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
	console_printf("0x600 %x %x %x %x %x %x %x %x\n", p_data[0], p_data[1], p_data[2], p_data[3], p_data[4], p_data[5], p_data[6], p_data[7]);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461d      	mov	r5, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461e      	mov	r6, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3302      	adds	r3, #2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	469c      	mov	ip, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3303      	adds	r3, #3
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3304      	adds	r3, #4
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3305      	adds	r3, #5
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3306      	adds	r3, #6
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461c      	mov	r4, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3307      	adds	r3, #7
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	9304      	str	r3, [sp, #16]
 80006ce:	9403      	str	r4, [sp, #12]
 80006d0:	9002      	str	r0, [sp, #8]
 80006d2:	9101      	str	r1, [sp, #4]
 80006d4:	9200      	str	r2, [sp, #0]
 80006d6:	4663      	mov	r3, ip
 80006d8:	4632      	mov	r2, r6
 80006da:	4629      	mov	r1, r5
 80006dc:	4803      	ldr	r0, [pc, #12]	@ (80006ec <recv_frame4_callback+0x68>)
 80006de:	f000 fe29 	bl	8001334 <console_printf>
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ea:	bf00      	nop
 80006ec:	0800b140 	.word	0x0800b140

080006f0 <recv_frame5_callback>:

// 受信フレーム5コールバック
static void recv_frame5_callback(uint8_t *p_data, uint8_t size)
{
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	b089      	sub	sp, #36	@ 0x24
 80006f4:	af06      	add	r7, sp, #24
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
	console_printf("0x700 %x %x %x %x %x %x %x %x\n", p_data[0], p_data[1], p_data[2], p_data[3], p_data[4], p_data[5], p_data[6], p_data[7]);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461d      	mov	r5, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461e      	mov	r6, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3302      	adds	r3, #2
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	469c      	mov	ip, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3303      	adds	r3, #3
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3304      	adds	r3, #4
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3305      	adds	r3, #5
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3306      	adds	r3, #6
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461c      	mov	r4, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3307      	adds	r3, #7
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	9304      	str	r3, [sp, #16]
 800073a:	9403      	str	r4, [sp, #12]
 800073c:	9002      	str	r0, [sp, #8]
 800073e:	9101      	str	r1, [sp, #4]
 8000740:	9200      	str	r2, [sp, #0]
 8000742:	4663      	mov	r3, ip
 8000744:	4632      	mov	r2, r6
 8000746:	4629      	mov	r1, r5
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <recv_frame5_callback+0x68>)
 800074a:	f000 fdf3 	bl	8001334 <console_printf>
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000756:	bf00      	nop
 8000758:	0800b160 	.word	0x0800b160

0800075c <can_app_init>:

// 初期化
void can_app_init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	// コールバック登録
	can_mng_reg_recv_callback(CAN_MNG_RECV_FRAME_1, recv_frame1_callback);
 8000760:	490a      	ldr	r1, [pc, #40]	@ (800078c <can_app_init+0x30>)
 8000762:	2000      	movs	r0, #0
 8000764:	f003 ff56 	bl	8004614 <can_mng_reg_recv_callback>
	can_mng_reg_recv_callback(CAN_MNG_RECV_FRAME_2, recv_frame2_callback);
 8000768:	4909      	ldr	r1, [pc, #36]	@ (8000790 <can_app_init+0x34>)
 800076a:	2001      	movs	r0, #1
 800076c:	f003 ff52 	bl	8004614 <can_mng_reg_recv_callback>
	can_mng_reg_recv_callback(CAN_MNG_RECV_FRAME_3, recv_frame3_callback);
 8000770:	4908      	ldr	r1, [pc, #32]	@ (8000794 <can_app_init+0x38>)
 8000772:	2002      	movs	r0, #2
 8000774:	f003 ff4e 	bl	8004614 <can_mng_reg_recv_callback>
	can_mng_reg_recv_callback(CAN_MNG_RECV_FRAME_4, recv_frame4_callback);
 8000778:	4907      	ldr	r1, [pc, #28]	@ (8000798 <can_app_init+0x3c>)
 800077a:	2003      	movs	r0, #3
 800077c:	f003 ff4a 	bl	8004614 <can_mng_reg_recv_callback>
	can_mng_reg_recv_callback(CAN_MNG_RECV_FRAME_5, recv_frame5_callback);
 8000780:	4906      	ldr	r1, [pc, #24]	@ (800079c <can_app_init+0x40>)
 8000782:	2004      	movs	r0, #4
 8000784:	f003 ff46 	bl	8004614 <can_mng_reg_recv_callback>
	
	return;
 8000788:	bf00      	nop
}
 800078a:	bd80      	pop	{r7, pc}
 800078c:	08000541 	.word	0x08000541
 8000790:	080005ad 	.word	0x080005ad
 8000794:	08000619 	.word	0x08000619
 8000798:	08000685 	.word	0x08000685
 800079c:	080006f1 	.word	0x080006f1

080007a0 <set_sig1_7>:
// 取得関数
// (*) 後で作成

// セット関数
void set_sig1_7(uint8_t val)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007aa:	b672      	cpsid	i
}
 80007ac:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_1);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f003 ff14 	bl	80045dc <can_mng_get_send_data>
 80007b4:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[7] = val;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3307      	adds	r3, #7
 80007ba:	79fa      	ldrb	r2, [r7, #7]
 80007bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80007be:	b662      	cpsie	i
}
 80007c0:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <set_sig1_6>:
// セット関数
void set_sig1_6(uint8_t val)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_1);
 80007d8:	2000      	movs	r0, #0
 80007da:	f003 feff 	bl	80045dc <can_mng_get_send_data>
 80007de:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[6] = val;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3306      	adds	r3, #6
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80007e8:	b662      	cpsie	i
}
 80007ea:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <set_sig1_5>:
// セット関数
void set_sig1_5(uint8_t val)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80007fe:	b672      	cpsid	i
}
 8000800:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_1);
 8000802:	2000      	movs	r0, #0
 8000804:	f003 feea 	bl	80045dc <can_mng_get_send_data>
 8000808:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[5] = val;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3305      	adds	r3, #5
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000812:	b662      	cpsie	i
}
 8000814:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <set_sig1_4>:
// セット関数
void set_sig1_4(uint8_t val)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_1);
 800082c:	2000      	movs	r0, #0
 800082e:	f003 fed5 	bl	80045dc <can_mng_get_send_data>
 8000832:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[4] = val;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3304      	adds	r3, #4
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800083c:	b662      	cpsie	i
}
 800083e:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <set_sig1_3>:
// セット関数
void set_sig1_3(uint8_t val)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000852:	b672      	cpsid	i
}
 8000854:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_1);
 8000856:	2000      	movs	r0, #0
 8000858:	f003 fec0 	bl	80045dc <can_mng_get_send_data>
 800085c:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[3] = val;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3303      	adds	r3, #3
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000866:	b662      	cpsie	i
}
 8000868:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <set_sig1_2>:
// セット関数
void set_sig1_2(uint8_t val)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_1);
 8000880:	2000      	movs	r0, #0
 8000882:	f003 feab 	bl	80045dc <can_mng_get_send_data>
 8000886:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[2] = val;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3302      	adds	r3, #2
 800088c:	79fa      	ldrb	r2, [r7, #7]
 800088e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000890:	b662      	cpsie	i
}
 8000892:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <set_sig1_1>:
// セット関数
void set_sig1_1(uint8_t val)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80008a6:	b672      	cpsid	i
}
 80008a8:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_1);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f003 fe96 	bl	80045dc <can_mng_get_send_data>
 80008b0:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[1] = val;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008ba:	b662      	cpsie	i
}
 80008bc:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <set_sig1_0>:
// セット関数
void set_sig1_0(uint8_t val)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b084      	sub	sp, #16
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_1);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f003 fe81 	bl	80045dc <can_mng_get_send_data>
 80008da:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[0] = val;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008e2:	b662      	cpsie	i
}
 80008e4:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <set_sig2_3>:
// セット関数
void set_sig2_3(uint16_t val)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b084      	sub	sp, #16
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4603      	mov	r3, r0
 80008f6:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_2);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f003 fe6d 	bl	80045dc <can_mng_get_send_data>
 8000902:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[7] = (uint8_t)((val >> 8) & 0xFF);
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	0a1b      	lsrs	r3, r3, #8
 8000908:	b29a      	uxth	r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	3307      	adds	r3, #7
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	701a      	strb	r2, [r3, #0]
	p_send_data[6] = (uint8_t)((val >> 0) & 0xFF);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3306      	adds	r3, #6
 8000916:	88fa      	ldrh	r2, [r7, #6]
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800091c:	b662      	cpsie	i
}
 800091e:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <set_sig2_2>:
// セット関数
void set_sig2_2(uint16_t val)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8000932:	b672      	cpsid	i
}
 8000934:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_2);
 8000936:	2001      	movs	r0, #1
 8000938:	f003 fe50 	bl	80045dc <can_mng_get_send_data>
 800093c:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[5] = (uint8_t)((val >> 8) & 0xFF);
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	b29a      	uxth	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3305      	adds	r3, #5
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	701a      	strb	r2, [r3, #0]
	p_send_data[4] = (uint8_t)((val >> 0) & 0xFF);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3304      	adds	r3, #4
 8000950:	88fa      	ldrh	r2, [r7, #6]
 8000952:	b2d2      	uxtb	r2, r2
 8000954:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000956:	b662      	cpsie	i
}
 8000958:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <set_sig2_1>:
// セット関数
void set_sig2_1(uint16_t val)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_2);
 8000970:	2001      	movs	r0, #1
 8000972:	f003 fe33 	bl	80045dc <can_mng_get_send_data>
 8000976:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[3] = (uint8_t)((val >> 8) & 0xFF);
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	b29a      	uxth	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3303      	adds	r3, #3
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	701a      	strb	r2, [r3, #0]
	p_send_data[2] = (uint8_t)((val >> 0) & 0xFF);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3302      	adds	r3, #2
 800098a:	88fa      	ldrh	r2, [r7, #6]
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000990:	b662      	cpsie	i
}
 8000992:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <set_sig2_0>:
// セット関数
void set_sig2_0(uint16_t val)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80009a6:	b672      	cpsid	i
}
 80009a8:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_2);
 80009aa:	2001      	movs	r0, #1
 80009ac:	f003 fe16 	bl	80045dc <can_mng_get_send_data>
 80009b0:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[1] = (uint8_t)((val >> 8) & 0xFF);
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3301      	adds	r3, #1
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	701a      	strb	r2, [r3, #0]
	p_send_data[0] = (uint8_t)((val >> 0) & 0xFF);
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80009c8:	b662      	cpsie	i
}
 80009ca:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <set_sig3_1>:
// セット関数
void set_sig3_1(uint32_t val)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_3);
 80009e0:	2002      	movs	r0, #2
 80009e2:	f003 fdfb 	bl	80045dc <can_mng_get_send_data>
 80009e6:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[7] = (uint8_t)((val >> 24) & 0xFF);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	0e1a      	lsrs	r2, r3, #24
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3307      	adds	r3, #7
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	701a      	strb	r2, [r3, #0]
	p_send_data[6] = (uint8_t)((val >> 16) & 0xFF);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	0c1a      	lsrs	r2, r3, #16
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3306      	adds	r3, #6
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	701a      	strb	r2, [r3, #0]
	p_send_data[5] = (uint8_t)((val >>  8) & 0xFF);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	0a1a      	lsrs	r2, r3, #8
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3305      	adds	r3, #5
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	701a      	strb	r2, [r3, #0]
	p_send_data[4] = (uint8_t)((val >>  0) & 0xFF);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3304      	adds	r3, #4
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a16:	b662      	cpsie	i
}
 8000a18:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <set_sig3_0>:
// セット関数
void set_sig3_0(uint32_t val)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b084      	sub	sp, #16
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2a:	b672      	cpsid	i
}
 8000a2c:	bf00      	nop

	// 割り込み禁止
	__disable_irq();

	// 送信データ取得
	p_send_data = can_mng_get_send_data(CAN_MNG_SEND_FRAME_3);
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f003 fdd4 	bl	80045dc <can_mng_get_send_data>
 8000a34:	60f8      	str	r0, [r7, #12]

	// データセット
	p_send_data[3] = (uint8_t)((val >> 24) & 0xFF);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	0e1a      	lsrs	r2, r3, #24
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3303      	adds	r3, #3
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	701a      	strb	r2, [r3, #0]
	p_send_data[2] = (uint8_t)((val >> 16) & 0xFF);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	0c1a      	lsrs	r2, r3, #16
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	701a      	strb	r2, [r3, #0]
	p_send_data[1] = (uint8_t)((val >>  8) & 0xFF);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	0a1a      	lsrs	r2, r3, #8
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	701a      	strb	r2, [r3, #0]
	p_send_data[0] = (uint8_t)((val >>  0) & 0xFF);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a62:	b662      	cpsie	i
}
 8000a64:	bf00      	nop

	// 割り込み禁止解除
	__enable_irq();
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <cmd_set_frame_1>:

// コマンド
// フレーム1設定
static void cmd_set_frame_1(int argc, char *argv[])
{
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b08c      	sub	sp, #48	@ 0x30
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t idx;
	uint8_t val;
	typedef void (*SET_FUNC)(uint8_t val);
	SET_FUNC set_func_tbl[8] = {
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <cmd_set_frame_1+0x6c>)
 8000a7c:	f107 040c 	add.w	r4, r7, #12
 8000a80:	461d      	mov	r5, r3
 8000a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		set_sig1_6,
		set_sig1_7,
	};
	
	// 引数チェック
	if (argc < 3) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	dc03      	bgt.n	8000a9c <cmd_set_frame_1+0x2c>
		console_printf("set frame_1 <byte> <val>\n");
 8000a94:	4812      	ldr	r0, [pc, #72]	@ (8000ae0 <cmd_set_frame_1+0x70>)
 8000a96:	f000 fc4d 	bl	8001334 <console_printf>
 8000a9a:	e01c      	b.n	8000ad6 <cmd_set_frame_1+0x66>
		return;
	}
	
	// 値設定
	idx = atoi(argv[2]);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	3308      	adds	r3, #8
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f00a fa2a 	bl	800aefc <atoi>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	val = atoi(argv[3]);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	330c      	adds	r3, #12
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f00a fa21 	bl	800aefc <atoi>
 8000aba:	4603      	mov	r3, r0
 8000abc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	
	// 値セット
	set_func_tbl[idx](val);
 8000ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	3330      	adds	r3, #48	@ 0x30
 8000ac8:	443b      	add	r3, r7
 8000aca:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000ace:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4798      	blx	r3
}
 8000ad6:	3730      	adds	r7, #48	@ 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bdb0      	pop	{r4, r5, r7, pc}
 8000adc:	0800b19c 	.word	0x0800b19c
 8000ae0:	0800b180 	.word	0x0800b180

08000ae4 <cmd_set_frame_2>:

// フレーム2設定
static void cmd_set_frame_2(int argc, char *argv[])
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b089      	sub	sp, #36	@ 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
	uint8_t idx;
	uint16_t val;
	typedef void (*SET_FUNC)(uint16_t val);
	SET_FUNC set_func_tbl[4] = {
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <cmd_set_frame_2+0x5c>)
 8000af0:	f107 040c 	add.w	r4, r7, #12
 8000af4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000af6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		set_sig2_1,
		set_sig2_0,
	};
	
	// 引数チェック
	if (argc < 3) {
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	dc03      	bgt.n	8000b08 <cmd_set_frame_2+0x24>
		console_printf("set frame_2 <idx> <val>\n");
 8000b00:	4810      	ldr	r0, [pc, #64]	@ (8000b44 <cmd_set_frame_2+0x60>)
 8000b02:	f000 fc17 	bl	8001334 <console_printf>
 8000b06:	e018      	b.n	8000b3a <cmd_set_frame_2+0x56>
		return;
	}
	
	// 値設定
	idx = atoi(argv[2]);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	3308      	adds	r3, #8
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00a f9f4 	bl	800aefc <atoi>
 8000b14:	4603      	mov	r3, r0
 8000b16:	77fb      	strb	r3, [r7, #31]
	val = atoi(argv[3]);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	330c      	adds	r3, #12
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f00a f9ec 	bl	800aefc <atoi>
 8000b24:	4603      	mov	r3, r0
 8000b26:	83bb      	strh	r3, [r7, #28]
	
	// 値セット
	set_func_tbl[idx](val);
 8000b28:	7ffb      	ldrb	r3, [r7, #31]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	3320      	adds	r3, #32
 8000b2e:	443b      	add	r3, r7
 8000b30:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000b34:	8bba      	ldrh	r2, [r7, #28]
 8000b36:	4610      	mov	r0, r2
 8000b38:	4798      	blx	r3
}
 8000b3a:	3724      	adds	r7, #36	@ 0x24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	0800b1d8 	.word	0x0800b1d8
 8000b44:	0800b1bc 	.word	0x0800b1bc

08000b48 <cmd_set_frame_3>:

// フレーム1設定
static void cmd_set_frame_3(int argc, char *argv[])
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
	uint8_t idx;
	uint32_t val;
	typedef void (*SET_FUNC)(uint32_t val);
	SET_FUNC set_func_tbl[2] = {
 8000b52:	4a14      	ldr	r2, [pc, #80]	@ (8000ba4 <cmd_set_frame_3+0x5c>)
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b5c:	e883 0003 	stmia.w	r3, {r0, r1}
		set_sig3_1,
		set_sig3_0,
	};
	
	// 引数チェック
	if (argc < 3) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	dc03      	bgt.n	8000b6e <cmd_set_frame_3+0x26>
		console_printf("set frame_3 <idx> <val>\n");
 8000b66:	4810      	ldr	r0, [pc, #64]	@ (8000ba8 <cmd_set_frame_3+0x60>)
 8000b68:	f000 fbe4 	bl	8001334 <console_printf>
 8000b6c:	e017      	b.n	8000b9e <cmd_set_frame_3+0x56>
		return;
	}
	
	// 値設定
	idx = atoi(argv[2]);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	3308      	adds	r3, #8
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00a f9c1 	bl	800aefc <atoi>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75fb      	strb	r3, [r7, #23]
	val = atoi(argv[3]);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	330c      	adds	r3, #12
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00a f9b9 	bl	800aefc <atoi>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	613b      	str	r3, [r7, #16]
	
	// 値セット
	set_func_tbl[idx](val);
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	3318      	adds	r3, #24
 8000b94:	443b      	add	r3, r7
 8000b96:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000b9a:	6938      	ldr	r0, [r7, #16]
 8000b9c:	4798      	blx	r3
}
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	0800b204 	.word	0x0800b204
 8000ba8:	0800b1e8 	.word	0x0800b1e8

08000bac <cmd_active>:

// フレーム1設定
static void cmd_active(int argc, char *argv[])
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
	// アクティブ
	can_mng_active();
 8000bb6:	f003 fcd5 	bl	8004564 <can_mng_active>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <can_app_set_cmd>:

// コマンド設定関数
void can_app_set_cmd(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	COMMAND_INFO cmd;
	
	// コマンドの設定
	cmd.input = "set frame_1";
 8000bca:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <can_app_set_cmd+0x50>)
 8000bcc:	603b      	str	r3, [r7, #0]
	cmd.func = cmd_set_frame_1;
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <can_app_set_cmd+0x54>)
 8000bd0:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fbe7 	bl	80013a8 <console_set_command>
	// コマンドの設定
	cmd.input = "set frame_2";
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <can_app_set_cmd+0x58>)
 8000bdc:	603b      	str	r3, [r7, #0]
	cmd.func = cmd_set_frame_2;
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <can_app_set_cmd+0x5c>)
 8000be0:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 8000be2:	463b      	mov	r3, r7
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 fbdf 	bl	80013a8 <console_set_command>
	// コマンドの設定
	cmd.input = "set frame_3";
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <can_app_set_cmd+0x60>)
 8000bec:	603b      	str	r3, [r7, #0]
	cmd.func = cmd_set_frame_3;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <can_app_set_cmd+0x64>)
 8000bf0:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fbd7 	bl	80013a8 <console_set_command>
	// コマンドの設定
	cmd.input = "can active";
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <can_app_set_cmd+0x68>)
 8000bfc:	603b      	str	r3, [r7, #0]
	cmd.func = cmd_active;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <can_app_set_cmd+0x6c>)
 8000c00:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 8000c02:	463b      	mov	r3, r7
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fbcf 	bl	80013a8 <console_set_command>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0800b20c 	.word	0x0800b20c
 8000c18:	08000a71 	.word	0x08000a71
 8000c1c:	0800b218 	.word	0x0800b218
 8000c20:	08000ae5 	.word	0x08000ae5
 8000c24:	0800b224 	.word	0x0800b224
 8000c28:	08000b49 	.word	0x08000b49
 8000c2c:	0800b230 	.word	0x0800b230
 8000c30:	08000bad 	.word	0x08000bad

08000c34 <find_str>:
static CONSOLE_CB console_cb;
#define get_myself() (&console_cb)

// 特定の文字位置を取得
uint8_t find_str(char str, char *data)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
	char *start_addr, *end_addr;
	uint8_t pos = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	75fb      	strb	r3, [r7, #23]
	
	// 開始アドレスを取得
	start_addr = data;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	613b      	str	r3, [r7, #16]
	
	// 特定の文字の位置を取得
	end_addr = strchr(data, str);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	6838      	ldr	r0, [r7, #0]
 8000c4e:	f00a f9f5 	bl	800b03c <strchr>
 8000c52:	60f8      	str	r0, [r7, #12]
	
	if (end_addr != NULL) {
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <find_str+0x2e>
		pos = (uint8_t)(end_addr - start_addr);
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	75fb      	strb	r3, [r7, #23]
	}
	
	return pos;
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b087      	sub	sp, #28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000c7c:	e004      	b.n	8000c88 <ts_itoa+0x1c>
		div *= base;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	fb02 f303 	mul.w	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d2f3      	bcs.n	8000c7e <ts_itoa+0x12>

	while (div != 0)
 8000c96:	e029      	b.n	8000cec <ts_itoa+0x80>
	{
		int num = d/div;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca0:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	fbb3 f1f2 	udiv	r1, r3, r2
 8000caa:	fb01 f202 	mul.w	r2, r1, r2
 8000cae:	1a9b      	subs	r3, r3, r2
 8000cb0:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	2b09      	cmp	r3, #9
 8000cc0:	dd0a      	ble.n	8000cd8 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	1c58      	adds	r0, r3, #1
 8000ccc:	68f9      	ldr	r1, [r7, #12]
 8000cce:	6008      	str	r0, [r1, #0]
 8000cd0:	3237      	adds	r2, #55	@ 0x37
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e009      	b.n	8000cec <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	1c58      	adds	r0, r3, #1
 8000ce2:	68f9      	ldr	r1, [r7, #12]
 8000ce4:	6008      	str	r0, [r1, #0]
 8000ce6:	3230      	adds	r2, #48	@ 0x30
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1d2      	bne.n	8000c98 <ts_itoa+0x2c>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	371c      	adds	r7, #28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
static int ts_formatlength(const char *fmt, va_list va)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	int length = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8000d0e:	e080      	b.n	8000e12 <ts_formatlength+0x112>
	{
		if (*fmt == '%')
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b25      	cmp	r3, #37	@ 0x25
 8000d16:	d176      	bne.n	8000e06 <ts_formatlength+0x106>
		{
			++fmt;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	3b58      	subs	r3, #88	@ 0x58
 8000d24:	2b20      	cmp	r3, #32
 8000d26:	d86a      	bhi.n	8000dfe <ts_formatlength+0xfe>
 8000d28:	a201      	add	r2, pc, #4	@ (adr r2, 8000d30 <ts_formatlength+0x30>)
 8000d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2e:	bf00      	nop
 8000d30:	08000df1 	.word	0x08000df1
 8000d34:	08000dff 	.word	0x08000dff
 8000d38:	08000dff 	.word	0x08000dff
 8000d3c:	08000dff 	.word	0x08000dff
 8000d40:	08000dff 	.word	0x08000dff
 8000d44:	08000dff 	.word	0x08000dff
 8000d48:	08000dff 	.word	0x08000dff
 8000d4c:	08000dff 	.word	0x08000dff
 8000d50:	08000dff 	.word	0x08000dff
 8000d54:	08000dff 	.word	0x08000dff
 8000d58:	08000dff 	.word	0x08000dff
 8000d5c:	08000db5 	.word	0x08000db5
 8000d60:	08000dc3 	.word	0x08000dc3
 8000d64:	08000dff 	.word	0x08000dff
 8000d68:	08000dff 	.word	0x08000dff
 8000d6c:	08000dff 	.word	0x08000dff
 8000d70:	08000dff 	.word	0x08000dff
 8000d74:	08000dc3 	.word	0x08000dc3
 8000d78:	08000dff 	.word	0x08000dff
 8000d7c:	08000dff 	.word	0x08000dff
 8000d80:	08000dff 	.word	0x08000dff
 8000d84:	08000dff 	.word	0x08000dff
 8000d88:	08000dff 	.word	0x08000dff
 8000d8c:	08000dff 	.word	0x08000dff
 8000d90:	08000dff 	.word	0x08000dff
 8000d94:	08000dff 	.word	0x08000dff
 8000d98:	08000dff 	.word	0x08000dff
 8000d9c:	08000dd1 	.word	0x08000dd1
 8000da0:	08000dff 	.word	0x08000dff
 8000da4:	08000dc3 	.word	0x08000dc3
 8000da8:	08000dff 	.word	0x08000dff
 8000dac:	08000dff 	.word	0x08000dff
 8000db0:	08000df1 	.word	0x08000df1
			{
			  case 'c':
		  		  va_arg(va, int);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	3304      	adds	r3, #4
 8000db8:	603b      	str	r3, [r7, #0]
				  ++length;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
				  break;
 8000dc0:	e024      	b.n	8000e0c <ts_formatlength+0x10c>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	330b      	adds	r3, #11
 8000dc6:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	3304      	adds	r3, #4
 8000dcc:	603b      	str	r3, [r7, #0]
				  break;
 8000dce:	e01d      	b.n	8000e0c <ts_formatlength+0x10c>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	1d1a      	adds	r2, r3, #4
 8000dd4:	603a      	str	r2, [r7, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8000dda:	e002      	b.n	8000de2 <ts_formatlength+0xe2>
			  			  ++length;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3301      	adds	r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f6      	bne.n	8000ddc <ts_formatlength+0xdc>
			  	  }
				  break;
 8000dee:	e00d      	b.n	8000e0c <ts_formatlength+0x10c>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3308      	adds	r3, #8
 8000df4:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	603b      	str	r3, [r7, #0]
				  break;
 8000dfc:	e006      	b.n	8000e0c <ts_formatlength+0x10c>
			  default:
				  ++length;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
				  break;
 8000e04:	e002      	b.n	8000e0c <ts_formatlength+0x10c>
			}
		}
		else
		{
			++length;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f47f af7a 	bne.w	8000d10 <ts_formatlength+0x10>
	}
	return length;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000e3c:	e0bc      	b.n	8000fb8 <ts_formatstring+0x18c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b25      	cmp	r3, #37	@ 0x25
 8000e44:	f040 80b0 	bne.w	8000fa8 <ts_formatstring+0x17c>
		{
			switch (*(++fmt))
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b25      	cmp	r3, #37	@ 0x25
 8000e54:	f000 809e 	beq.w	8000f94 <ts_formatstring+0x168>
 8000e58:	2b25      	cmp	r3, #37	@ 0x25
 8000e5a:	f2c0 80a1 	blt.w	8000fa0 <ts_formatstring+0x174>
 8000e5e:	2b78      	cmp	r3, #120	@ 0x78
 8000e60:	f300 809e 	bgt.w	8000fa0 <ts_formatstring+0x174>
 8000e64:	2b58      	cmp	r3, #88	@ 0x58
 8000e66:	f2c0 809b 	blt.w	8000fa0 <ts_formatstring+0x174>
 8000e6a:	3b58      	subs	r3, #88	@ 0x58
 8000e6c:	2b20      	cmp	r3, #32
 8000e6e:	f200 8097 	bhi.w	8000fa0 <ts_formatstring+0x174>
 8000e72:	a201      	add	r2, pc, #4	@ (adr r2, 8000e78 <ts_formatstring+0x4c>)
 8000e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e78:	08000f7d 	.word	0x08000f7d
 8000e7c:	08000fa1 	.word	0x08000fa1
 8000e80:	08000fa1 	.word	0x08000fa1
 8000e84:	08000fa1 	.word	0x08000fa1
 8000e88:	08000fa1 	.word	0x08000fa1
 8000e8c:	08000fa1 	.word	0x08000fa1
 8000e90:	08000fa1 	.word	0x08000fa1
 8000e94:	08000fa1 	.word	0x08000fa1
 8000e98:	08000fa1 	.word	0x08000fa1
 8000e9c:	08000fa1 	.word	0x08000fa1
 8000ea0:	08000fa1 	.word	0x08000fa1
 8000ea4:	08000efd 	.word	0x08000efd
 8000ea8:	08000f11 	.word	0x08000f11
 8000eac:	08000fa1 	.word	0x08000fa1
 8000eb0:	08000fa1 	.word	0x08000fa1
 8000eb4:	08000fa1 	.word	0x08000fa1
 8000eb8:	08000fa1 	.word	0x08000fa1
 8000ebc:	08000f11 	.word	0x08000f11
 8000ec0:	08000fa1 	.word	0x08000fa1
 8000ec4:	08000fa1 	.word	0x08000fa1
 8000ec8:	08000fa1 	.word	0x08000fa1
 8000ecc:	08000fa1 	.word	0x08000fa1
 8000ed0:	08000fa1 	.word	0x08000fa1
 8000ed4:	08000fa1 	.word	0x08000fa1
 8000ed8:	08000fa1 	.word	0x08000fa1
 8000edc:	08000fa1 	.word	0x08000fa1
 8000ee0:	08000fa1 	.word	0x08000fa1
 8000ee4:	08000f41 	.word	0x08000f41
 8000ee8:	08000fa1 	.word	0x08000fa1
 8000eec:	08000f67 	.word	0x08000f67
 8000ef0:	08000fa1 	.word	0x08000fa1
 8000ef4:	08000fa1 	.word	0x08000fa1
 8000ef8:	08000f7d 	.word	0x08000f7d
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	1d1a      	adds	r2, r3, #4
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	6819      	ldr	r1, [r3, #0]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	60fa      	str	r2, [r7, #12]
 8000f0a:	b2ca      	uxtb	r2, r1
 8000f0c:	701a      	strb	r2, [r3, #0]
				break;
 8000f0e:	e047      	b.n	8000fa0 <ts_formatstring+0x174>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	1d1a      	adds	r2, r3, #4
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	da07      	bge.n	8000f30 <ts_formatstring+0x104>
					{
						val *= -1;
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	425b      	negs	r3, r3
 8000f24:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	222d      	movs	r2, #45	@ 0x2d
 8000f2e:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000f30:	69f9      	ldr	r1, [r7, #28]
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	220a      	movs	r2, #10
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fe97 	bl	8000c6c <ts_itoa>
				}
				break;
 8000f3e:	e02f      	b.n	8000fa0 <ts_formatstring+0x174>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8000f4a:	e007      	b.n	8000f5c <ts_formatstring+0x130>
					{
						*buf++ = *arg++;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	1c53      	adds	r3, r2, #1
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	1c59      	adds	r1, r3, #1
 8000f56:	60f9      	str	r1, [r7, #12]
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1f3      	bne.n	8000f4c <ts_formatstring+0x120>
					}
				}
				break;
 8000f64:	e01c      	b.n	8000fa0 <ts_formatstring+0x174>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	1d1a      	adds	r2, r3, #4
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	6819      	ldr	r1, [r3, #0]
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	220a      	movs	r2, #10
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fe79 	bl	8000c6c <ts_itoa>
				break;
 8000f7a:	e011      	b.n	8000fa0 <ts_formatstring+0x174>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	1d1a      	adds	r2, r3, #4
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe6d 	bl	8000c6c <ts_itoa>
				break;
 8000f92:	e005      	b.n	8000fa0 <ts_formatstring+0x174>
			  case '%':
				  *buf++ = '%';
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60fa      	str	r2, [r7, #12]
 8000f9a:	2225      	movs	r2, #37	@ 0x25
 8000f9c:	701a      	strb	r2, [r3, #0]
				  break;
 8000f9e:	bf00      	nop
			}
			fmt++;
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	e007      	b.n	8000fb8 <ts_formatstring+0x18c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	1c53      	adds	r3, r2, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	1c59      	adds	r1, r3, #1
 8000fb2:	60f9      	str	r1, [r7, #12]
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f47f af3e 	bne.w	8000e3e <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	1ad3      	subs	r3, r2, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop

08000fd8 <console_recv>:

// コンソールからの入力を受信する関数
static uint8_t console_recv(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint8_t data;
	int32_t size;
	
	while(1) {
		// 受信できるで待つ
		size = usart_drv_recv(USART_DRV_DEV_CONSOLE, &data, 1, 1000);
 8000fde:	1cf9      	adds	r1, r7, #3
 8000fe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f002 fb9e 	bl	8003728 <usart_drv_recv>
 8000fec:	6078      	str	r0, [r7, #4]
		// 期待したサイズ読めた？
		if (size == 1) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d000      	beq.n	8000ff6 <console_recv+0x1e>
		size = usart_drv_recv(USART_DRV_DEV_CONSOLE, &data, 1, 1000);
 8000ff4:	e7f3      	b.n	8000fde <console_recv+0x6>
			break;
 8000ff6:	bf00      	nop
		}
	}
	
	return data;
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <console_analysis>:

// コンソールからの入力を受信する関数
static void console_analysis(uint8_t data)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b090      	sub	sp, #64	@ 0x40
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	CONSOLE_CB *this = get_myself();
 800100e:	4b6c      	ldr	r3, [pc, #432]	@ (80011c0 <console_analysis+0x1bc>)
 8001010:	63bb      	str	r3, [r7, #56]	@ 0x38
	COMMAND_INFO *cmd_info;
	uint8_t i, j;
	uint8_t argc = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	char *argv[CONSOLE_ARG_MAX];
	uint8_t base_pos = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t sp_pos = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	
	switch (data) {
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b0a      	cmp	r3, #10
 8001028:	d02e      	beq.n	8001088 <console_analysis+0x84>
 800102a:	2b0a      	cmp	r3, #10
 800102c:	f300 80b5 	bgt.w	800119a <console_analysis+0x196>
 8001030:	2b08      	cmp	r3, #8
 8001032:	f000 80c0 	beq.w	80011b6 <console_analysis+0x1b2>
 8001036:	2b09      	cmp	r3, #9
 8001038:	f040 80af 	bne.w	800119a <console_analysis+0x196>
		case '\t':	// tab
			// コマンドの一覧を表示
			console_printf("\n");
 800103c:	4861      	ldr	r0, [pc, #388]	@ (80011c4 <console_analysis+0x1c0>)
 800103e:	f000 f979 	bl	8001334 <console_printf>
			for (i = 0; i < this->cmd_idx; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001048:	e013      	b.n	8001072 <console_analysis+0x6e>
				cmd_info = &(this->cmd_info[i]);
 800104a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800104e:	330a      	adds	r3, #10
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001054:	4413      	add	r3, r2
 8001056:	633b      	str	r3, [r7, #48]	@ 0x30
				console_printf(cmd_info->input);
 8001058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f969 	bl	8001334 <console_printf>
				console_printf("\n");
 8001062:	4858      	ldr	r0, [pc, #352]	@ (80011c4 <console_analysis+0x1c0>)
 8001064:	f000 f966 	bl	8001334 <console_printf>
			for (i = 0; i < this->cmd_idx; i++) {
 8001068:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800106c:	3301      	adds	r3, #1
 800106e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001074:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8001078:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800107c:	429a      	cmp	r2, r3
 800107e:	d3e4      	bcc.n	800104a <console_analysis+0x46>
			}
			console_printf("\n");
 8001080:	4850      	ldr	r0, [pc, #320]	@ (80011c4 <console_analysis+0x1c0>)
 8001082:	f000 f957 	bl	8001334 <console_printf>
			break;
 8001086:	e097      	b.n	80011b8 <console_analysis+0x1b4>
		case '\b':	// back space
			break;
		case '\n':	// Enter
			// NULL文字を設定
			this->buf[this->buf_idx++] = '\0';
 8001088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800108a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	b2d1      	uxtb	r1, r2
 8001092:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001094:	f882 104c 	strb.w	r1, [r2, #76]	@ 0x4c
 8001098:	461a      	mov	r2, r3
 800109a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800109c:	4413      	add	r3, r2
 800109e:	2200      	movs	r2, #0
 80010a0:	731a      	strb	r2, [r3, #12]
			// コマンドに設定されている？
			for (i = 0; i < this->cmd_idx; i++) {
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80010a8:	e06b      	b.n	8001182 <console_analysis+0x17e>
				cmd_info = &(this->cmd_info[i]);
 80010aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80010ae:	330a      	adds	r3, #10
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010b4:	4413      	add	r3, r2
 80010b6:	633b      	str	r3, [r7, #48]	@ 0x30
				// コマンド名が一致した
				if (memcmp(this->buf, cmd_info->input, strlen(cmd_info->input)) == 0) {
 80010b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010ba:	f103 040c 	add.w	r4, r3, #12
 80010be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c0:	681d      	ldr	r5, [r3, #0]
 80010c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f8ba 	bl	8000240 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4629      	mov	r1, r5
 80010d2:	4620      	mov	r0, r4
 80010d4:	f009 ff9a 	bl	800b00c <memcmp>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d14c      	bne.n	8001178 <console_analysis+0x174>
					// 引数解析 (*) 先頭に空白は絶対に入れないこと！！
					for (j = 0; j < CONSOLE_ARG_MAX; j++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80010e4:	e039      	b.n	800115a <console_analysis+0x156>
						// 空白を検索
						sp_pos = find_str(' ', &(this->buf[base_pos]));
 80010e6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80010ea:	3308      	adds	r3, #8
 80010ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010ee:	4413      	add	r3, r2
 80010f0:	3304      	adds	r3, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	2020      	movs	r0, #32
 80010f6:	f7ff fd9d 	bl	8000c34 <find_str>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						// 引数設定
						argv[argc++] = &(this->buf[base_pos]);
 8001100:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001104:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001108:	1c59      	adds	r1, r3, #1
 800110a:	f887 103d 	strb.w	r1, [r7, #61]	@ 0x3d
 800110e:	4619      	mov	r1, r3
 8001110:	f102 0308 	add.w	r3, r2, #8
 8001114:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001116:	4413      	add	r3, r2
 8001118:	1d1a      	adds	r2, r3, #4
 800111a:	008b      	lsls	r3, r1, #2
 800111c:	3340      	adds	r3, #64	@ 0x40
 800111e:	443b      	add	r3, r7
 8001120:	f843 2c38 	str.w	r2, [r3, #-56]
						// 空白がなかった
						if (sp_pos == 0) {
 8001124:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001128:	2b00      	cmp	r3, #0
 800112a:	d01b      	beq.n	8001164 <console_analysis+0x160>
							break;
						}
						// 空白をNULL文字に設定
						this->buf[base_pos+sp_pos] = '\0';
 800112c:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001130:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001134:	4413      	add	r3, r2
 8001136:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001138:	4413      	add	r3, r2
 800113a:	2200      	movs	r2, #0
 800113c:	731a      	strb	r2, [r3, #12]
						// 検索開始位置を更新 
						base_pos += sp_pos + 1;
 800113e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001142:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001146:	4413      	add	r3, r2
 8001148:	b2db      	uxtb	r3, r3
 800114a:	3301      	adds	r3, #1
 800114c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
					for (j = 0; j < CONSOLE_ARG_MAX; j++) {
 8001150:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001154:	3301      	adds	r3, #1
 8001156:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800115a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800115e:	2b09      	cmp	r3, #9
 8001160:	d9c1      	bls.n	80010e6 <console_analysis+0xe2>
 8001162:	e000      	b.n	8001166 <console_analysis+0x162>
							break;
 8001164:	bf00      	nop
					}
					// コマンド実行
					cmd_info->func(argc, argv);
 8001166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800116e:	f107 0108 	add.w	r1, r7, #8
 8001172:	4610      	mov	r0, r2
 8001174:	4798      	blx	r3
					break;
 8001176:	e00b      	b.n	8001190 <console_analysis+0x18c>
			for (i = 0; i < this->cmd_idx; i++) {
 8001178:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800117c:	3301      	adds	r3, #1
 800117e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001184:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8001188:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800118c:	429a      	cmp	r2, r3
 800118e:	d38c      	bcc.n	80010aa <console_analysis+0xa6>
				}
			}
			// その他あればここで処理する
			// コマンドラインバッファインデックスをクリア
			this->buf_idx = 0;
 8001190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001192:	2200      	movs	r2, #0
 8001194:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			break;
 8001198:	e00e      	b.n	80011b8 <console_analysis+0x1b4>
		default:
			// データをバッファを格納
			this->buf[this->buf_idx++] = data;
 800119a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800119c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	b2d1      	uxtb	r1, r2
 80011a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011a6:	f882 104c 	strb.w	r1, [r2, #76]	@ 0x4c
 80011aa:	461a      	mov	r2, r3
 80011ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ae:	4413      	add	r3, r2
 80011b0:	79fa      	ldrb	r2, [r7, #7]
 80011b2:	731a      	strb	r2, [r3, #12]
			break;
 80011b4:	e000      	b.n	80011b8 <console_analysis+0x1b4>
			break;
 80011b6:	bf00      	nop
	}
	
	return;
 80011b8:	bf00      	nop
}
 80011ba:	3740      	adds	r7, #64	@ 0x40
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	20000084 	.word	0x20000084
 80011c4:	0800b23c 	.word	0x0800b23c

080011c8 <StartConsoleSend>:

// コンソール送信タスク
void StartConsoleSend(void const * argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0a8      	sub	sp, #160	@ 0xa0
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	CONSOLE_CB *this =  get_myself();
 80011d0:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <StartConsoleSend+0x70>)
 80011d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	int8_t print_buf[CONSOLE_SEND_MAX];
	uint32_t size;
	
	while (1) {
		// 送信データ待ち
		evt = osMailGet(this->ConsoleSendMailHandle, 10);
 80011d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011da:	6899      	ldr	r1, [r3, #8]
 80011dc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80011e0:	220a      	movs	r2, #10
 80011e2:	4618      	mov	r0, r3
 80011e4:	f006 fdfc 	bl	8007de0 <osMailGet>
		// イベントがないなら次の送信データを待つ
		if (evt.status == osEventMail) {
 80011e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011ec:	2b20      	cmp	r3, #32
 80011ee:	d1f2      	bne.n	80011d6 <StartConsoleSend+0xe>
			// 早く開放したいからローカル変数にコピー
			memcpy(print_buf, evt.value.p, CONSOLE_SEND_MAX);
 80011f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4611      	mov	r1, r2
 80011fa:	2280      	movs	r2, #128	@ 0x80
 80011fc:	4618      	mov	r0, r3
 80011fe:	f009 ff55 	bl	800b0ac <memcpy>
			// 解放
			osMailFree(this->ConsoleSendMailHandle, evt.value.p);
 8001202:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f006 fe5a 	bl	8007ec8 <osMailFree>
			// サイズ取得
			size = strlen(print_buf);
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f811 	bl	8000240 <strlen>
 800121e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
			// コンソール出力
			ercd = usart_drv_send(USART_DRV_DEV_CONSOLE, (uint8_t*)print_buf, size, 10);
 8001222:	f107 0108 	add.w	r1, r7, #8
 8001226:	230a      	movs	r3, #10
 8001228:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800122c:	2000      	movs	r0, #0
 800122e:	f002 fa0b 	bl	8003648 <usart_drv_send>
 8001232:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		evt = osMailGet(this->ConsoleSendMailHandle, 10);
 8001236:	e7ce      	b.n	80011d6 <StartConsoleSend+0xe>
 8001238:	20000084 	.word	0x20000084

0800123c <StartConsoleRecv>:
	}
}

// コンソール受信タスク
void StartConsoleRecv(void const * argument)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	CONSOLE_CB *this =  get_myself();
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <StartConsoleRecv+0x48>)
 8001246:	60fb      	str	r3, [r7, #12]
	uint8_t data[2];
	
	while (1) {
		// "command>"を出力
		if (this->buf_idx == 0) {
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <StartConsoleRecv+0x1c>
			console_printf("command>");
 8001252:	480d      	ldr	r0, [pc, #52]	@ (8001288 <StartConsoleRecv+0x4c>)
 8001254:	f000 f86e 	bl	8001334 <console_printf>
		}
		// コンソールからの入力を受信する
		data[0] = console_recv();
 8001258:	f7ff febe 	bl	8000fd8 <console_recv>
 800125c:	4603      	mov	r3, r0
 800125e:	723b      	strb	r3, [r7, #8]
		data[1] = '\0';
 8001260:	2300      	movs	r3, #0
 8001262:	727b      	strb	r3, [r7, #9]
		// 改行コード変換(\r→\n)
		if (data[0] == '\r') data[0] = '\n';
 8001264:	7a3b      	ldrb	r3, [r7, #8]
 8001266:	2b0d      	cmp	r3, #13
 8001268:	d101      	bne.n	800126e <StartConsoleRecv+0x32>
 800126a:	230a      	movs	r3, #10
 800126c:	723b      	strb	r3, [r7, #8]
		// エコーバック
		console_printf("%c", data[0]);
 800126e:	7a3b      	ldrb	r3, [r7, #8]
 8001270:	4619      	mov	r1, r3
 8001272:	4806      	ldr	r0, [pc, #24]	@ (800128c <StartConsoleRecv+0x50>)
 8001274:	f000 f85e 	bl	8001334 <console_printf>
		// 受信データ解析
		console_analysis(data[0]);
 8001278:	7a3b      	ldrb	r3, [r7, #8]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fec2 	bl	8001004 <console_analysis>
		if (this->buf_idx == 0) {
 8001280:	e7e2      	b.n	8001248 <StartConsoleRecv+0xc>
 8001282:	bf00      	nop
 8001284:	20000084 	.word	0x20000084
 8001288:	0800b240 	.word	0x0800b240
 800128c:	0800b24c 	.word	0x0800b24c

08001290 <console_init>:
	}
}

// 初期化
osStatus console_init(void)
{
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b094      	sub	sp, #80	@ 0x50
 8001294:	af00      	add	r7, sp, #0
	CONSOLE_CB *this =  get_myself();
 8001296:	4b24      	ldr	r3, [pc, #144]	@ (8001328 <console_init+0x98>)
 8001298:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t ercd;
	
	// 初期化
	memset(this, 0x00, sizeof(CONSOLE_CB));
 800129a:	22d4      	movs	r2, #212	@ 0xd4
 800129c:	2100      	movs	r1, #0
 800129e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80012a0:	f009 fec4 	bl	800b02c <memset>
	
	// オープン
	if ((ercd = usart_drv_open(USART_DRV_DEV_CONSOLE)) != osOK) {
 80012a4:	2000      	movs	r0, #0
 80012a6:	f002 f98b 	bl	80035c0 <usart_drv_open>
 80012aa:	64b8      	str	r0, [r7, #72]	@ 0x48
 80012ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d134      	bne.n	800131c <console_init+0x8c>
		goto EXIT;
	}
	
	// メールキュー作成
	osMailQDef(ConsoleSendBuf, 32, CONSOLE_SEND_MAX);
 80012b2:	2320      	movs	r3, #32
 80012b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012b6:	2304      	movs	r3, #4
 80012b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012be:	643b      	str	r3, [r7, #64]	@ 0x40
	this->ConsoleSendMailHandle = osMailCreate(osMailQ(ConsoleSendBuf), NULL);
 80012c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f006 fcde 	bl	8007c88 <osMailCreate>
 80012cc:	4602      	mov	r2, r0
 80012ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012d0:	609a      	str	r2, [r3, #8]
	
	osThreadDef(ConsoleSend, StartConsoleSend, osPriorityNormal, 0, 512);
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <console_init+0x9c>)
 80012d4:	f107 041c 	add.w	r4, r7, #28
 80012d8:	461d      	mov	r5, r3
 80012da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	this->ConsoleSendTaskHandle = osThreadCreate(osThread(ConsoleSend), NULL);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 fa5d 	bl	80077ac <osThreadCreate>
 80012f2:	4602      	mov	r2, r0
 80012f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012f6:	601a      	str	r2, [r3, #0]
	
	osThreadDef(ConsoleRecv, StartConsoleRecv, osPriorityLow, 0, 512);
 80012f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <console_init+0xa0>)
 80012fa:	463c      	mov	r4, r7
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	this->ConsoleRecvTaskHandle = osThreadCreate(osThread(ConsoleRecv), NULL);
 800130a:	463b      	mov	r3, r7
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f006 fa4c 	bl	80077ac <osThreadCreate>
 8001314:	4602      	mov	r2, r0
 8001316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	e000      	b.n	800131e <console_init+0x8e>
		goto EXIT;
 800131c:	bf00      	nop
	
EXIT:
	return ercd;
 800131e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001320:	4618      	mov	r0, r3
 8001322:	3750      	adds	r7, #80	@ 0x50
 8001324:	46bd      	mov	sp, r7
 8001326:	bdb0      	pop	{r4, r5, r7, pc}
 8001328:	20000084 	.word	0x20000084
 800132c:	0800b25c 	.word	0x0800b25c
 8001330:	0800b284 	.word	0x0800b284

08001334 <console_printf>:

void console_printf(const char *fmt, ...)
{
 8001334:	b40f      	push	{r0, r1, r2, r3}
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
	CONSOLE_CB *this = get_myself();
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <console_printf+0x70>)
 800133e:	60fb      	str	r3, [r7, #12]
	int32_t length = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
	va_list va;
	char *output;
	
	va_start(va, fmt);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800134a:	6839      	ldr	r1, [r7, #0]
 800134c:	69b8      	ldr	r0, [r7, #24]
 800134e:	f7ff fcd7 	bl	8000d00 <ts_formatlength>
 8001352:	60b8      	str	r0, [r7, #8]
	va_end(va);
	
	// 最大数を超えている場合は終了
	if (length > CONSOLE_SEND_MAX) {
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	2b80      	cmp	r3, #128	@ 0x80
 8001358:	dc1c      	bgt.n	8001394 <console_printf+0x60>
		return;
	}
	
	// メモリ確保
	output = osMailAlloc(this->ConsoleSendMailHandle, osWaitForever);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f04f 31ff 	mov.w	r1, #4294967295
 8001362:	4618      	mov	r0, r3
 8001364:	f006 fce8 	bl	8007d38 <osMailAlloc>
 8001368:	6078      	str	r0, [r7, #4]
	
	// 初期化
	memset(output, 0x00, CONSOLE_SEND_MAX);
 800136a:	2280      	movs	r2, #128	@ 0x80
 800136c:	2100      	movs	r1, #0
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f009 fe5c 	bl	800b02c <memset>
	
	va_start(va, fmt);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	603b      	str	r3, [r7, #0]
	length = ts_formatstring(output, fmt, va);
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	69b9      	ldr	r1, [r7, #24]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fd54 	bl	8000e2c <ts_formatstring>
 8001384:	60b8      	str	r0, [r7, #8]
	// コンソール送信タスクへ送信
	osMailPut(this->ConsoleSendMailHandle, output);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	f006 fce9 	bl	8007d64 <osMailPut>
 8001392:	e000      	b.n	8001396 <console_printf+0x62>
		return;
 8001394:	bf00      	nop
	va_end(va);
	
}
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800139e:	b004      	add	sp, #16
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000084 	.word	0x20000084

080013a8 <console_set_command>:

// コマンドを設定する関数
osStatus console_set_command(COMMAND_INFO *cmd_info)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	CONSOLE_CB *this;
	
	// コマンド関数がNULLの場合エラーを返して終了
	if (cmd_info == NULL) {
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <console_set_command+0x14>
		return -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	e028      	b.n	800140e <console_set_command+0x66>
	}
	
	// 制御ブロックの取得
	this = get_myself();
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <console_set_command+0x74>)
 80013be:	60fb      	str	r3, [r7, #12]
	
	// もうコマンド関数を登録できない場合はエラーを返して終了
	if (this->cmd_idx >= CONOLE_CMD_NUM) {
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	d902      	bls.n	80013d0 <console_set_command+0x28>
		return -1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e01e      	b.n	800140e <console_set_command+0x66>
	}
	
	// 登録
	this->cmd_info[this->cmd_idx].input = cmd_info->input;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6819      	ldr	r1, [r3, #0]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	320a      	adds	r2, #10
 80013e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	this->cmd_info[this->cmd_idx].func = cmd_info->func;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013ea:	4618      	mov	r0, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	68f9      	ldr	r1, [r7, #12]
 80013f2:	f100 030a 	add.w	r3, r0, #10
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	605a      	str	r2, [r3, #4]
	this->cmd_idx++;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8001402:	3301      	adds	r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
	
	return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000084 	.word	0x20000084

08001420 <user_btn_callback>:
static STANDBY_APP_CTL standby_app_ctl;
#define get_myself() (&standby_app_ctl)

// ボタンコールバック
void user_btn_callback(BTN_STATUS sts)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	STANDBY_APP_CTL *this = get_myself();
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <user_btn_callback+0x28>)
 800142c:	60fb      	str	r3, [r7, #12]
	
	// 短押しの場合
	if (sts == BTN_SHORT_PUSHED) {
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <user_btn_callback+0x20>
		// イベントセット
		osSignalSet(this->StandbyHandle, GO_STANDBY_EVENT);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2101      	movs	r1, #1
 800143a:	4618      	mov	r0, r3
 800143c:	f006 fa96 	bl	800796c <osSignalSet>
	}
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000158 	.word	0x20000158

0800144c <go_standby>:

// スタンバイ移行処理
static void go_standby(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
	osStatus ercd;
	
	// スリープ
	if ((ercd = can_mng_sleep()) != osOK) {
 8001452:	f003 f899 	bl	8004588 <can_mng_sleep>
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d113      	bne.n	8001486 <go_standby+0x3a>
		goto EXIT;
	}
	
	//Clear the WU FLAG
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <go_standby+0x44>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <go_standby+0x44>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6013      	str	r3, [r2, #0]
	
	//Enable the WAKEUP PIN(PA0)
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800146a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800146e:	f004 faaf 	bl	80059d0 <HAL_PWR_EnableWakeUpPin>
	//HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2);
	
	console_printf("go standby\n");
 8001472:	4808      	ldr	r0, [pc, #32]	@ (8001494 <go_standby+0x48>)
 8001474:	f7ff ff5e 	bl	8001334 <console_printf>
	
	// 文字列表示のため500ms待機
	osDelay(500);
 8001478:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800147c:	f006 f9e9 	bl	8007852 <osDelay>
	
	//Enter the standby mode
	HAL_PWR_EnterSTANDBYMode();
 8001480:	f004 fac6 	bl	8005a10 <HAL_PWR_EnterSTANDBYMode>
	
	// スタンバイ復帰後はリセットと同じ
	
EXIT:
	return;
 8001484:	e000      	b.n	8001488 <go_standby+0x3c>
		goto EXIT;
 8001486:	bf00      	nop
	return;
 8001488:	bf00      	nop
}
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40007000 	.word	0x40007000
 8001494:	0800b2a0 	.word	0x0800b2a0

08001498 <StandbyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StandbyTask(void const * argument)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	EVENT_FUNC evt_func;
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;) {
		// イベント待機
		evt = osSignalWait(GO_STANDBY_EVENT, osWaitForever);
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	2101      	movs	r1, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f006 fa9e 	bl	80079ec <osSignalWait>
		// イベント受信
		if (evt.status == osEventSignal) {
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d1f4      	bne.n	80014a0 <StandbyTask+0x8>
			// イベント関数テーブルのインデックスに変換
			for (evt_idx = 0; evt_idx < 32; evt_idx++) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	77fb      	strb	r3, [r7, #31]
 80014ba:	e00b      	b.n	80014d4 <StandbyTask+0x3c>
				if (((evt.value.signals) & (1UL << evt_idx)) != 0) {
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	461a      	mov	r2, r3
 80014c0:	7ffb      	ldrb	r3, [r7, #31]
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d106      	bne.n	80014dc <StandbyTask+0x44>
			for (evt_idx = 0; evt_idx < 32; evt_idx++) {
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	3301      	adds	r3, #1
 80014d2:	77fb      	strb	r3, [r7, #31]
 80014d4:	7ffb      	ldrb	r3, [r7, #31]
 80014d6:	2b1f      	cmp	r3, #31
 80014d8:	d9f0      	bls.n	80014bc <StandbyTask+0x24>
 80014da:	e000      	b.n	80014de <StandbyTask+0x46>
					break;
 80014dc:	bf00      	nop
				}
			}
			if (evt_idx >= 32) {
 80014de:	7ffb      	ldrb	r3, [r7, #31]
 80014e0:	2b1f      	cmp	r3, #31
 80014e2:	d804      	bhi.n	80014ee <StandbyTask+0x56>
				continue;
			}
			// イベント処理実行
			evt_func = event_func[evt_idx];
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <StandbyTask+0x5c>)
 80014e6:	61bb      	str	r3, [r7, #24]
			evt_func();
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	4798      	blx	r3
 80014ec:	e7d8      	b.n	80014a0 <StandbyTask+0x8>
				continue;
 80014ee:	bf00      	nop
		evt = osSignalWait(GO_STANDBY_EVENT, osWaitForever);
 80014f0:	e7d6      	b.n	80014a0 <StandbyTask+0x8>
 80014f2:	bf00      	nop
 80014f4:	0800144d 	.word	0x0800144d

080014f8 <standby_app_init>:
	}
	/* USER CODE END 5 */
}

void standby_app_init(void)
{
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
	STANDBY_APP_CTL *this = get_myself();
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <standby_app_init+0x4c>)
 8001500:	61fb      	str	r3, [r7, #28]
	
	// コンテキスト初期化
	memset(this, 0, sizeof(STANDBY_APP_CTL));
 8001502:	220c      	movs	r2, #12
 8001504:	2100      	movs	r1, #0
 8001506:	69f8      	ldr	r0, [r7, #28]
 8001508:	f009 fd90 	bl	800b02c <memset>
	
	/* definition and creation of Standby */
	osThreadDef(Standby, StandbyTask, osPriorityLow, 0, 512);
 800150c:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <standby_app_init+0x50>)
 800150e:	463c      	mov	r4, r7
 8001510:	461d      	mov	r5, r3
 8001512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001516:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800151a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	this->StandbyHandle = osThreadCreate(osThread(Standby), NULL);
 800151e:	463b      	mov	r3, r7
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f006 f942 	bl	80077ac <osThreadCreate>
 8001528:	4602      	mov	r2, r0
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	609a      	str	r2, [r3, #8]
	
	// コールバック登録
	BTN_dev_reg_callback(BTN_TYPE_USER_BTN, user_btn_callback);
 800152e:	4907      	ldr	r1, [pc, #28]	@ (800154c <standby_app_init+0x54>)
 8001530:	2000      	movs	r0, #0
 8001532:	f000 f92d 	bl	8001790 <BTN_dev_reg_callback>
	
	// 状態更新
	this->state = ST_INITIALIZED;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bdb0      	pop	{r4, r5, r7, pc}
 8001544:	20000158 	.word	0x20000158
 8001548:	0800b2b4 	.word	0x0800b2b4
 800154c:	08001421 	.word	0x08001421

08001550 <callback_timer>:
	{GPIOA,		GPIO_PIN_0},	// 上ボタンのGPIO情報
};

// コールバック
static void callback_timer(void const *arg)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	BTN_CTL *this = get_myself();
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <callback_timer+0x20>)
 800155a:	60fb      	str	r3, [r7, #12]

	// イベントセット
	osSignalSet(this->tsk_id, PERIODIC_EVENT);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2101      	movs	r1, #1
 8001562:	4618      	mov	r0, r3
 8001564:	f006 fa02 	bl	800796c <osSignalSet>
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000164 	.word	0x20000164

08001574 <btn_dev_check>:

// ボタンの状態を確認する関数
static void btn_dev_check(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
	GPIO_PinState sts;
	GPIO_TypeDef  *gpio_grp;
	BTN_CTL		  *this = &btn_ctl;
 800157a:	4b40      	ldr	r3, [pc, #256]	@ (800167c <btn_dev_check+0x108>)
 800157c:	613b      	str	r3, [r7, #16]
	BTN_INFO	  *info;
	uint32_t	  pushed_time;
	uint16_t	  pin_no;
	uint8_t		  i;
	
	for (i = 0; i < BTN_MAX; i++) {
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]
 8001582:	e074      	b.n	800166e <btn_dev_check+0xfa>
		// ボタンの情報を取得
		info = &(this->info[i]);
 8001584:	7dfa      	ldrb	r2, [r7, #23]
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4413      	add	r3, r2
 8001592:	3304      	adds	r3, #4
 8001594:	60fb      	str	r3, [r7, #12]
		gpio_grp = btn_info_tbl[i].gpio_grp;
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	4a39      	ldr	r2, [pc, #228]	@ (8001680 <btn_dev_check+0x10c>)
 800159a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800159e:	60bb      	str	r3, [r7, #8]
		pin_no = btn_info_tbl[i].pin_no;
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	4a37      	ldr	r2, [pc, #220]	@ (8001680 <btn_dev_check+0x10c>)
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	80fb      	strh	r3, [r7, #6]
		// ボタンの状態を取得
		sts = HAL_GPIO_ReadPin(gpio_grp, pin_no);
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	4619      	mov	r1, r3
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f004 f9db 	bl	800596c <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	717b      	strb	r3, [r7, #5]
		// ボタンが押された?
		if (sts == GPIO_PIN_SET) {
 80015ba:	797b      	ldrb	r3, [r7, #5]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d125      	bne.n	800160c <btn_dev_check+0x98>
			// 長押し確定中は何もしない
			if (info->cur_status == LONG_PUSHED) {
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	785b      	ldrb	r3, [r3, #1]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d04e      	beq.n	8001666 <btn_dev_check+0xf2>
				continue;
			}
			// 現状態を更新
			info->cur_status = PUSHED;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	705a      	strb	r2, [r3, #1]
			// カウンタを進める
			info->counter++;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	605a      	str	r2, [r3, #4]
			// カウンタから時間[ms]に変換
			pushed_time = info->counter * BTN_CHECK_PERIOD;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2264      	movs	r2, #100	@ 0x64
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	603b      	str	r3, [r7, #0]
			// 長押し判定
			if(pushed_time > BTN_LONG_PUSHED_TIME) {
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d936      	bls.n	800165c <btn_dev_check+0xe8>
				// 現状態を更新
				info->cur_status = LONG_PUSHED;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2203      	movs	r2, #3
 80015f2:	705a      	strb	r2, [r3, #1]
				// コールバック実行
				if (info->cb) {
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <btn_dev_check+0x90>
					info->cb(BTN_LONG_PUSHED);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2001      	movs	r0, #1
 8001602:	4798      	blx	r3
				}
				console_printf("long\n");
 8001604:	481f      	ldr	r0, [pc, #124]	@ (8001684 <btn_dev_check+0x110>)
 8001606:	f7ff fe95 	bl	8001334 <console_printf>
 800160a:	e027      	b.n	800165c <btn_dev_check+0xe8>
				; // ボタン押し込み中
			}
		// ボタンが押されていない？
		} else {
			// 現状態を更新
			info->cur_status = RELEASED;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2201      	movs	r2, #1
 8001610:	705a      	strb	r2, [r3, #1]
			// そもそもボタンが押されていた？ (長押し確定前)
			if (info->pre_status == PUSHED) {
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d119      	bne.n	800164e <btn_dev_check+0xda>
				// カウンタから時間[ms]に変換
				pushed_time = info->counter * BTN_CHECK_PERIOD;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2264      	movs	r2, #100	@ 0x64
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	603b      	str	r3, [r7, #0]
				// カウンタをクリア
				info->counter = 0;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
				// 短押し判定
				if (pushed_time < BTN_SHORT_PUSHED_TIME) {
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001632:	4293      	cmp	r3, r2
 8001634:	d812      	bhi.n	800165c <btn_dev_check+0xe8>
					// コールバック実行
					if (info->cb) {
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <btn_dev_check+0xd2>
						info->cb(BTN_SHORT_PUSHED);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2000      	movs	r0, #0
 8001644:	4798      	blx	r3
					}
					console_printf("short\n");
 8001646:	4810      	ldr	r0, [pc, #64]	@ (8001688 <btn_dev_check+0x114>)
 8001648:	f7ff fe74 	bl	8001334 <console_printf>
 800164c:	e006      	b.n	800165c <btn_dev_check+0xe8>
				} else {
					;
				}
			// 長押し確定後にボタンがはなされた？
			} else if (info->pre_status == LONG_PUSHED) {
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d102      	bne.n	800165c <btn_dev_check+0xe8>
				// カウンタをクリア
				info->counter = 0;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
				// 特に何もしない
				; 
			}
		}
		// 前状態を更新
		info->pre_status = info->cur_status;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	785a      	ldrb	r2, [r3, #1]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e000      	b.n	8001668 <btn_dev_check+0xf4>
				continue;
 8001666:	bf00      	nop
	for (i = 0; i < BTN_MAX; i++) {
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	3301      	adds	r3, #1
 800166c:	75fb      	strb	r3, [r7, #23]
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d087      	beq.n	8001584 <btn_dev_check+0x10>
	}
	
	return;
 8001674:	bf00      	nop
}
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000164 	.word	0x20000164
 8001680:	0800b7a4 	.word	0x0800b7a4
 8001684:	0800b2d0 	.word	0x0800b2d0
 8001688:	0800b2d8 	.word	0x0800b2d8

0800168c <BtnTask>:
	btn_dev_check,	// PERIODIC_EVENT
};

// 周期タスク
void BtnTask(void const * argument)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	EVENT_FUNC evt_func;
	
	/* Infinite loop */
	for(;;) {
		// イベント待機
		evt = osSignalWait(PERIODIC_EVENT, osWaitForever);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	2101      	movs	r1, #1
 800169e:	4618      	mov	r0, r3
 80016a0:	f006 f9a4 	bl	80079ec <osSignalWait>
		// イベント受信
		if (evt.status == osEventSignal) {
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d1f4      	bne.n	8001694 <BtnTask+0x8>
			// イベント関数テーブルのインデックスに変換
			for (evt_idx = 0; evt_idx < 32; evt_idx++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	77fb      	strb	r3, [r7, #31]
 80016ae:	e00b      	b.n	80016c8 <BtnTask+0x3c>
				if (((evt.value.signals) & (1UL << evt_idx)) != 0) {
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	461a      	mov	r2, r3
 80016b4:	7ffb      	ldrb	r3, [r7, #31]
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <BtnTask+0x44>
			for (evt_idx = 0; evt_idx < 32; evt_idx++) {
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	3301      	adds	r3, #1
 80016c6:	77fb      	strb	r3, [r7, #31]
 80016c8:	7ffb      	ldrb	r3, [r7, #31]
 80016ca:	2b1f      	cmp	r3, #31
 80016cc:	d9f0      	bls.n	80016b0 <BtnTask+0x24>
 80016ce:	e000      	b.n	80016d2 <BtnTask+0x46>
					break;
 80016d0:	bf00      	nop
				}
			}
			if (evt_idx >= 32) {
 80016d2:	7ffb      	ldrb	r3, [r7, #31]
 80016d4:	2b1f      	cmp	r3, #31
 80016d6:	d804      	bhi.n	80016e2 <BtnTask+0x56>
				continue;
			}
			// イベント処理実行
			evt_func = event_func[evt_idx];
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <BtnTask+0x5c>)
 80016da:	61bb      	str	r3, [r7, #24]
			evt_func();
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	4798      	blx	r3
 80016e0:	e7d8      	b.n	8001694 <BtnTask+0x8>
				continue;
 80016e2:	bf00      	nop
		evt = osSignalWait(PERIODIC_EVENT, osWaitForever);
 80016e4:	e7d6      	b.n	8001694 <BtnTask+0x8>
 80016e6:	bf00      	nop
 80016e8:	08001575 	.word	0x08001575

080016ec <btn_dev_init>:
}

// 内部関数
// ボタン初期化関数
void btn_dev_init(void)
{
 80016ec:	b5b0      	push	{r4, r5, r7, lr}
 80016ee:	b08a      	sub	sp, #40	@ 0x28
 80016f0:	af00      	add	r7, sp, #0
	BTN_CTL *this = &btn_ctl;
 80016f2:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <btn_dev_init+0x98>)
 80016f4:	623b      	str	r3, [r7, #32]
	osTimerId id;
	uint8_t i;
	
	// 制御ブロックの初期化
	memset(this, 0, sizeof(BTN_CTL));
 80016f6:	2210      	movs	r2, #16
 80016f8:	2100      	movs	r1, #0
 80016fa:	6a38      	ldr	r0, [r7, #32]
 80016fc:	f009 fc96 	bl	800b02c <memset>
	
	// ボタンの状態をRELEASEDに設定
	for (i = 0; i < BTN_MAX; i++) {
 8001700:	2300      	movs	r3, #0
 8001702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001706:	e01a      	b.n	800173e <btn_dev_init+0x52>
		this->info[i].pre_status = RELEASED;
 8001708:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800170c:	6a39      	ldr	r1, [r7, #32]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3304      	adds	r3, #4
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
		this->info[i].cur_status = RELEASED;
 800171e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001722:	6a39      	ldr	r1, [r7, #32]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3305      	adds	r3, #5
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BTN_MAX; i++) {
 8001734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001738:	3301      	adds	r3, #1
 800173a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800173e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0e0      	beq.n	8001708 <btn_dev_init+0x1c>
	}
	
	// 自タスクのIDを制御ブロックに設定
	osThreadDef(Btn, BtnTask, osPriorityIdle, 0, 1024);
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <btn_dev_init+0x9c>)
 8001748:	463c      	mov	r4, r7
 800174a:	461d      	mov	r5, r3
 800174c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001750:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001754:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	this->tsk_id = osThreadCreate(osThread(Btn), NULL);
 8001758:	463b      	mov	r3, r7
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f006 f825 	bl	80077ac <osThreadCreate>
 8001762:	4602      	mov	r2, r0
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	601a      	str	r2, [r3, #0]
	
	// タイマ作成
	id = osTimerCreate(osTimer(btnTimer), osTimerPeriodic, NULL);
 8001768:	2200      	movs	r2, #0
 800176a:	2101      	movs	r1, #1
 800176c:	4807      	ldr	r0, [pc, #28]	@ (800178c <btn_dev_init+0xa0>)
 800176e:	f006 f885 	bl	800787c <osTimerCreate>
 8001772:	61f8      	str	r0, [r7, #28]
	
	// タイマ開始
	osTimerStart(id, BTN_CHECK_PERIOD);
 8001774:	2164      	movs	r1, #100	@ 0x64
 8001776:	69f8      	ldr	r0, [r7, #28]
 8001778:	f006 f8b4 	bl	80078e4 <osTimerStart>
	
	return;
 800177c:	bf00      	nop
}
 800177e:	3728      	adds	r7, #40	@ 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bdb0      	pop	{r4, r5, r7, pc}
 8001784:	20000164 	.word	0x20000164
 8001788:	0800b2e4 	.word	0x0800b2e4
 800178c:	0800b79c 	.word	0x0800b79c

08001790 <BTN_dev_reg_callback>:

// 上ボタンコールバック登録関数
osStatus BTN_dev_reg_callback(BTN_TYPE type, BTN_CALLBACK cb)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
	BTN_CTL *this = get_myself();
 800179c:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <BTN_dev_reg_callback+0x44>)
 800179e:	60fb      	str	r3, [r7, #12]
	
	// コールバックがNULLの場合エラーを返す
	if ((type >= BTN_MAX)||(cb == NULL)) {
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <BTN_dev_reg_callback+0x1c>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <BTN_dev_reg_callback+0x22>
		return -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
 80017b0:	e00a      	b.n	80017c8 <BTN_dev_reg_callback+0x38>
	}
	
	// コールバックを登録
	this->info[type].cb = cb;
 80017b2:	79fa      	ldrb	r2, [r7, #7]
 80017b4:	68f9      	ldr	r1, [r7, #12]
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	330c      	adds	r3, #12
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	601a      	str	r2, [r3, #0]
	
	return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	20000164 	.word	0x20000164

080017d8 <can_spi_send_rcv>:
	;
}

//====MCPアクセス処理====
static osStatus can_spi_send_rcv(MCP2515_DEV dev, uint8_t *snd_data, uint8_t *rcv_data, uint32_t size)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	4603      	mov	r3, r0
 80017e6:	73fb      	strb	r3, [r7, #15]
	osStatus ercd;
	SPI_CH ch;
	
	// SPIのチャネル取得
	ch = mcp2515_info[dev].ch;
 80017e8:	2300      	movs	r3, #0
 80017ea:	75fb      	strb	r3, [r7, #23]
	
	// アサート
	if ((ercd = spi_nss_on(ch, 1)) != osOK) {
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2101      	movs	r1, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fa2b 	bl	8004c4c <spi_nss_on>
 80017f6:	6138      	str	r0, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d107      	bne.n	800180e <can_spi_send_rcv+0x36>
		goto EXIT;
	}
	
	// データ送受信
	if ((ercd = spi_send_recv(ch, snd_data, rcv_data, size)) != osOK) {
 80017fe:	7df8      	ldrb	r0, [r7, #23]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	f003 f99b 	bl	8004b40 <spi_send_recv>
 800180a:	6138      	str	r0, [r7, #16]
		;
	}
	
EXIT:
 800180c:	e000      	b.n	8001810 <can_spi_send_rcv+0x38>
		goto EXIT;
 800180e:	bf00      	nop
	// ネゲート
	if ((ercd = spi_nss_off(ch, 1)) != osOK) {
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2101      	movs	r1, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fa4d 	bl	8004cb4 <spi_nss_off>
 800181a:	6138      	str	r0, [r7, #16]
		;
	}
	
	return ercd;
 800181c:	693b      	ldr	r3, [r7, #16]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <reset>:

// リセット
static osStatus reset(MCP2515_DEV dev)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
	uint8_t snd_data;
	osStatus ret;
	
	// データ設定
	snd_data = MCP2515_INST_RESET;
 8001830:	23c0      	movs	r3, #192	@ 0xc0
 8001832:	72fb      	strb	r3, [r7, #11]
	
	// SPI送信
	ret = can_spi_send_rcv(dev, &snd_data, NULL, sizeof(snd_data));
 8001834:	f107 010b 	add.w	r1, r7, #11
 8001838:	79f8      	ldrb	r0, [r7, #7]
 800183a:	2301      	movs	r3, #1
 800183c:	2200      	movs	r2, #0
 800183e:	f7ff ffcb 	bl	80017d8 <can_spi_send_rcv>
 8001842:	60f8      	str	r0, [r7, #12]
	
	return ret;
 8001844:	68fb      	ldr	r3, [r7, #12]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <read_reg>:

// レジスタリード
static osStatus read_reg(MCP2515_DEV dev, uint8_t reg, uint8_t *data)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	603a      	str	r2, [r7, #0]
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	460b      	mov	r3, r1
 800185c:	71bb      	strb	r3, [r7, #6]
	uint8_t snd_data[3];
	uint8_t rcv_data[3];
	osStatus ret;
	
	// データ設定
	snd_data[0] = MCP2515_INST_READ_REG;
 800185e:	2303      	movs	r3, #3
 8001860:	743b      	strb	r3, [r7, #16]
	snd_data[1] = reg;
 8001862:	79bb      	ldrb	r3, [r7, #6]
 8001864:	747b      	strb	r3, [r7, #17]
	snd_data[2] = 0x00;	// (*)ダミー
 8001866:	2300      	movs	r3, #0
 8001868:	74bb      	strb	r3, [r7, #18]
	
	// SPI送信
	ret = can_spi_send_rcv(dev, snd_data, rcv_data, sizeof(snd_data));
 800186a:	f107 020c 	add.w	r2, r7, #12
 800186e:	f107 0110 	add.w	r1, r7, #16
 8001872:	79f8      	ldrb	r0, [r7, #7]
 8001874:	2303      	movs	r3, #3
 8001876:	f7ff ffaf 	bl	80017d8 <can_spi_send_rcv>
 800187a:	6178      	str	r0, [r7, #20]
	
	// 受信データ設定
	*data = rcv_data[2];
 800187c:	7bba      	ldrb	r2, [r7, #14]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	701a      	strb	r2, [r3, #0]
	
	return ret;
 8001882:	697b      	ldr	r3, [r7, #20]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <write_reg>:

// レジスタライト
static osStatus write_reg(MCP2515_DEV dev, uint8_t reg, uint8_t data)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	460b      	mov	r3, r1
 8001898:	71bb      	strb	r3, [r7, #6]
 800189a:	4613      	mov	r3, r2
 800189c:	717b      	strb	r3, [r7, #5]
	uint8_t snd_data[3];
	osStatus ret;
	
	// データ設定
	snd_data[0] = MCP2515_INST_WRITE_REG;
 800189e:	2302      	movs	r3, #2
 80018a0:	723b      	strb	r3, [r7, #8]
	snd_data[1] = reg;
 80018a2:	79bb      	ldrb	r3, [r7, #6]
 80018a4:	727b      	strb	r3, [r7, #9]
	snd_data[2] = data;
 80018a6:	797b      	ldrb	r3, [r7, #5]
 80018a8:	72bb      	strb	r3, [r7, #10]
	
	// SPI送信
	ret = can_spi_send_rcv(dev, snd_data, NULL, sizeof(snd_data));
 80018aa:	f107 0108 	add.w	r1, r7, #8
 80018ae:	79f8      	ldrb	r0, [r7, #7]
 80018b0:	2303      	movs	r3, #3
 80018b2:	2200      	movs	r2, #0
 80018b4:	f7ff ff90 	bl	80017d8 <can_spi_send_rcv>
 80018b8:	60f8      	str	r0, [r7, #12]
	
	return ret;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <modify_bit>:

// ビット変更
static osStatus modify_bit(MCP2515_DEV dev, uint8_t reg, uint8_t mask, uint8_t data)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	4603      	mov	r3, r0
 80018d8:	71bb      	strb	r3, [r7, #6]
 80018da:	460b      	mov	r3, r1
 80018dc:	717b      	strb	r3, [r7, #5]
 80018de:	4613      	mov	r3, r2
 80018e0:	713b      	strb	r3, [r7, #4]
	uint8_t tbl_size;
	uint8_t snd_data[4];
	osStatus ret;
	
	// ビット変更できるレジスタかどうかチェック
	tbl_size = sizeof(modify_reg_tbl)/sizeof(modify_reg_tbl[0]);
 80018e2:	230d      	movs	r3, #13
 80018e4:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < tbl_size; i++) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]
 80018ea:	e008      	b.n	80018fe <modify_bit+0x3a>
		if (modify_reg_tbl[i] == reg) {
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	4a14      	ldr	r2, [pc, #80]	@ (8001940 <modify_bit+0x7c>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	79ba      	ldrb	r2, [r7, #6]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d007      	beq.n	8001908 <modify_bit+0x44>
	for (i = 0; i < tbl_size; i++) {
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	3301      	adds	r3, #1
 80018fc:	75fb      	strb	r3, [r7, #23]
 80018fe:	7dfa      	ldrb	r2, [r7, #23]
 8001900:	7dbb      	ldrb	r3, [r7, #22]
 8001902:	429a      	cmp	r2, r3
 8001904:	d3f2      	bcc.n	80018ec <modify_bit+0x28>
 8001906:	e000      	b.n	800190a <modify_bit+0x46>
			break;
 8001908:	bf00      	nop
		}
	}
	if (i >= tbl_size) {
 800190a:	7dfa      	ldrb	r2, [r7, #23]
 800190c:	7dbb      	ldrb	r3, [r7, #22]
 800190e:	429a      	cmp	r2, r3
 8001910:	d301      	bcc.n	8001916 <modify_bit+0x52>
		return osErrorParameter;
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	e010      	b.n	8001938 <modify_bit+0x74>
	}
	
	// データ設定
	snd_data[0] = MCP2515_INST_CHANGE_BIT;
 8001916:	2305      	movs	r3, #5
 8001918:	733b      	strb	r3, [r7, #12]
	snd_data[1] = reg;
 800191a:	79bb      	ldrb	r3, [r7, #6]
 800191c:	737b      	strb	r3, [r7, #13]
	snd_data[2] = mask;
 800191e:	797b      	ldrb	r3, [r7, #5]
 8001920:	73bb      	strb	r3, [r7, #14]
	snd_data[3] = data;
 8001922:	793b      	ldrb	r3, [r7, #4]
 8001924:	73fb      	strb	r3, [r7, #15]
	
	// SPI送信
	ret = can_spi_send_rcv(dev, snd_data, NULL, sizeof(snd_data));
 8001926:	f107 010c 	add.w	r1, r7, #12
 800192a:	79f8      	ldrb	r0, [r7, #7]
 800192c:	2304      	movs	r3, #4
 800192e:	2200      	movs	r2, #0
 8001930:	f7ff ff52 	bl	80017d8 <can_spi_send_rcv>
 8001934:	6138      	str	r0, [r7, #16]
	
	return ret;
 8001936:	693b      	ldr	r3, [r7, #16]
}
 8001938:	4618      	mov	r0, r3
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}
 8001940:	0800b7b4 	.word	0x0800b7b4

08001944 <read_status>:

// 状態読み込み
static osStatus read_status(MCP2515_DEV dev, uint8_t *data)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
	uint8_t snd_data[2];
	uint8_t rcv_data[2];
	osStatus ret;
	
	// データ設定
	snd_data[0] = MCP2515_INST_READ_STATUS;
 8001950:	23a0      	movs	r3, #160	@ 0xa0
 8001952:	743b      	strb	r3, [r7, #16]
	snd_data[1] = 0x00;	// (*)ダミー
 8001954:	2300      	movs	r3, #0
 8001956:	747b      	strb	r3, [r7, #17]
	
	// SPI送信
	ret = can_spi_send_rcv(dev, snd_data, rcv_data, sizeof(snd_data));
 8001958:	f107 020c 	add.w	r2, r7, #12
 800195c:	f107 0110 	add.w	r1, r7, #16
 8001960:	79f8      	ldrb	r0, [r7, #7]
 8001962:	2302      	movs	r3, #2
 8001964:	f7ff ff38 	bl	80017d8 <can_spi_send_rcv>
 8001968:	6178      	str	r0, [r7, #20]
	
	// 受信データ設定
	*data = rcv_data[1];
 800196a:	7b7a      	ldrb	r2, [r7, #13]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	701a      	strb	r2, [r3, #0]
	
	return ret;
 8001970:	697b      	ldr	r3, [r7, #20]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <read_rxstatus>:

// RX状態読み込み
static osStatus read_rxstatus(MCP2515_DEV dev, uint8_t *data)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	6039      	str	r1, [r7, #0]
 8001984:	71fb      	strb	r3, [r7, #7]
	uint8_t snd_data[2];
	uint8_t rcv_data[2];
	osStatus ret;
	
	// データ設定
	snd_data[0] = MCP2515_INST_READ_RXSTATUS;
 8001986:	23b0      	movs	r3, #176	@ 0xb0
 8001988:	743b      	strb	r3, [r7, #16]
	snd_data[1] = 0x00;	// (*)ダミー
 800198a:	2300      	movs	r3, #0
 800198c:	747b      	strb	r3, [r7, #17]
	
	// SPI送信
	ret = can_spi_send_rcv(dev, snd_data, rcv_data, sizeof(snd_data));
 800198e:	f107 020c 	add.w	r2, r7, #12
 8001992:	f107 0110 	add.w	r1, r7, #16
 8001996:	79f8      	ldrb	r0, [r7, #7]
 8001998:	2302      	movs	r3, #2
 800199a:	f7ff ff1d 	bl	80017d8 <can_spi_send_rcv>
 800199e:	6178      	str	r0, [r7, #20]
	
	// 受信データ設定
	*data = rcv_data[1];
 80019a0:	7b7a      	ldrb	r2, [r7, #13]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	701a      	strb	r2, [r3, #0]
	
	return ret;
 80019a6:	697b      	ldr	r3, [r7, #20]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <wait_sts>:

// 指定したレジスタが特定の値になるまで待機
static osStatus wait_sts(MCP2515_DEV dev, uint8_t reg, uint8_t mask, uint8_t sts)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4604      	mov	r4, r0
 80019b8:	4608      	mov	r0, r1
 80019ba:	4611      	mov	r1, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	4623      	mov	r3, r4
 80019c0:	71fb      	strb	r3, [r7, #7]
 80019c2:	4603      	mov	r3, r0
 80019c4:	71bb      	strb	r3, [r7, #6]
 80019c6:	460b      	mov	r3, r1
 80019c8:	717b      	strb	r3, [r7, #5]
 80019ca:	4613      	mov	r3, r2
 80019cc:	713b      	strb	r3, [r7, #4]
	osStatus ercd;
	uint8_t data;
	uint8_t timeout = 10;
 80019ce:	230a      	movs	r3, #10
 80019d0:	72fb      	strb	r3, [r7, #11]
	
	while (timeout--) {
 80019d2:	e01a      	b.n	8001a0a <wait_sts+0x5a>
		// 値読み出し
		if ((ercd = read_reg(dev, reg, &data)) != osOK) {
 80019d4:	f107 020a 	add.w	r2, r7, #10
 80019d8:	79b9      	ldrb	r1, [r7, #6]
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff36 	bl	800184e <read_reg>
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10e      	bne.n	8001a08 <wait_sts+0x58>
			continue;
		}
		// チェック
		if ((data & mask) == (sts & mask)) {
 80019ea:	7aba      	ldrb	r2, [r7, #10]
 80019ec:	793b      	ldrb	r3, [r7, #4]
 80019ee:	4053      	eors	r3, r2
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	797b      	ldrb	r3, [r7, #5]
 80019f4:	4013      	ands	r3, r2
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00c      	beq.n	8001a16 <wait_sts+0x66>
			break;
		}
		ercd = osEventTimeout;
 80019fc:	2340      	movs	r3, #64	@ 0x40
 80019fe:	60fb      	str	r3, [r7, #12]
		osDelay(1);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f005 ff26 	bl	8007852 <osDelay>
 8001a06:	e000      	b.n	8001a0a <wait_sts+0x5a>
			continue;
 8001a08:	bf00      	nop
	while (timeout--) {
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	1e5a      	subs	r2, r3, #1
 8001a0e:	72fa      	strb	r2, [r7, #11]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1df      	bne.n	80019d4 <wait_sts+0x24>
 8001a14:	e000      	b.n	8001a18 <wait_sts+0x68>
			break;
 8001a16:	bf00      	nop
	}
	
	return ercd;
 8001a18:	68fb      	ldr	r3, [r7, #12]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}

08001a22 <set_txb>:

// TXB設定 (*)TXBnCTRL以外
static osStatus set_txb(MCP2515_DEV dev, uint32_t mbox_id, CAN_COMMON_FRAME_TYPE frame_type, uint32_t can_id, uint8_t *data, uint8_t size)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b08a      	sub	sp, #40	@ 0x28
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	4613      	mov	r3, r2
 8001a32:	73bb      	strb	r3, [r7, #14]
	uint8_t send_data[15];
	uint8_t base_addr;
	osStatus ret = -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t i;
	
	// ベースアドレス取得
	base_addr = MCP2515_REG_TXBSIDH(mbox_id);
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	3303      	adds	r3, #3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	3301      	adds	r3, #1
 8001a46:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	
	// ===データ設定===
	// 命令
	send_data[0] = MCP2515_INST_WRITE_REG;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	743b      	strb	r3, [r7, #16]
	// アドレス
	send_data[1] = base_addr;
 8001a4e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a52:	747b      	strb	r3, [r7, #17]
	// ID
	if (frame_type == CAN_COMMON_FRAME_TYPE_STANDARD) {
 8001a54:	7bbb      	ldrb	r3, [r7, #14]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d14a      	bne.n	8001af0 <set_txb+0xce>
		send_data[2] = SET_SIDH(frame_type, can_id);	// SIDH
 8001a5a:	7bbb      	ldrb	r3, [r7, #14]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d103      	bne.n	8001a68 <set_txb+0x46>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	e007      	b.n	8001a78 <set_txb+0x56>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	0d5b      	lsrs	r3, r3, #21
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	74bb      	strb	r3, [r7, #18]
		send_data[3] = SET_SIDL(frame_type, can_id);	// SIDL
 8001a7a:	7bbb      	ldrb	r3, [r7, #14]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d104      	bne.n	8001a8a <set_txb+0x68>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	015b      	lsls	r3, r3, #5
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	e015      	b.n	8001ab6 <set_txb+0x94>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0c9b      	lsrs	r3, r3, #18
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf14      	ite	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	2300      	moveq	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	b25a      	sxtb	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	f043 0308 	orr.w	r3, r3, #8
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	74fb      	strb	r3, [r7, #19]
		send_data[4] = SET_EID8(frame_type, can_id);	// EID8
 8001ab8:	7bbb      	ldrb	r3, [r7, #14]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d008      	beq.n	8001ad0 <set_txb+0xae>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bf14      	ite	ne
 8001ac6:	2301      	movne	r3, #1
 8001ac8:	2300      	moveq	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e000      	b.n	8001ad2 <set_txb+0xb0>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	753b      	strb	r3, [r7, #20]
		send_data[5] = SET_EID0(frame_type, can_id);	// EID0
 8001ad4:	7bbb      	ldrb	r3, [r7, #14]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <set_txb+0xc8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf14      	ite	ne
 8001ae0:	2301      	movne	r3, #1
 8001ae2:	2300      	moveq	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	e000      	b.n	8001aec <set_txb+0xca>
 8001aea:	2300      	movs	r3, #0
 8001aec:	757b      	strb	r3, [r7, #21]
 8001aee:	e002      	b.n	8001af6 <set_txb+0xd4>
		
	} else if (frame_type == CAN_COMMON_FRAME_TYPE_EXTENDED) {
 8001af0:	7bbb      	ldrb	r3, [r7, #14]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d12a      	bne.n	8001b4c <set_txb+0x12a>
	} else {
		goto SET_TXB_EXIT;
		
	}
	// DLC
	send_data[6] = TXBDLC_DLC(size);
 8001af6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	75bb      	strb	r3, [r7, #22]
	// データ設定
	for (i = 0; i < size; i++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001b08:	e011      	b.n	8001b2e <set_txb+0x10c>
		send_data[7+i] = *data++;
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8001b10:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b14:	3207      	adds	r2, #7
 8001b16:	7819      	ldrb	r1, [r3, #0]
 8001b18:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 8001b1c:	443b      	add	r3, r7
 8001b1e:	460a      	mov	r2, r1
 8001b20:	f803 2c18 	strb.w	r2, [r3, #-24]
	for (i = 0; i < size; i++) {
 8001b24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001b2e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b32:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3e7      	bcc.n	8001b0a <set_txb+0xe8>
	}
	
	// SPI送信
	ret = can_spi_send_rcv(dev, send_data, NULL, sizeof(send_data));
 8001b3a:	f107 0110 	add.w	r1, r7, #16
 8001b3e:	7bf8      	ldrb	r0, [r7, #15]
 8001b40:	230f      	movs	r3, #15
 8001b42:	2200      	movs	r2, #0
 8001b44:	f7ff fe48 	bl	80017d8 <can_spi_send_rcv>
 8001b48:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b4a:	e000      	b.n	8001b4e <set_txb+0x12c>
		goto SET_TXB_EXIT;
 8001b4c:	bf00      	nop
	
SET_TXB_EXIT:
	return ret;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3728      	adds	r7, #40	@ 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <set_mask>:

// マスク設定
static osStatus set_mask(MCP2515_DEV dev, uint32_t mbox_id, uint32_t frame_type, uint32_t mask)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	4603      	mov	r3, r0
 8001b66:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[6];
	osStatus ret = -1;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	61fb      	str	r3, [r7, #28]
	
	// ===マスク設定===
	// 命令
	send_data[0] = MCP2515_INST_WRITE_REG;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	753b      	strb	r3, [r7, #20]
	// アドレス
	send_data[1] = MCP2515_REG_RXMS1DH(mbox_id);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	3308      	adds	r3, #8
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	757b      	strb	r3, [r7, #21]
	// ID
	send_data[2] = SET_SIDH(frame_type, mask);	// SIDH
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d103      	bne.n	8001b8c <set_mask+0x34>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	08db      	lsrs	r3, r3, #3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	e007      	b.n	8001b9c <set_mask+0x44>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	0d5b      	lsrs	r3, r3, #21
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf14      	ite	ne
 8001b94:	2301      	movne	r3, #1
 8001b96:	2300      	moveq	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	75bb      	strb	r3, [r7, #22]
	send_data[3] = SET_SIDL(frame_type, mask);	// SIDL
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d104      	bne.n	8001bae <set_mask+0x56>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	015b      	lsls	r3, r3, #5
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	e015      	b.n	8001bda <set_mask+0x82>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	0c9b      	lsrs	r3, r3, #18
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf14      	ite	ne
 8001bb6:	2301      	movne	r3, #1
 8001bb8:	2300      	moveq	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	b25a      	sxtb	r2, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	0c1b      	lsrs	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	75fb      	strb	r3, [r7, #23]
	send_data[4] = SET_EID8(frame_type, mask);	// EID8
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d008      	beq.n	8001bf4 <set_mask+0x9c>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e000      	b.n	8001bf6 <set_mask+0x9e>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	763b      	strb	r3, [r7, #24]
	send_data[5] = SET_EID0(frame_type, mask);	// EID0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <set_mask+0xb6>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	e000      	b.n	8001c10 <set_mask+0xb8>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	767b      	strb	r3, [r7, #25]
	
	// SPI送信
	if ((ret = can_spi_send_rcv(dev, send_data, NULL, sizeof(send_data))) != osOK) {
 8001c12:	f107 0114 	add.w	r1, r7, #20
 8001c16:	7bf8      	ldrb	r0, [r7, #15]
 8001c18:	2306      	movs	r3, #6
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f7ff fddc 	bl	80017d8 <can_spi_send_rcv>
 8001c20:	61f8      	str	r0, [r7, #28]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	2b00      	cmp	r3, #0
		goto EXIT;
	}
	
	//console_printf("set_mask success\n");
	
EXIT:
 8001c26:	bf00      	nop
	return ret;
 8001c28:	69fb      	ldr	r3, [r7, #28]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3720      	adds	r7, #32
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <set_filter_0>:

// フィルタ設定
static osStatus set_filter_0(MCP2515_DEV dev, uint32_t frame_type, uint32_t *p_filter)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b08a      	sub	sp, #40	@ 0x28
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[10];
	osStatus ret = -1;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
 8001c44:	623b      	str	r3, [r7, #32]
	uint8_t ofst;
	uint8_t size = 2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	
	// ===フィルタ設定===
	// 命令
	send_data[0] = MCP2515_INST_WRITE_REG;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	753b      	strb	r3, [r7, #20]
	// アドレス
	send_data[1] = MCP2515_REG_RXFS1DH(RXF_FILTER_0);
 8001c50:	2300      	movs	r3, #0
 8001c52:	757b      	strb	r3, [r7, #21]
	// フィルタ設定
	for (ofst = 0; ofst < RXB0_FILTER_NUM; ofst++, p_filter++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001c5a:	e07c      	b.n	8001d56 <set_filter_0+0x124>
		// 最後のフィルタ
		if (p_filter == NULL) {
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d07f      	beq.n	8001d62 <set_filter_0+0x130>
			break;
		}
		// フィルタ設定
		send_data[2 + (ofst * 4) + 0] = SET_SIDH(frame_type, *p_filter);	// SIDH
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d104      	bne.n	8001c72 <set_filter_0+0x40>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	08db      	lsrs	r3, r3, #3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	e008      	b.n	8001c84 <set_filter_0+0x52>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0d5b      	lsrs	r3, r3, #21
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf14      	ite	ne
 8001c7c:	2301      	movne	r3, #1
 8001c7e:	2300      	moveq	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	3202      	adds	r2, #2
 8001c8c:	3228      	adds	r2, #40	@ 0x28
 8001c8e:	443a      	add	r2, r7
 8001c90:	f802 3c14 	strb.w	r3, [r2, #-20]
		send_data[2 + (ofst * 4) + 1] = SET_SIDL(frame_type, *p_filter);	// SIDL
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <set_filter_0+0x74>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	015b      	lsls	r3, r3, #5
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	e017      	b.n	8001cd6 <set_filter_0+0xa4>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0c9b      	lsrs	r3, r3, #18
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	b25a      	sxtb	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	bf14      	ite	ne
 8001cc2:	2301      	movne	r3, #1
 8001cc4:	2300      	moveq	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b25b      	sxtb	r3, r3
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	3203      	adds	r2, #3
 8001cde:	3228      	adds	r2, #40	@ 0x28
 8001ce0:	443a      	add	r2, r7
 8001ce2:	f802 3c14 	strb.w	r3, [r2, #-20]
		send_data[2 + (ofst * 4) + 2] = SET_EID8(frame_type, *p_filter);	// EID8
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d009      	beq.n	8001d00 <set_filter_0+0xce>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf14      	ite	ne
 8001cf6:	2301      	movne	r3, #1
 8001cf8:	2300      	moveq	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	e000      	b.n	8001d02 <set_filter_0+0xd0>
 8001d00:	2200      	movs	r2, #0
 8001d02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d06:	3301      	adds	r3, #1
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	3328      	adds	r3, #40	@ 0x28
 8001d0c:	443b      	add	r3, r7
 8001d0e:	f803 2c14 	strb.w	r2, [r3, #-20]
		send_data[2 + (ofst * 4) + 3] = SET_EID0(frame_type, *p_filter);	// EID0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <set_filter_0+0xf8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	e000      	b.n	8001d2c <set_filter_0+0xfa>
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	3305      	adds	r3, #5
 8001d34:	3328      	adds	r3, #40	@ 0x28
 8001d36:	443b      	add	r3, r7
 8001d38:	f803 2c14 	strb.w	r2, [r3, #-20]
		size += 4;
 8001d3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d40:	3304      	adds	r3, #4
 8001d42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	for (ofst = 0; ofst < RXB0_FILTER_NUM; ofst++, p_filter++) {
 8001d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3304      	adds	r3, #4
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	f67f af7e 	bls.w	8001c5c <set_filter_0+0x2a>
 8001d60:	e000      	b.n	8001d64 <set_filter_0+0x132>
			break;
 8001d62:	bf00      	nop
	}
	
	// SPI送信
	if ((ret = can_spi_send_rcv(dev, send_data, NULL, size)) != osOK) {
 8001d64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d68:	f107 0114 	add.w	r1, r7, #20
 8001d6c:	7bf8      	ldrb	r0, [r7, #15]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f7ff fd32 	bl	80017d8 <can_spi_send_rcv>
 8001d74:	6238      	str	r0, [r7, #32]
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	2b00      	cmp	r3, #0
		goto EXIT;
	}
	
	//console_printf("set_filter_0 success\n");
	
EXIT:
 8001d7a:	bf00      	nop
	return ret;
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3728      	adds	r7, #40	@ 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <set_filter_1>:

// フィルタ設定
static osStatus set_filter_1(MCP2515_DEV dev, uint32_t frame_type, uint32_t *p_filter)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b08a      	sub	sp, #40	@ 0x28
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[14];
	osStatus ret = -1;
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ofst;
	uint8_t size = 2;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	// ===フィルタ設定===
	// 命令
	send_data[0] = MCP2515_INST_WRITE_REG;
 8001da0:	2302      	movs	r3, #2
 8001da2:	753b      	strb	r3, [r7, #20]
	// アドレス
	send_data[1] = MCP2515_REG_RXFS1DH(RXF_FILTER_2);
 8001da4:	2308      	movs	r3, #8
 8001da6:	757b      	strb	r3, [r7, #21]
	// フィルタ2設定
	send_data[2] = SET_SIDH(frame_type, *p_filter);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d104      	bne.n	8001db8 <set_filter_1+0x32>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	08db      	lsrs	r3, r3, #3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	e008      	b.n	8001dca <set_filter_1+0x44>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0d5b      	lsrs	r3, r3, #21
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	bf14      	ite	ne
 8001dc2:	2301      	movne	r3, #1
 8001dc4:	2300      	moveq	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	75bb      	strb	r3, [r7, #22]
	send_data[3] = SET_SIDL(frame_type, *p_filter);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <set_filter_1+0x58>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	015b      	lsls	r3, r3, #5
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	e017      	b.n	8001e0e <set_filter_1+0x88>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0c9b      	lsrs	r3, r3, #18
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	b25a      	sxtb	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf14      	ite	ne
 8001dfa:	2301      	movne	r3, #1
 8001dfc:	2300      	moveq	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	4313      	orrs	r3, r2
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	f043 0308 	orr.w	r3, r3, #8
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	75fb      	strb	r3, [r7, #23]
	send_data[4] = SET_EID8(frame_type, *p_filter);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <set_filter_1+0xa4>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf14      	ite	ne
 8001e20:	2301      	movne	r3, #1
 8001e22:	2300      	moveq	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	e000      	b.n	8001e2c <set_filter_1+0xa6>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	763b      	strb	r3, [r7, #24]
	send_data[5] = SET_EID0(frame_type, *p_filter);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <set_filter_1+0xc0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	e000      	b.n	8001e48 <set_filter_1+0xc2>
 8001e46:	2300      	movs	r3, #0
 8001e48:	767b      	strb	r3, [r7, #25]
	// フィルタ2の設定をいったん送信 (*)フィルタ2とフィルタ3はアドレスが離れているため、連続で送信できない
	if ((ret = can_spi_send_rcv(dev, send_data, NULL, 6)) != osOK) {
 8001e4a:	f107 0114 	add.w	r1, r7, #20
 8001e4e:	7bf8      	ldrb	r0, [r7, #15]
 8001e50:	2306      	movs	r3, #6
 8001e52:	2200      	movs	r2, #0
 8001e54:	f7ff fcc0 	bl	80017d8 <can_spi_send_rcv>
 8001e58:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f040 8099 	bne.w	8001f94 <set_filter_1+0x20e>
		goto EXIT;
	}

	// フィルタ2以降の設定
	// アドレス
	send_data[1] = MCP2515_REG_RXFS1DH(RXF_FILTER_3);
 8001e62:	2310      	movs	r3, #16
 8001e64:	757b      	strb	r3, [r7, #21]
	// フィルタを先に進めとく
	p_filter++;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	607b      	str	r3, [r7, #4]
	// フィルタ設定
	for (ofst = 0; ofst < (RXB1_FILTER_NUM - 1); ofst++, p_filter++) {
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e72:	e07c      	b.n	8001f6e <set_filter_1+0x1e8>
		// 最後のフィルタ
		if (p_filter == NULL) {
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d07f      	beq.n	8001f7a <set_filter_1+0x1f4>
			break;
		}
		// フィルタ設定
		send_data[2 + (ofst * 4) + 0] = SET_SIDH(frame_type, *p_filter);	// SIDH
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d104      	bne.n	8001e8a <set_filter_1+0x104>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	e008      	b.n	8001e9c <set_filter_1+0x116>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	0d5b      	lsrs	r3, r3, #21
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf14      	ite	ne
 8001e94:	2301      	movne	r3, #1
 8001e96:	2300      	moveq	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	3202      	adds	r2, #2
 8001ea4:	3228      	adds	r2, #40	@ 0x28
 8001ea6:	443a      	add	r2, r7
 8001ea8:	f802 3c14 	strb.w	r3, [r2, #-20]
		send_data[2 + (ofst * 4) + 1] = SET_SIDL(frame_type, *p_filter);	// SIDL
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <set_filter_1+0x138>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	015b      	lsls	r3, r3, #5
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	e017      	b.n	8001eee <set_filter_1+0x168>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0c9b      	lsrs	r3, r3, #18
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf14      	ite	ne
 8001ec8:	2301      	movne	r3, #1
 8001eca:	2300      	moveq	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	b25a      	sxtb	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	2300      	moveq	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	b25b      	sxtb	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	f043 0308 	orr.w	r3, r3, #8
 8001eea:	b25b      	sxtb	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	3203      	adds	r2, #3
 8001ef6:	3228      	adds	r2, #40	@ 0x28
 8001ef8:	443a      	add	r2, r7
 8001efa:	f802 3c14 	strb.w	r3, [r2, #-20]
		send_data[2 + (ofst * 4) + 2] = SET_EID8(frame_type, *p_filter);	// EID8
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d009      	beq.n	8001f18 <set_filter_1+0x192>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf14      	ite	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	2300      	moveq	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	e000      	b.n	8001f1a <set_filter_1+0x194>
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f1e:	3301      	adds	r3, #1
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	3328      	adds	r3, #40	@ 0x28
 8001f24:	443b      	add	r3, r7
 8001f26:	f803 2c14 	strb.w	r2, [r3, #-20]
		send_data[2 + (ofst * 4) + 3] = SET_EID0(frame_type, *p_filter);	// EID0
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <set_filter_1+0x1bc>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf14      	ite	ne
 8001f38:	2301      	movne	r3, #1
 8001f3a:	2300      	moveq	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	e000      	b.n	8001f44 <set_filter_1+0x1be>
 8001f42:	2200      	movs	r2, #0
 8001f44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	3305      	adds	r3, #5
 8001f4c:	3328      	adds	r3, #40	@ 0x28
 8001f4e:	443b      	add	r3, r7
 8001f50:	f803 2c14 	strb.w	r2, [r3, #-20]
		size += 4;
 8001f54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001f58:	3304      	adds	r3, #4
 8001f5a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	for (ofst = 0; ofst < (RXB1_FILTER_NUM - 1); ofst++, p_filter++) {
 8001f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f62:	3301      	adds	r3, #1
 8001f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	f67f af7e 	bls.w	8001e74 <set_filter_1+0xee>
 8001f78:	e000      	b.n	8001f7c <set_filter_1+0x1f6>
			break;
 8001f7a:	bf00      	nop

	}

	// SPI送信
	if ((ret = can_spi_send_rcv(dev, send_data, NULL, size)) != osOK) {
 8001f7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001f80:	f107 0114 	add.w	r1, r7, #20
 8001f84:	7bf8      	ldrb	r0, [r7, #15]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f7ff fc26 	bl	80017d8 <can_spi_send_rcv>
 8001f8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	2b00      	cmp	r3, #0
		goto EXIT;
	}

	//console_printf("set_filter_1 success\n");

EXIT:
 8001f92:	e000      	b.n	8001f96 <set_filter_1+0x210>
		goto EXIT;
 8001f94:	bf00      	nop
	return ret;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3728      	adds	r7, #40	@ 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <set_rx_info>:

// 受信CAN設定
static osStatus set_rx_info(MCP2515_DEV dev, uint32_t mbox_id, uint32_t frame_type, uint32_t mask, uint32_t *p_filter)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
	osStatus ret;
	
	// マスク設定
	if((ret = set_mask(dev, mbox_id, frame_type, mask)) !=  osOK) {
 8001fb0:	7bf8      	ldrb	r0, [r7, #15]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	f7ff fdce 	bl	8001b58 <set_mask>
 8001fbc:	6178      	str	r0, [r7, #20]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10b      	bne.n	8001fdc <set_rx_info+0x3c>
		goto EXIT;
	}
	
	// フィルタ設定
	if((ret = set_filter_tbl[mbox_id](dev, frame_type, p_filter)) !=  osOK) {
 8001fc4:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <set_rx_info+0x48>)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fcc:	7bf8      	ldrb	r0, [r7, #15]
 8001fce:	6a3a      	ldr	r2, [r7, #32]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	6178      	str	r0, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b00      	cmp	r3, #0
		goto EXIT;
	}
	
	//console_printf("set_rx_info success\n");
	
EXIT:
 8001fda:	e000      	b.n	8001fde <set_rx_info+0x3e>
		goto EXIT;
 8001fdc:	bf00      	nop
	return ret;
 8001fde:	697b      	ldr	r3, [r7, #20]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	0800b804 	.word	0x0800b804

08001fec <get_free_tx_buf>:

// フリーな送信バッファを取得
static osStatus get_free_tx_buf(MCP2515_DEV dev, uint32_t *mbx_id)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	uint8_t ctrl;
	osStatus ercd;
	
	for (i = 0; i < MCP2515_DEV_TX_MBX_ID_MAX; i++) {
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	e01b      	b.n	8002036 <get_free_tx_buf+0x4a>
		// CTRLレジスタ読み込み
		ercd = read_reg(dev, MCP2515_REG_TXBCTRL(i), &ctrl);
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3303      	adds	r3, #3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	b2d9      	uxtb	r1, r3
 8002008:	f107 020f 	add.w	r2, r7, #15
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fc1d 	bl	800184e <read_reg>
 8002014:	6138      	str	r0, [r7, #16]
		// TXREQがクリアされていれば空いている
		if ((ercd == osOK) && ((ctrl & TXB_TXREQ) == 0)) {
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d109      	bne.n	8002030 <get_free_tx_buf+0x44>
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d104      	bne.n	8002030 <get_free_tx_buf+0x44>
			*mbx_id = i;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	601a      	str	r2, [r3, #0]
			return osOK;
 800202c:	2300      	movs	r3, #0
 800202e:	e006      	b.n	800203e <get_free_tx_buf+0x52>
	for (i = 0; i < MCP2515_DEV_TX_MBX_ID_MAX; i++) {
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3301      	adds	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d9e0      	bls.n	8001ffe <get_free_tx_buf+0x12>
		}
	}
	
	return osErrorResource;  // 全て使用中
 800203c:	2381      	movs	r3, #129	@ 0x81
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <tx_abort>:

// 送信アボート
static osStatus tx_abort(MCP2515_DEV dev)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b088      	sub	sp, #32
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]
	osStatus ercd;
	uint32_t i;
	uint32_t retry_cnt = 10;
 8002050:	230a      	movs	r3, #10
 8002052:	617b      	str	r3, [r7, #20]
	uint32_t stop_bmp;
	uint8_t ctrl = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]
	
	// アボート要求
	ercd = modify_bit(dev, MCP2515_REG_CANCTRL, CANCTRL_ABAT, CANCTRL_ABAT);
 8002058:	79f8      	ldrb	r0, [r7, #7]
 800205a:	2310      	movs	r3, #16
 800205c:	2210      	movs	r2, #16
 800205e:	210f      	movs	r1, #15
 8002060:	f7ff fc30 	bl	80018c4 <modify_bit>
 8002064:	61f8      	str	r0, [r7, #28]
	if (ercd != osOK) {
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d138      	bne.n	80020de <tx_abort+0x98>
		goto EXIT;
	}
	
	// アボート待ち
	while (retry_cnt--) {
 800206c:	e031      	b.n	80020d2 <tx_abort+0x8c>
		stop_bmp = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
		for (i = 0; i < MCP2515_DEV_TX_MBX_ID_MAX; i++) {
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	e01d      	b.n	80020b4 <tx_abort+0x6e>
			// CTRLレジスタ読み込み
			ercd = read_reg(dev, MCP2515_REG_TXBCTRL(i), &ctrl);
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	3303      	adds	r3, #3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	b2d9      	uxtb	r1, r3
 8002082:	f107 020f 	add.w	r2, r7, #15
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fbe0 	bl	800184e <read_reg>
 800208e:	61f8      	str	r0, [r7, #28]
			// spiエラー
			if (ercd != osOK) {
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d112      	bne.n	80020bc <tx_abort+0x76>
				break;
				
			// 送信要求がクリアされていない
			} else if ((ctrl & TXB_TXREQ) != 0) {
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10f      	bne.n	80020c0 <tx_abort+0x7a>
				break;
				
			// クリアされた
			} else {
				stop_bmp |= (1UL << i);
 80020a0:	2201      	movs	r2, #1
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
		for (i = 0; i < MCP2515_DEV_TX_MBX_ID_MAX; i++) {
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	3301      	adds	r3, #1
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d9de      	bls.n	8002078 <tx_abort+0x32>
 80020ba:	e002      	b.n	80020c2 <tx_abort+0x7c>
				break;
 80020bc:	bf00      	nop
 80020be:	e000      	b.n	80020c2 <tx_abort+0x7c>
				break;
 80020c0:	bf00      	nop
				
			}
		}
		// 全部アボートできた
		if (stop_bmp == ((1UL << MCP2515_DEV_TX_MBX_ID_MAX) - 1)) {
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b07      	cmp	r3, #7
 80020c6:	d102      	bne.n	80020ce <tx_abort+0x88>
			ercd = osOK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
			break;
 80020cc:	e008      	b.n	80020e0 <tx_abort+0x9a>
		}
		ercd = osEventTimeout;
 80020ce:	2340      	movs	r3, #64	@ 0x40
 80020d0:	61fb      	str	r3, [r7, #28]
	while (retry_cnt--) {
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	1e5a      	subs	r2, r3, #1
 80020d6:	617a      	str	r2, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1c8      	bne.n	800206e <tx_abort+0x28>
	}
	
EXIT:
 80020dc:	e000      	b.n	80020e0 <tx_abort+0x9a>
		goto EXIT;
 80020de:	bf00      	nop
	return ercd;
 80020e0:	69fb      	ldr	r3, [r7, #28]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <check_rx_data>:

// 受信データがあるかどうかのチェック
static uint8_t check_rx_data(MCP2515_DEV dev, uint32_t mbx_id)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	6039      	str	r1, [r7, #0]
 80020f4:	71fb      	strb	r3, [r7, #7]
	osStatus ercd;
	uint8_t status;
	uint8_t ret = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
	
	// 受信状態取得
	ercd = read_rxstatus(dev, &status);
 80020fa:	f107 020f 	add.w	r2, r7, #15
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fc39 	bl	800197a <read_rxstatus>
 8002108:	6138      	str	r0, [r7, #16]
	if (ercd != osOK) {
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <check_rx_data+0x2c>
		ret = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	75fb      	strb	r3, [r7, #23]
		goto EXIT;
 8002114:	e010      	b.n	8002138 <check_rx_data+0x4e>
	}
	
	// RXB0、RXB1の受信状態を取得(*)6bit右シフトは状態をLSBに合わせるため
	status = ((status & (RXB0_DATA_RECEIVED | RXB1_DATA_RECEIVED)) >> 6);
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	b2db      	uxtb	r3, r3
 800211c:	73fb      	strb	r3, [r7, #15]
	
	// 受信した！
	if (status & ((uint8_t)1 << mbx_id)) {
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	461a      	mov	r2, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	fa42 f303 	asr.w	r3, r2, r3
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <check_rx_data+0x4c>
		ret = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	75fb      	strb	r3, [r7, #23]
 8002134:	e000      	b.n	8002138 <check_rx_data+0x4e>
	}
	
EXIT:
 8002136:	bf00      	nop
	return ret;
 8002138:	7dfb      	ldrb	r3, [r7, #23]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <clr_rx_flag>:

static osStatus clr_rx_flag(MCP2515_DEV dev, uint32_t mbx_id)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	6039      	str	r1, [r7, #0]
 800214c:	71fb      	strb	r3, [r7, #7]
	osStatus ercd;
	uint8_t data;
	uint8_t clr_sts = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	72fb      	strb	r3, [r7, #11]
	
	// フラグ状態取得
	ercd = read_reg(dev, MCP2515_REG_CANINTF, &data);
 8002152:	f107 020a 	add.w	r2, r7, #10
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	212c      	movs	r1, #44	@ 0x2c
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fb77 	bl	800184e <read_reg>
 8002160:	60f8      	str	r0, [r7, #12]
	if (ercd != osOK) {
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d115      	bne.n	8002194 <clr_rx_flag+0x52>
		goto EXIT;
	}
	
	// 受信フラグのクリア
	clr_sts = data & ~((uint8_t)1 << mbx_id);
 8002168:	2201      	movs	r2, #1
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	b25b      	sxtb	r3, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	b25a      	sxtb	r2, r3
 8002176:	7abb      	ldrb	r3, [r7, #10]
 8002178:	b25b      	sxtb	r3, r3
 800217a:	4013      	ands	r3, r2
 800217c:	b25b      	sxtb	r3, r3
 800217e:	72fb      	strb	r3, [r7, #11]

	// データセット
	ercd = write_reg(dev, MCP2515_REG_CANINTF, clr_sts);
 8002180:	7afa      	ldrb	r2, [r7, #11]
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	212c      	movs	r1, #44	@ 0x2c
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fb80 	bl	800188c <write_reg>
 800218c:	60f8      	str	r0, [r7, #12]
	if (ercd != osOK) {
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b00      	cmp	r3, #0
		goto EXIT;
	}
	
EXIT:
 8002192:	e000      	b.n	8002196 <clr_rx_flag+0x54>
		goto EXIT;
 8002194:	bf00      	nop
	return ercd;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <get_rx_data>:

// 受信データを取得
static osStatus get_rx_data(MCP2515_DEV dev, uint32_t mbox_id, uint8_t *p_is_eid, uint32_t *p_can_id, uint8_t *p_data, uint8_t *p_size)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	@ 0x38
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]
	osStatus ret;
	uint8_t i;
	
	// ===データ設定===
	// 命令
	send_data[0] = MCP2515_INST_READ_REG;
 80021b0:	2303      	movs	r3, #3
 80021b2:	743b      	strb	r3, [r7, #16]
	// アドレス
	send_data[1] = MCP2515_REG_RXBCTRL(mbox_id);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3306      	adds	r3, #6
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	747b      	strb	r3, [r7, #17]
	
	// SPI送信
	ret = can_spi_send_rcv(dev, send_data, recv_data, sizeof(send_data));
 80021c0:	f107 0220 	add.w	r2, r7, #32
 80021c4:	f107 0110 	add.w	r1, r7, #16
 80021c8:	7bf8      	ldrb	r0, [r7, #15]
 80021ca:	2310      	movs	r3, #16
 80021cc:	f7ff fb04 	bl	80017d8 <can_spi_send_rcv>
 80021d0:	6338      	str	r0, [r7, #48]	@ 0x30
	if (ret != osOK) {
 80021d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d150      	bne.n	800227a <get_rx_data+0xda>
	// recv_data[13] : RXBnD5
	// recv_data[14] : RXBnD6
	// recv_data[15] : RXBnD7
	
	// 拡張ID
	if ((recv_data[4] & RXBSIDL_IDE) != 0) {
 80021d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01c      	beq.n	800221e <get_rx_data+0x7e>
		*p_can_id = (GET_SID_10_3(recv_data[3]) << 20) | (GET_SID_2_0(recv_data[4]) << 17) |
 80021e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021e8:	051a      	lsls	r2, r3, #20
 80021ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	045b      	lsls	r3, r3, #17
 80021f4:	431a      	orrs	r2, r3
				   (GET_EID_17_16(recv_data[4]) << 16) | (GET_EID_15_8(recv_data[5]) << 8) |
 80021f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
		*p_can_id = (GET_SID_10_3(recv_data[3]) << 20) | (GET_SID_2_0(recv_data[4]) << 17) |
 8002200:	431a      	orrs	r2, r3
				   (GET_EID_17_16(recv_data[4]) << 16) | (GET_EID_15_8(recv_data[5]) << 8) |
 8002202:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	4313      	orrs	r3, r2
				   (GET_EID_7_0(recv_data[6]) << 0);
 800220a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
				   (GET_EID_17_16(recv_data[4]) << 16) | (GET_EID_15_8(recv_data[5]) << 8) |
 800220e:	4313      	orrs	r3, r2
 8002210:	461a      	mov	r2, r3
		*p_can_id = (GET_SID_10_3(recv_data[3]) << 20) | (GET_SID_2_0(recv_data[4]) << 17) |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	601a      	str	r2, [r3, #0]
		*p_is_eid = 1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e00a      	b.n	8002234 <get_rx_data+0x94>
		
	// 標準ID
	} else {
		*p_can_id = (GET_SID_10_3(recv_data[3]) << 3) | (GET_SID_2_0(recv_data[4]));
 800221e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002228:	0952      	lsrs	r2, r2, #5
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	4313      	orrs	r3, r2
 800222e:	461a      	mov	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	601a      	str	r2, [r3, #0]
		
	}

	// dlc取得
	*p_size = GET_DLC(recv_data[7]);
 8002234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	b2da      	uxtb	r2, r3
 800223e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002240:	701a      	strb	r2, [r3, #0]
	
	// データ取得
	for (i = 0; i < *p_size; i++) {
 8002242:	2300      	movs	r3, #0
 8002244:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002248:	e010      	b.n	800226c <get_rx_data+0xcc>
		*(p_data++) = recv_data[8+i];
 800224a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800224e:	f103 0208 	add.w	r2, r3, #8
 8002252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002254:	1c59      	adds	r1, r3, #1
 8002256:	6439      	str	r1, [r7, #64]	@ 0x40
 8002258:	3238      	adds	r2, #56	@ 0x38
 800225a:	443a      	add	r2, r7
 800225c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002260:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < *p_size; i++) {
 8002262:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002266:	3301      	adds	r3, #1
 8002268:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800226c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002274:	429a      	cmp	r2, r3
 8002276:	d3e8      	bcc.n	800224a <get_rx_data+0xaa>
	}
	
EXIT:
 8002278:	e000      	b.n	800227c <get_rx_data+0xdc>
		goto EXIT;
 800227a:	bf00      	nop
	return ret;
 800227c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
	
}
 800227e:	4618      	mov	r0, r3
 8002280:	3738      	adds	r7, #56	@ 0x38
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <check_wkup>:

// ウェイクアップ要因チェック
static osStatus check_wkup(MCP2515_DEV dev)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
	osStatus ercd;
	uint8_t data;
	
	// フラグ状態取得
	ercd = read_reg(dev, MCP2515_REG_CANINTF, &data);
 8002292:	f107 020b 	add.w	r2, r7, #11
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	212c      	movs	r1, #44	@ 0x2c
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fad7 	bl	800184e <read_reg>
 80022a0:	60f8      	str	r0, [r7, #12]
	if (ercd != osOK) {
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <check_wkup+0x44>
		goto EXIT;
	}
	
	// チェック
	if ((data & CANINTF_WAKIF) != 0) {
 80022a8:	7afb      	ldrb	r3, [r7, #11]
 80022aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00e      	beq.n	80022d0 <check_wkup+0x48>
		console_printf("wakeup!\n");
 80022b2:	480a      	ldr	r0, [pc, #40]	@ (80022dc <check_wkup+0x54>)
 80022b4:	f7ff f83e 	bl	8001334 <console_printf>
		// クリア
		ercd = modify_bit(dev, MCP2515_REG_CANINTF, CANINTF_WAKIF, ~CANINTF_WAKIF);
 80022b8:	79f8      	ldrb	r0, [r7, #7]
 80022ba:	23bf      	movs	r3, #191	@ 0xbf
 80022bc:	2240      	movs	r2, #64	@ 0x40
 80022be:	212c      	movs	r1, #44	@ 0x2c
 80022c0:	f7ff fb00 	bl	80018c4 <modify_bit>
 80022c4:	60f8      	str	r0, [r7, #12]
		if (ercd != osOK) {
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
			goto EXIT;
		}
	}
	
EXIT:
 80022ca:	e001      	b.n	80022d0 <check_wkup+0x48>
		goto EXIT;
 80022cc:	bf00      	nop
 80022ce:	e000      	b.n	80022d2 <check_wkup+0x4a>
EXIT:
 80022d0:	bf00      	nop
	return ercd;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	0800b300 	.word	0x0800b300

080022e0 <mcpl2515_set_bitrate>:

// MCP2515ビットレート設定
static osStatus mcpl2515_set_bitrate(MCP2515_DEV dev, uint32_t bit_rate)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	@ 0x30
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	73fb      	strb	r3, [r7, #15]
	uint32_t actual_bit_rate;	// 実際に設定されるビットレート
	uint8_t all_tq_num;
	uint8_t sync, prop_seg, phase_seg1, phase_seg2;
	uint8_t cur_sampl;
	uint8_t i;
	osStatus ercd = osOK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	
	// TQを算出
	brp = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	tq = ((float)(2 * (brp + 1)) / (float)MCP2515_CLOCK_INPUT);
 80022f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022fa:	3301      	adds	r3, #1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002306:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002468 <mcpl2515_set_bitrate+0x188>
 800230a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230e:	edc7 7a08 	vstr	s15, [r7, #32]
	
	// ビットタイムを算出（してビットレートにするためには全部で何TQかを算出）
	cps = ((float)1 / (float)bit_rate);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	ee07 3a90 	vmov	s15, r3
 8002318:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800231c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002324:	edc7 7a07 	vstr	s15, [r7, #28]
	all_tq_num = cps / tq;
 8002328:	edd7 6a07 	vldr	s13, [r7, #28]
 800232c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002338:	edc7 7a01 	vstr	s15, [r7, #4]
 800233c:	793b      	ldrb	r3, [r7, #4]
 800233e:	76fb      	strb	r3, [r7, #27]
	//console_printf("all_tq_num:%d\n", all_tq_num);
	
	// その他設定
	sync = 1;
 8002340:	2301      	movs	r3, #1
 8002342:	76bb      	strb	r3, [r7, #26]
	prop_seg = 6; // とりあえず2TQ固定
 8002344:	2306      	movs	r3, #6
 8002346:	767b      	strb	r3, [r7, #25]
	for (i = 0; i < all_tq_num; i++) {
 8002348:	2300      	movs	r3, #0
 800234a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800234e:	e026      	b.n	800239e <mcpl2515_set_bitrate+0xbe>
		phase_seg1 = i;
 8002350:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002354:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		// 現在のサンプリングポイントを算出
		cur_sampl = (uint8_t)(((float)(sync + prop_seg + phase_seg1) / (float)all_tq_num) * 100);
 8002358:	7eba      	ldrb	r2, [r7, #26]
 800235a:	7e7b      	ldrb	r3, [r7, #25]
 800235c:	441a      	add	r2, r3
 800235e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002362:	4413      	add	r3, r2
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800236c:	7efb      	ldrb	r3, [r7, #27]
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800246c <mcpl2515_set_bitrate+0x18c>
 800237e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002386:	edc7 7a01 	vstr	s15, [r7, #4]
 800238a:	793b      	ldrb	r3, [r7, #4]
 800238c:	763b      	strb	r3, [r7, #24]
		// 指定のサンプリングポイントになったら終了
		if (cur_sampl >= TARGET_SAMPL_POINT) {
 800238e:	7e3b      	ldrb	r3, [r7, #24]
 8002390:	2b56      	cmp	r3, #86	@ 0x56
 8002392:	d80a      	bhi.n	80023aa <mcpl2515_set_bitrate+0xca>
	for (i = 0; i < all_tq_num; i++) {
 8002394:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002398:	3301      	adds	r3, #1
 800239a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800239e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80023a2:	7efb      	ldrb	r3, [r7, #27]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d3d3      	bcc.n	8002350 <mcpl2515_set_bitrate+0x70>
 80023a8:	e000      	b.n	80023ac <mcpl2515_set_bitrate+0xcc>
			break;
 80023aa:	bf00      	nop
		}
	}
	
	// 良いphase_seg1がなかった
	if (i == all_tq_num) {
 80023ac:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80023b0:	7efb      	ldrb	r3, [r7, #27]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d102      	bne.n	80023bc <mcpl2515_set_bitrate+0xdc>
		ercd = osErrorParameter;
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		goto EXIT;
 80023ba:	e050      	b.n	800245e <mcpl2515_set_bitrate+0x17e>
	}
	
	// phase_seg2算出
	phase_seg2 = all_tq_num - (sync + prop_seg + phase_seg1);
 80023bc:	7eba      	ldrb	r2, [r7, #26]
 80023be:	7e7b      	ldrb	r3, [r7, #25]
 80023c0:	4413      	add	r3, r2
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80023c8:	4413      	add	r3, r2
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	7efa      	ldrb	r2, [r7, #27]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	75fb      	strb	r3, [r7, #23]
	//console_printf("prop_seg:%d\n", prop_seg);
	//console_printf("phase_seg1:%d\n", phase_seg1);
	//console_printf("phase_seg2:%d\n", phase_seg2);
	
	// 誤差を計算して表示
	actual_bit_rate = (uint32_t)(1 / (all_tq_num * tq));
 80023d2:	7efb      	ldrb	r3, [r7, #27]
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80023e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023f0:	ee17 3a90 	vmov	r3, s15
 80023f4:	613b      	str	r3, [r7, #16]
	//console_printf("set_bit_rate:%d\n", bit_rate);
	//console_printf("actual_bit_rate:%d\n", actual_bit_rate);
	
	// レジスタ書き込み
	write_reg(dev, MCP2515_REG_CNF1, CNF1_SJW(0)|CNF1_BRP(brp));
 80023f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	212a      	movs	r1, #42	@ 0x2a
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fa41 	bl	800188c <write_reg>
	write_reg(dev, MCP2515_REG_CNF2, CNF2_BTLMODE|CNF2_SAM|CNF2_PHSEG1(phase_seg1-1)|CNF2_PRSEG(prop_seg-1));
 800240a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800240e:	3b01      	subs	r3, #1
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	b25b      	sxtb	r3, r3
 8002414:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002418:	b25b      	sxtb	r3, r3
 800241a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800241e:	b25a      	sxtb	r2, r3
 8002420:	7e7b      	ldrb	r3, [r7, #25]
 8002422:	3b01      	subs	r3, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	b25b      	sxtb	r3, r3
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	b25b      	sxtb	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b25b      	sxtb	r3, r3
 8002432:	b2da      	uxtb	r2, r3
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	2129      	movs	r1, #41	@ 0x29
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fa27 	bl	800188c <write_reg>
	write_reg(dev, MCP2515_REG_CNF3, CNF3_SOF|CNF3_PHSEG2(phase_seg2-1));
 800243e:	7dfb      	ldrb	r3, [r7, #23]
 8002440:	3b01      	subs	r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	b25b      	sxtb	r3, r3
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	b25b      	sxtb	r3, r3
 800244c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002450:	b25b      	sxtb	r3, r3
 8002452:	b2da      	uxtb	r2, r3
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2128      	movs	r1, #40	@ 0x28
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fa17 	bl	800188c <write_reg>
	
EXIT:
	return ercd;
 800245e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8002460:	4618      	mov	r0, r3
 8002462:	3730      	adds	r7, #48	@ 0x30
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	4af42400 	.word	0x4af42400
 800246c:	42c80000 	.word	0x42c80000

08002470 <mcp2515_dev_init>:


// 外部公開関数
// 初期化関数
void mcp2515_dev_init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
	MCP2515_CTL *this;
	MCP2515_DEV dev;
	
	for (dev = 0; dev < MCP2515_DEV_MAX; dev++) {
 8002476:	2300      	movs	r3, #0
 8002478:	71fb      	strb	r3, [r7, #7]
 800247a:	e00f      	b.n	800249c <mcp2515_dev_init+0x2c>
		// 制御ブロックの取得
		this = get_myself(dev);
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4a0a      	ldr	r2, [pc, #40]	@ (80024ac <mcp2515_dev_init+0x3c>)
 8002482:	4413      	add	r3, r2
 8002484:	603b      	str	r3, [r7, #0]
		// 制御ブロックの初期化
		memset(this, 0, sizeof(MCP2515_CTL));
 8002486:	2204      	movs	r2, #4
 8002488:	2100      	movs	r1, #0
 800248a:	6838      	ldr	r0, [r7, #0]
 800248c:	f008 fdce 	bl	800b02c <memset>
		// 状態の更新
		this->status = ST_INITIALIZED;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]
	for (dev = 0; dev < MCP2515_DEV_MAX; dev++) {
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	3301      	adds	r3, #1
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0ec      	beq.n	800247c <mcp2515_dev_init+0xc>
		
	}
	
	return;
 80024a2:	bf00      	nop
}
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000174 	.word	0x20000174

080024b0 <mcp2515_dev_open>:

// オープン関数
osStatus mcp2515_dev_open(MCP2515_DEV dev, uint32_t bit_rate)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
	MCP2515_CTL *this;
	uint32_t ret;
	SPI_CH ch;
	
	// devチェック
	if (dev >= MCP2515_DEV_MAX) {
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <mcp2515_dev_open+0x16>
		return osErrorParameter;
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	e04b      	b.n	800255e <mcp2515_dev_open+0xae>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4a27      	ldr	r2, [pc, #156]	@ (8002568 <mcp2515_dev_open+0xb8>)
 80024cc:	4413      	add	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
	
	// 未初期化の場合はエラーを返して終了
	if (this->status != ST_INITIALIZED) {
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d002      	beq.n	80024de <mcp2515_dev_open+0x2e>
		return -1;
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
 80024dc:	e03f      	b.n	800255e <mcp2515_dev_open+0xae>
	}
	
	// SPIのチャネル取得
	ch = mcp2515_info[dev].ch;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
	
	// SPIオープン
	ret = spi_open(ch, &spi_open_par);
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	4921      	ldr	r1, [pc, #132]	@ (800256c <mcp2515_dev_open+0xbc>)
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 faf2 	bl	8004ad0 <spi_open>
 80024ec:	6178      	str	r0, [r7, #20]
	if (ret != osOK) {
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <mcp2515_dev_open+0x4c>
		console_printf("spi_open error\n");
 80024f4:	481e      	ldr	r0, [pc, #120]	@ (8002570 <mcp2515_dev_open+0xc0>)
 80024f6:	f7fe ff1d 	bl	8001334 <console_printf>
		goto OPEN_ERROR;
 80024fa:	e02f      	b.n	800255c <mcp2515_dev_open+0xac>
	}
	
	// 割り込み有効
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2105      	movs	r1, #5
 8002500:	2028      	movs	r0, #40	@ 0x28
 8002502:	f002 ffd8 	bl	80054b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002506:	2028      	movs	r0, #40	@ 0x28
 8002508:	f002 fff1 	bl	80054ee <HAL_NVIC_EnableIRQ>
	
	// ウェイクアップチェック
	ret = check_wkup(dev);
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff feba 	bl	8002288 <check_wkup>
 8002514:	6178      	str	r0, [r7, #20]
	if (ret != osOK) {
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <mcp2515_dev_open+0x74>
		console_printf("check_wkup error\n");
 800251c:	4815      	ldr	r0, [pc, #84]	@ (8002574 <mcp2515_dev_open+0xc4>)
 800251e:	f7fe ff09 	bl	8001334 <console_printf>
		goto OPEN_ERROR;
 8002522:	e01b      	b.n	800255c <mcp2515_dev_open+0xac>
	}
	
	// デバイス初期化
	ret = reset(dev);
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff f97d 	bl	8001826 <reset>
 800252c:	6178      	str	r0, [r7, #20]
	if (ret != osOK) {
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <mcp2515_dev_open+0x8c>
		console_printf("reset error\n");
 8002534:	4810      	ldr	r0, [pc, #64]	@ (8002578 <mcp2515_dev_open+0xc8>)
 8002536:	f7fe fefd 	bl	8001334 <console_printf>
		goto OPEN_ERROR;
 800253a:	e00f      	b.n	800255c <mcp2515_dev_open+0xac>
	}
	
	// ビットレート設定
	ret = mcpl2515_set_bitrate(dev, bit_rate);
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	6839      	ldr	r1, [r7, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fecd 	bl	80022e0 <mcpl2515_set_bitrate>
 8002546:	6178      	str	r0, [r7, #20]
	if (ret != osOK) {
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <mcp2515_dev_open+0xa6>
		console_printf("mcpl2515_set_bitrate error\n");
 800254e:	480b      	ldr	r0, [pc, #44]	@ (800257c <mcp2515_dev_open+0xcc>)
 8002550:	f7fe fef0 	bl	8001334 <console_printf>
		goto OPEN_ERROR;
 8002554:	e002      	b.n	800255c <mcp2515_dev_open+0xac>
	}
	
	// 状態を更新
 	this->status = ST_OPENED;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2202      	movs	r2, #2
 800255a:	601a      	str	r2, [r3, #0]
	
OPEN_ERROR:
	return ret;
 800255c:	697b      	ldr	r3, [r7, #20]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000174 	.word	0x20000174
 800256c:	0800b7ac 	.word	0x0800b7ac
 8002570:	0800b30c 	.word	0x0800b30c
 8002574:	0800b31c 	.word	0x0800b31c
 8002578:	0800b330 	.word	0x0800b330
 800257c:	0800b340 	.word	0x0800b340

08002580 <mcp2515_dev_set_mailbox>:

// オープン関数
osStatus mcp2515_dev_set_mailbox(MCP2515_DEV dev, CAN_COMMON_RX_MAILBOX_INFO *p_mbox_info)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b087      	sub	sp, #28
 8002584:	af02      	add	r7, sp, #8
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
	MCP2515_CTL *this;
	osStatus ercd;
	
	// devチェック
	if (dev >= MCP2515_DEV_MAX) {
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <mcp2515_dev_set_mailbox+0x16>
		return osErrorParameter;
 8002592:	2380      	movs	r3, #128	@ 0x80
 8002594:	e029      	b.n	80025ea <mcp2515_dev_set_mailbox+0x6a>
	}
	
	// NULLチェック
	if (p_mbox_info == NULL) {
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <mcp2515_dev_set_mailbox+0x20>
		return osErrorParameter;
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	e024      	b.n	80025ea <mcp2515_dev_set_mailbox+0x6a>
	}
	if (p_mbox_info->p_filter == NULL) {
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <mcp2515_dev_set_mailbox+0x2c>
		return osErrorParameter;
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	e01e      	b.n	80025ea <mcp2515_dev_set_mailbox+0x6a>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4a10      	ldr	r2, [pc, #64]	@ (80025f4 <mcp2515_dev_set_mailbox+0x74>)
 80025b2:	4413      	add	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
	
	// オープンでない場合はエラーを返して終了
	if (this->status != ST_OPENED) {
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d001      	beq.n	80025c2 <mcp2515_dev_set_mailbox+0x42>
		return osErrorParameter;
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	e013      	b.n	80025ea <mcp2515_dev_set_mailbox+0x6a>
	}
	
	// マスク設定
	if((ercd = set_rx_info(dev, p_mbox_info->mbox_id, p_mbox_info->frame_type, p_mbox_info->mask, p_mbox_info->p_filter)) !=  osOK) {
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	791b      	ldrb	r3, [r3, #4]
 80025ca:	461c      	mov	r4, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	79f8      	ldrb	r0, [r7, #7]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	4622      	mov	r2, r4
 80025dc:	f7ff fce0 	bl	8001fa0 <set_rx_info>
 80025e0:	60b8      	str	r0, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
		goto EXIT;
	}
	
EXIT:
 80025e6:	bf00      	nop
	return osOK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000174 	.word	0x20000174

080025f8 <mcp2515_dev_start>:

// スタート関数
osStatus mcp2515_dev_start(MCP2515_DEV dev)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	MCP2515_CTL *this;
	osStatus ercd;
	
	// devチェック
	if (dev >= MCP2515_DEV_MAX) {
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <mcp2515_dev_start+0x14>
		return osErrorParameter;
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	e01a      	b.n	8002642 <mcp2515_dev_start+0x4a>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4a0e      	ldr	r2, [pc, #56]	@ (800264c <mcp2515_dev_start+0x54>)
 8002612:	4413      	add	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
	
	// 未オープンの場合はエラーを返して終了
	if (this->status != ST_OPENED) {
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d001      	beq.n	8002622 <mcp2515_dev_start+0x2a>
		return osErrorParameter;
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	e00f      	b.n	8002642 <mcp2515_dev_start+0x4a>
	}
	
	// ノーマルモードに遷移させる
	ercd = modify_bit(dev, MCP2515_REG_CANCTRL, CANCTRL_REQOP_MASK, CANCTRL_REQOP(NORMAL_MODE));
 8002622:	79f8      	ldrb	r0, [r7, #7]
 8002624:	2300      	movs	r3, #0
 8002626:	22e0      	movs	r2, #224	@ 0xe0
 8002628:	210f      	movs	r1, #15
 800262a:	f7ff f94b 	bl	80018c4 <modify_bit>
 800262e:	60b8      	str	r0, [r7, #8]
	if (ercd != osOK) {
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <mcp2515_dev_start+0x46>
		goto START_EXIT;
	}
	
	// 状態を更新
 	this->status = ST_START;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2203      	movs	r2, #3
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e000      	b.n	8002640 <mcp2515_dev_start+0x48>
		goto START_EXIT;
 800263e:	bf00      	nop
	
START_EXIT:
	return ercd;
 8002640:	68bb      	ldr	r3, [r7, #8]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000174 	.word	0x20000174

08002650 <mcp2515_dev_stop>:

// ストップ関数
osStatus mcp2515_dev_stop(MCP2515_DEV dev)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
	MCP2515_CTL *this;
	osStatus ercd;
	
	// devチェック
	if (dev >= MCP2515_DEV_MAX) {
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <mcp2515_dev_stop+0x14>
		return osErrorParameter;
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	e036      	b.n	80026d2 <mcp2515_dev_stop+0x82>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4a1c      	ldr	r2, [pc, #112]	@ (80026dc <mcp2515_dev_stop+0x8c>)
 800266a:	4413      	add	r3, r2
 800266c:	60bb      	str	r3, [r7, #8]
	
	// 開始中でない場合はエラーを返して終了
	if (this->status != ST_START) {
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d001      	beq.n	800267a <mcp2515_dev_stop+0x2a>
		return osErrorParameter;
 8002676:	2380      	movs	r3, #128	@ 0x80
 8002678:	e02b      	b.n	80026d2 <mcp2515_dev_stop+0x82>
	}
	
	// 送信アボート
	ercd = tx_abort(dev);
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fce2 	bl	8002046 <tx_abort>
 8002682:	60f8      	str	r0, [r7, #12]
	if (ercd != osOK) {
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11d      	bne.n	80026c6 <mcp2515_dev_stop+0x76>
		goto STOP_EXIT;
	}
	
	console_printf("abort success\n");
 800268a:	4815      	ldr	r0, [pc, #84]	@ (80026e0 <mcp2515_dev_stop+0x90>)
 800268c:	f7fe fe52 	bl	8001334 <console_printf>
	
	// コンフィグレーション状態に遷移させる
	ercd = modify_bit(dev, MCP2515_REG_CANCTRL, CANCTRL_REQOP_MASK, CANCTRL_REQOP(CONFIGRATION_MODE));
 8002690:	79f8      	ldrb	r0, [r7, #7]
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	22e0      	movs	r2, #224	@ 0xe0
 8002696:	210f      	movs	r1, #15
 8002698:	f7ff f914 	bl	80018c4 <modify_bit>
 800269c:	60f8      	str	r0, [r7, #12]
	if (ercd != osOK) {
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d112      	bne.n	80026ca <mcp2515_dev_stop+0x7a>
		goto STOP_EXIT;
	}
	
	// コンフィグレーション状態待ち
	ercd = wait_sts(dev, MCP2515_REG_CANCTRL, CANCTRL_REQOP_MASK, CANCTRL_REQOP(CONFIGRATION_MODE));
 80026a4:	79f8      	ldrb	r0, [r7, #7]
 80026a6:	2380      	movs	r3, #128	@ 0x80
 80026a8:	22e0      	movs	r2, #224	@ 0xe0
 80026aa:	210f      	movs	r1, #15
 80026ac:	f7ff f980 	bl	80019b0 <wait_sts>
 80026b0:	60f8      	str	r0, [r7, #12]
	if (ercd != osOK) {
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <mcp2515_dev_stop+0x7e>
		goto STOP_EXIT;
	}
	
	console_printf("go to config mode\n");
 80026b8:	480a      	ldr	r0, [pc, #40]	@ (80026e4 <mcp2515_dev_stop+0x94>)
 80026ba:	f7fe fe3b 	bl	8001334 <console_printf>
	
	// 状態を更新
 	this->status = ST_OPENED;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2202      	movs	r2, #2
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e004      	b.n	80026d0 <mcp2515_dev_stop+0x80>
		goto STOP_EXIT;
 80026c6:	bf00      	nop
 80026c8:	e002      	b.n	80026d0 <mcp2515_dev_stop+0x80>
		goto STOP_EXIT;
 80026ca:	bf00      	nop
 80026cc:	e000      	b.n	80026d0 <mcp2515_dev_stop+0x80>
		goto STOP_EXIT;
 80026ce:	bf00      	nop
	
STOP_EXIT:
	return ercd;
 80026d0:	68fb      	ldr	r3, [r7, #12]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000174 	.word	0x20000174
 80026e0:	0800b35c 	.word	0x0800b35c
 80026e4:	0800b36c 	.word	0x0800b36c

080026e8 <mcp2515_dev_sleep>:

// スリープ関数
osStatus mcp2515_dev_sleep(MCP2515_DEV dev)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
	MCP2515_CTL *this;
	osStatus ercd;
	
	// devチェック
	if (dev >= MCP2515_DEV_MAX) {
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <mcp2515_dev_sleep+0x14>
		return osErrorParameter;
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	e042      	b.n	8002782 <mcp2515_dev_sleep+0x9a>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4a22      	ldr	r2, [pc, #136]	@ (800278c <mcp2515_dev_sleep+0xa4>)
 8002702:	4413      	add	r3, r2
 8002704:	60bb      	str	r3, [r7, #8]
	
	// 開始中でない場合はエラーを返して終了
	if (this->status != ST_START) {
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d001      	beq.n	8002712 <mcp2515_dev_sleep+0x2a>
		return osErrorParameter;
 800270e:	2380      	movs	r3, #128	@ 0x80
 8002710:	e037      	b.n	8002782 <mcp2515_dev_sleep+0x9a>
	}
	
	// 送信アボート
	ercd = tx_abort(dev);
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fc96 	bl	8002046 <tx_abort>
 800271a:	60f8      	str	r0, [r7, #12]
	if (ercd != osOK) {
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d127      	bne.n	8002772 <mcp2515_dev_sleep+0x8a>
		goto SLEEP_EXIT;
	}
	
	console_printf("abort success\n");
 8002722:	481b      	ldr	r0, [pc, #108]	@ (8002790 <mcp2515_dev_sleep+0xa8>)
 8002724:	f7fe fe06 	bl	8001334 <console_printf>
	
	// スリープモードに遷移させる
	ercd = modify_bit(dev, MCP2515_REG_CANCTRL, CANCTRL_REQOP_MASK, CANCTRL_REQOP(SLEEP_MODE));
 8002728:	79f8      	ldrb	r0, [r7, #7]
 800272a:	2320      	movs	r3, #32
 800272c:	22e0      	movs	r2, #224	@ 0xe0
 800272e:	210f      	movs	r1, #15
 8002730:	f7ff f8c8 	bl	80018c4 <modify_bit>
 8002734:	60f8      	str	r0, [r7, #12]
	if (ercd != osOK) {
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d11c      	bne.n	8002776 <mcp2515_dev_sleep+0x8e>
		goto SLEEP_EXIT;
	}
	
	// スリープ状態待ち
	ercd = wait_sts(dev, MCP2515_REG_CANCTRL, CANCTRL_REQOP_MASK, CANCTRL_REQOP(SLEEP_MODE));
 800273c:	79f8      	ldrb	r0, [r7, #7]
 800273e:	2320      	movs	r3, #32
 8002740:	22e0      	movs	r2, #224	@ 0xe0
 8002742:	210f      	movs	r1, #15
 8002744:	f7ff f934 	bl	80019b0 <wait_sts>
 8002748:	60f8      	str	r0, [r7, #12]
	if (ercd != osOK) {
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d114      	bne.n	800277a <mcp2515_dev_sleep+0x92>
		goto SLEEP_EXIT;
	}
	
	console_printf("go to can sleep mode\n");
 8002750:	4810      	ldr	r0, [pc, #64]	@ (8002794 <mcp2515_dev_sleep+0xac>)
 8002752:	f7fe fdef 	bl	8001334 <console_printf>
	
	// ウェイクアップ割込み有効
	ercd = modify_bit(dev, MCP2515_REG_CANINTE, CANINTE_WAKIE, CANINTE_WAKIE);
 8002756:	79f8      	ldrb	r0, [r7, #7]
 8002758:	2340      	movs	r3, #64	@ 0x40
 800275a:	2240      	movs	r2, #64	@ 0x40
 800275c:	212b      	movs	r1, #43	@ 0x2b
 800275e:	f7ff f8b1 	bl	80018c4 <modify_bit>
 8002762:	60f8      	str	r0, [r7, #12]
	if (ercd != osOK) {
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <mcp2515_dev_sleep+0x96>
		goto SLEEP_EXIT;
	}
	
	console_printf("set wakeup int\n");
 800276a:	480b      	ldr	r0, [pc, #44]	@ (8002798 <mcp2515_dev_sleep+0xb0>)
 800276c:	f7fe fde2 	bl	8001334 <console_printf>
 8002770:	e006      	b.n	8002780 <mcp2515_dev_sleep+0x98>
		goto SLEEP_EXIT;
 8002772:	bf00      	nop
 8002774:	e004      	b.n	8002780 <mcp2515_dev_sleep+0x98>
		goto SLEEP_EXIT;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <mcp2515_dev_sleep+0x98>
		goto SLEEP_EXIT;
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <mcp2515_dev_sleep+0x98>
		goto SLEEP_EXIT;
 800277e:	bf00      	nop
	
SLEEP_EXIT:
	return ercd;
 8002780:	68fb      	ldr	r3, [r7, #12]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000174 	.word	0x20000174
 8002790:	0800b35c 	.word	0x0800b35c
 8002794:	0800b380 	.word	0x0800b380
 8002798:	0800b398 	.word	0x0800b398

0800279c <mcp2515_dev_send>:

// 送信関数 (*) ブロッキング
osStatus mcp2515_dev_send(MCP2515_DEV dev, uint32_t mbx_id, CAN_COMMON_FRAME_TYPE frame_type, uint32_t can_id, uint8_t *data, uint8_t size)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	@ 0x28
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	4603      	mov	r3, r0
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	4613      	mov	r3, r2
 80027ac:	73bb      	strb	r3, [r7, #14]
	MCP2515_CTL *this;
	int32_t timeout = TIMEOUT;
 80027ae:	230a      	movs	r3, #10
 80027b0:	61fb      	str	r3, [r7, #28]
	osStatus ercd = -1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	61bb      	str	r3, [r7, #24]
	uint8_t ctrl;
	
	// パラメータチェック
	if ((dev >= MCP2515_DEV_MAX) ||
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10c      	bne.n	80027d8 <mcp2515_dev_send+0x3c>
		(mbx_id >= MCP2515_DEV_TX_MBX_ID_MAX) ||
 80027be:	68bb      	ldr	r3, [r7, #8]
	if ((dev >= MCP2515_DEV_MAX) ||
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d809      	bhi.n	80027d8 <mcp2515_dev_send+0x3c>
		(mbx_id >= MCP2515_DEV_TX_MBX_ID_MAX) ||
 80027c4:	7bbb      	ldrb	r3, [r7, #14]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d806      	bhi.n	80027d8 <mcp2515_dev_send+0x3c>
		(frame_type >= CAN_COMMON_FRAME_TYPE_MAX) ||
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <mcp2515_dev_send+0x3c>
		(data == NULL) ||
 80027d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <mcp2515_dev_send+0x40>
		(size == 0)) {
		return osErrorParameter;
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	e090      	b.n	80028fe <mcp2515_dev_send+0x162>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4a49      	ldr	r2, [pc, #292]	@ (8002908 <mcp2515_dev_send+0x16c>)
 80027e2:	4413      	add	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
	
	// 開始状態でなければ終了
	if (this->status != ST_START) {
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d001      	beq.n	80027f2 <mcp2515_dev_send+0x56>
		return osErrorParameter;
 80027ee:	2380      	movs	r3, #128	@ 0x80
 80027f0:	e085      	b.n	80028fe <mcp2515_dev_send+0x162>
	}
	
	// 自動でメールボックス選択
	if (mbx_id == CAN_COMMON_AUTO_MBX_ID) {
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d10e      	bne.n	8002818 <mcp2515_dev_send+0x7c>
		if ((ercd = get_free_tx_buf(dev, &mbx_id)) != osOK) {
 80027fa:	f107 0208 	add.w	r2, r7, #8
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fbf2 	bl	8001fec <get_free_tx_buf>
 8002808:	61b8      	str	r0, [r7, #24]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01a      	beq.n	8002846 <mcp2515_dev_send+0xaa>
			console_printf("get_free_tx_buf error\n");
 8002810:	483e      	ldr	r0, [pc, #248]	@ (800290c <mcp2515_dev_send+0x170>)
 8002812:	f7fe fd8f 	bl	8001334 <console_printf>
			goto SEND_EXIT;
 8002816:	e071      	b.n	80028fc <mcp2515_dev_send+0x160>
		}
		
	// メールボックス指定
	} else {
		// 指定したメールボックスが空いているかチェック
		ercd = read_reg(dev, MCP2515_REG_TXBCTRL(mbx_id), &ctrl);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	3303      	adds	r3, #3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	b2d9      	uxtb	r1, r3
 8002822:	f107 0213 	add.w	r2, r7, #19
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff f810 	bl	800184e <read_reg>
 800282e:	61b8      	str	r0, [r7, #24]
		if ((ercd != osOK) || ((ctrl & TXB_TXREQ) != 0)) {
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d104      	bne.n	8002840 <mcp2515_dev_send+0xa4>
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <mcp2515_dev_send+0xaa>
			ercd = osErrorResource;
 8002840:	2381      	movs	r3, #129	@ 0x81
 8002842:	61bb      	str	r3, [r7, #24]
			goto SEND_EXIT;
 8002844:	e05a      	b.n	80028fc <mcp2515_dev_send+0x160>
		}
	}
	
	// データ設定
	ercd = set_txb(dev, mbx_id, frame_type, can_id, data, size);
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	7bba      	ldrb	r2, [r7, #14]
 800284a:	7bf8      	ldrb	r0, [r7, #15]
 800284c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f7ff f8e3 	bl	8001a22 <set_txb>
 800285c:	61b8      	str	r0, [r7, #24]
	if (ercd != osOK) {
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <mcp2515_dev_send+0xd0>
		console_printf("set_txb error\n");
 8002864:	482a      	ldr	r0, [pc, #168]	@ (8002910 <mcp2515_dev_send+0x174>)
 8002866:	f7fe fd65 	bl	8001334 <console_printf>
		goto SEND_EXIT;
 800286a:	e047      	b.n	80028fc <mcp2515_dev_send+0x160>
	}
	
	// メッセージ送信要求ビットをセット
	ercd = modify_bit(dev, MCP2515_REG_TXBCTRL(mbx_id), TXB_TXREQ, TXB_TXREQ);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	3303      	adds	r3, #3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	b2d9      	uxtb	r1, r3
 8002876:	7bf8      	ldrb	r0, [r7, #15]
 8002878:	2308      	movs	r3, #8
 800287a:	2208      	movs	r2, #8
 800287c:	f7ff f822 	bl	80018c4 <modify_bit>
 8002880:	61b8      	str	r0, [r7, #24]
	if (ercd != osOK) {
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d021      	beq.n	80028cc <mcp2515_dev_send+0x130>
		console_printf("modify_bit error\n");
 8002888:	4822      	ldr	r0, [pc, #136]	@ (8002914 <mcp2515_dev_send+0x178>)
 800288a:	f7fe fd53 	bl	8001334 <console_printf>
		goto SEND_END_PROC;
 800288e:	e026      	b.n	80028de <mcp2515_dev_send+0x142>
	}
	
	// 送信完了待ち 
	while (timeout--) {
		// CTRLレジスタ読み込み
		ercd = read_reg(dev, MCP2515_REG_TXBCTRL(mbx_id), &ctrl);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	3303      	adds	r3, #3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	b2d9      	uxtb	r1, r3
 800289a:	f107 0213 	add.w	r2, r7, #19
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe ffd4 	bl	800184e <read_reg>
 80028a6:	61b8      	str	r0, [r7, #24]
		// SPIのエラー発生
		if (ercd != osOK) {
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d114      	bne.n	80028d8 <mcp2515_dev_send+0x13c>
			break;
			
		// CANエラー発生
		} else if ((ctrl & (TXB_MLOA | TXB_TXERR)) != 0) {
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <mcp2515_dev_send+0x122>
			ercd = osErrorParameter;
 80028b8:	2380      	movs	r3, #128	@ 0x80
 80028ba:	61bb      	str	r3, [r7, #24]
			break;
 80028bc:	e00f      	b.n	80028de <mcp2515_dev_send+0x142>
			
		// ちゃんと送信できた
		} else if (((ctrl & TXB_TXREQ) == 0)) {
 80028be:	7cfb      	ldrb	r3, [r7, #19]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <mcp2515_dev_send+0x140>
		// その他
		} else {
			;
			
		}
		ercd = osEventTimeout;
 80028c8:	2340      	movs	r3, #64	@ 0x40
 80028ca:	61bb      	str	r3, [r7, #24]
	while (timeout--) {
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	1e5a      	subs	r2, r3, #1
 80028d0:	61fa      	str	r2, [r7, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1dc      	bne.n	8002890 <mcp2515_dev_send+0xf4>
	}
	
SEND_END_PROC:
 80028d6:	e002      	b.n	80028de <mcp2515_dev_send+0x142>
			break;
 80028d8:	bf00      	nop
 80028da:	e000      	b.n	80028de <mcp2515_dev_send+0x142>
			break;
 80028dc:	bf00      	nop
	// 送信要求をクリアしておく
	if (ercd != osOK) {
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <mcp2515_dev_send+0x15e>
		modify_bit(dev, MCP2515_REG_TXBCTRL(mbx_id), TXB_TXREQ, ~TXB_TXREQ);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	3303      	adds	r3, #3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	b2d9      	uxtb	r1, r3
 80028ee:	7bf8      	ldrb	r0, [r7, #15]
 80028f0:	23f7      	movs	r3, #247	@ 0xf7
 80028f2:	2208      	movs	r2, #8
 80028f4:	f7fe ffe6 	bl	80018c4 <modify_bit>
 80028f8:	e000      	b.n	80028fc <mcp2515_dev_send+0x160>
		// ★ 送信要求のクリアミスったらどうしましょう
	}
	
SEND_EXIT:
 80028fa:	bf00      	nop
	return ercd;
 80028fc:	69bb      	ldr	r3, [r7, #24]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000174 	.word	0x20000174
 800290c:	0800b3a8 	.word	0x0800b3a8
 8002910:	0800b3c0 	.word	0x0800b3c0
 8002914:	0800b3d0 	.word	0x0800b3d0

08002918 <mcp2515_dev_rx_check>:

// 受信データチェック
osStatus mcp2515_dev_rx_check(MCP2515_DEV dev, uint8_t *p_ret)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
	MCP2515_CTL *this;
	uint8_t i;
	uint8_t ret = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	73bb      	strb	r3, [r7, #14]
	
	// パラメータチェック
	if ((dev >= MCP2515_DEV_MAX) ||
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <mcp2515_dev_rx_check+0x1c>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <mcp2515_dev_rx_check+0x20>
		(p_ret == NULL)) {
		return osErrorParameter;
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	e029      	b.n	800298c <mcp2515_dev_rx_check+0x74>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4a15      	ldr	r2, [pc, #84]	@ (8002994 <mcp2515_dev_rx_check+0x7c>)
 800293e:	4413      	add	r3, r2
 8002940:	60bb      	str	r3, [r7, #8]
	
	// 開始状態でなければ終了
	if (this->status != ST_START) {
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d001      	beq.n	800294e <mcp2515_dev_rx_check+0x36>
		return osErrorParameter;
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	e01e      	b.n	800298c <mcp2515_dev_rx_check+0x74>
	}
	
	// 受信チェック
	for (i = 0; i < MCP2515_DEV_RX_MBX_ID_MAX; i++) {
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	e017      	b.n	8002984 <mcp2515_dev_rx_check+0x6c>
		ret = check_rx_data(dev, i);
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fbc5 	bl	80020ea <check_rx_data>
 8002960:	4603      	mov	r3, r0
 8002962:	73bb      	strb	r3, [r7, #14]
		*p_ret |= (ret << i);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b25a      	sxtb	r2, r3
 800296a:	7bb9      	ldrb	r1, [r7, #14]
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	b25b      	sxtb	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	b25b      	sxtb	r3, r3
 8002978:	b2da      	uxtb	r2, r3
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MCP2515_DEV_RX_MBX_ID_MAX; i++) {
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	3301      	adds	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d9e4      	bls.n	8002954 <mcp2515_dev_rx_check+0x3c>
	}
	
	return osOK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000174 	.word	0x20000174

08002998 <mcp2515_dev_get_rx_data>:

// 受信チェック関数
osStatus mcp2515_dev_get_rx_data(MCP2515_DEV dev, uint32_t mbx_id, uint32_t *p_can_id, uint8_t *p_data, uint8_t *p_size)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	@ 0x28
 800299c:	af02      	add	r7, sp, #8
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4603      	mov	r3, r0
 80029a6:	73fb      	strb	r3, [r7, #15]
	MCP2515_CTL *this;
	osStatus ercd;
	uint8_t is_eid;
	
	// パラメータチェック
	if (mbx_id >= MCP2515_DEV_RX_MBX_ID_MAX) {
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d901      	bls.n	80029b2 <mcp2515_dev_get_rx_data+0x1a>
		return osErrorParameter;
 80029ae:	2380      	movs	r3, #128	@ 0x80
 80029b0:	e039      	b.n	8002a26 <mcp2515_dev_get_rx_data+0x8e>
	}
	
	if ((p_can_id == NULL) ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <mcp2515_dev_get_rx_data+0x2c>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <mcp2515_dev_get_rx_data+0x2c>
		(p_data == NULL) ||
 80029be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <mcp2515_dev_get_rx_data+0x30>
		(p_size == NULL)) {
		return osErrorParameter;
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	e02e      	b.n	8002a26 <mcp2515_dev_get_rx_data+0x8e>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4a18      	ldr	r2, [pc, #96]	@ (8002a30 <mcp2515_dev_get_rx_data+0x98>)
 80029ce:	4413      	add	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
	
	// 開始状態でなければ終了
	if (this->status != ST_START) {
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d001      	beq.n	80029de <mcp2515_dev_get_rx_data+0x46>
		return osErrorParameter;
 80029da:	2380      	movs	r3, #128	@ 0x80
 80029dc:	e023      	b.n	8002a26 <mcp2515_dev_get_rx_data+0x8e>
	}
	
	// 受信チェック
	if (check_rx_data(dev, mbx_id) == 0) {
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fb81 	bl	80020ea <check_rx_data>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <mcp2515_dev_get_rx_data+0x5a>
		return osErrorResource;
 80029ee:	2381      	movs	r3, #129	@ 0x81
 80029f0:	e019      	b.n	8002a26 <mcp2515_dev_get_rx_data+0x8e>
	}
	
	// 受信データ取得
	if ((ercd = get_rx_data(dev, mbx_id, &is_eid, p_can_id, p_data, p_size)) != osOK) {
 80029f2:	f107 0217 	add.w	r2, r7, #23
 80029f6:	7bf8      	ldrb	r0, [r7, #15]
 80029f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	f7ff fbcc 	bl	80021a0 <get_rx_data>
 8002a08:	61f8      	str	r0, [r7, #28]
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d108      	bne.n	8002a22 <mcp2515_dev_get_rx_data+0x8a>
		goto EXIT;
	}
	
	// 受信フラグクリア
	if ((ercd = clr_rx_flag(dev, mbx_id)) != osOK) {
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fb94 	bl	8002142 <clr_rx_flag>
 8002a1a:	61f8      	str	r0, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b00      	cmp	r3, #0
		goto EXIT;
	}
	
EXIT:
 8002a20:	e000      	b.n	8002a24 <mcp2515_dev_get_rx_data+0x8c>
		goto EXIT;
 8002a22:	bf00      	nop
	return ercd;
 8002a24:	69fb      	ldr	r3, [r7, #28]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000174 	.word	0x20000174

08002a34 <mcp2515_dev_get_status>:

// 状態取得関数
osStatus mcp2515_dev_get_status(MCP2515_DEV dev, uint32_t *p_sts)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
	MCP2515_CTL *this;
	const MCP2515_STATUS_INFO *p_info;
	osStatus ercd;
	uint8_t can_sts = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	uint32_t sts_ret = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
	
	// パラメータチェック
	if (dev >= MCP2515_DEV_MAX) {
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <mcp2515_dev_get_status+0x1e>
		return osErrorParameter;
 8002a4e:	2380      	movs	r3, #128	@ 0x80
 8002a50:	e03a      	b.n	8002ac8 <mcp2515_dev_get_status+0x94>
	}
	if (p_sts == NULL) {
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <mcp2515_dev_get_status+0x28>
		return osErrorParameter;
 8002a58:	2380      	movs	r3, #128	@ 0x80
 8002a5a:	e035      	b.n	8002ac8 <mcp2515_dev_get_status+0x94>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <mcp2515_dev_get_status+0x9c>)
 8002a62:	4413      	add	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
	
	// 開始状態でなければ終了
	if (this->status != ST_START) {
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d001      	beq.n	8002a72 <mcp2515_dev_get_status+0x3e>
		return osErrorParameter;
 8002a6e:	2380      	movs	r3, #128	@ 0x80
 8002a70:	e02a      	b.n	8002ac8 <mcp2515_dev_get_status+0x94>
	}
	
	// CTRLレジスタ読み込み
	ercd = read_reg(dev, MCP2515_REG_EFLG, &can_sts);
 8002a72:	f107 020b 	add.w	r2, r7, #11
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	212d      	movs	r1, #45	@ 0x2d
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fee7 	bl	800184e <read_reg>
 8002a80:	6138      	str	r0, [r7, #16]
	if (ercd != osOK) {
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11d      	bne.n	8002ac4 <mcp2515_dev_get_status+0x90>
		goto EXIT;
	}
	
	// 返す状態を設定
	for (i = 0; i < sizeof(status_info)/sizeof(status_info[0]); i++) {
 8002a88:	2300      	movs	r3, #0
 8002a8a:	77fb      	strb	r3, [r7, #31]
 8002a8c:	e013      	b.n	8002ab6 <mcp2515_dev_get_status+0x82>
		// 状態情報取得
		p_info = &status_info[i];
 8002a8e:	7ffb      	ldrb	r3, [r7, #31]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4a10      	ldr	r2, [pc, #64]	@ (8002ad4 <mcp2515_dev_get_status+0xa0>)
 8002a94:	4413      	add	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
		if ((can_sts & p_info->reg_bit) != 0) {
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	781a      	ldrb	r2, [r3, #0]
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d004      	beq.n	8002ab0 <mcp2515_dev_get_status+0x7c>
			sts_ret |= p_info->ret_bit;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < sizeof(status_info)/sizeof(status_info[0]); i++) {
 8002ab0:	7ffb      	ldrb	r3, [r7, #31]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	77fb      	strb	r3, [r7, #31]
 8002ab6:	7ffb      	ldrb	r3, [r7, #31]
 8002ab8:	2b07      	cmp	r3, #7
 8002aba:	d9e8      	bls.n	8002a8e <mcp2515_dev_get_status+0x5a>
		}
	}
	*p_sts = sts_ret;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e000      	b.n	8002ac6 <mcp2515_dev_get_status+0x92>
		goto EXIT;
 8002ac4:	bf00      	nop
	
EXIT:
	return ercd;
 8002ac6:	693b      	ldr	r3, [r7, #16]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3720      	adds	r7, #32
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000174 	.word	0x20000174
 8002ad4:	0800b7c4 	.word	0x0800b7c4

08002ad8 <mcp2515_cmd_open>:

// コマンド
static void mcp2515_cmd_open(int argc, char *argv[])
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
	uint32_t ret;
	
	ret = mcp2515_dev_open(MCP2515_DEV_1, 250*1000);
 8002ae2:	4907      	ldr	r1, [pc, #28]	@ (8002b00 <mcp2515_cmd_open+0x28>)
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7ff fce3 	bl	80024b0 <mcp2515_dev_open>
 8002aea:	60f8      	str	r0, [r7, #12]
	if (ret != osOK) {
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <mcp2515_cmd_open+0x20>
		console_printf("mcp2515_dev_open error\n");
 8002af2:	4804      	ldr	r0, [pc, #16]	@ (8002b04 <mcp2515_cmd_open+0x2c>)
 8002af4:	f7fe fc1e 	bl	8001334 <console_printf>
	}
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	0003d090 	.word	0x0003d090
 8002b04:	0800b3e4 	.word	0x0800b3e4

08002b08 <mcp2515_cmd_read_reg>:

static void mcp2515_cmd_read_reg(int argc, char *argv[])
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
	uint32_t ret;
	uint8_t reg;
	uint8_t data = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
	
	// 引数チェック
	if (argc < 2) {
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	dc03      	bgt.n	8002b24 <mcp2515_cmd_read_reg+0x1c>
		console_printf("mcp2515 read_reg <addr>\n");
 8002b1c:	4812      	ldr	r0, [pc, #72]	@ (8002b68 <mcp2515_cmd_read_reg+0x60>)
 8002b1e:	f7fe fc09 	bl	8001334 <console_printf>
		return;
 8002b22:	e01d      	b.n	8002b60 <mcp2515_cmd_read_reg+0x58>
	}
	
	// 値設定
	reg = atoi(argv[2]);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	3308      	adds	r3, #8
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f008 f9e6 	bl	800aefc <atoi>
 8002b30:	4603      	mov	r3, r0
 8002b32:	75fb      	strb	r3, [r7, #23]
	
	// 読み込み
	ret = read_reg(MCP2515_DEV_1, reg, &data);
 8002b34:	f107 020f 	add.w	r2, r7, #15
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7fe fe86 	bl	800184e <read_reg>
 8002b42:	6138      	str	r0, [r7, #16]
	if (ret != osOK) {
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <mcp2515_cmd_read_reg+0x4c>
		console_printf("read_reg error\n");
 8002b4a:	4808      	ldr	r0, [pc, #32]	@ (8002b6c <mcp2515_cmd_read_reg+0x64>)
 8002b4c:	f7fe fbf2 	bl	8001334 <console_printf>
		goto CMD_READ_REG_EXIT;
 8002b50:	bf00      	nop
	}
	
	console_printf("%x\n", data);
	
CMD_READ_REG_EXIT:
	return;
 8002b52:	e004      	b.n	8002b5e <mcp2515_cmd_read_reg+0x56>
	console_printf("%x\n", data);
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	4619      	mov	r1, r3
 8002b58:	4805      	ldr	r0, [pc, #20]	@ (8002b70 <mcp2515_cmd_read_reg+0x68>)
 8002b5a:	f7fe fbeb 	bl	8001334 <console_printf>
	return;
 8002b5e:	bf00      	nop
}
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	0800b3fc 	.word	0x0800b3fc
 8002b6c:	0800b418 	.word	0x0800b418
 8002b70:	0800b428 	.word	0x0800b428

08002b74 <mcp2515_cmd_read_status>:

static void mcp2515_cmd_read_status(int argc, char *argv[])
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	uint32_t ret;
	uint8_t data = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	72fb      	strb	r3, [r7, #11]
	
	// 読み込み
	ret = read_status(MCP2515_DEV_1, &data);
 8002b82:	f107 030b 	add.w	r3, r7, #11
 8002b86:	4619      	mov	r1, r3
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7fe fedb 	bl	8001944 <read_status>
 8002b8e:	60f8      	str	r0, [r7, #12]
	if (ret != osOK) {
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <mcp2515_cmd_read_status+0x2a>
		console_printf("read_status error\n");
 8002b96:	4806      	ldr	r0, [pc, #24]	@ (8002bb0 <mcp2515_cmd_read_status+0x3c>)
 8002b98:	f7fe fbcc 	bl	8001334 <console_printf>
		goto CMD_READ_REG_EXIT;
 8002b9c:	e004      	b.n	8002ba8 <mcp2515_cmd_read_status+0x34>
	}
	
	console_printf("%x\n", data);
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4804      	ldr	r0, [pc, #16]	@ (8002bb4 <mcp2515_cmd_read_status+0x40>)
 8002ba4:	f7fe fbc6 	bl	8001334 <console_printf>
	
CMD_READ_REG_EXIT:
	return;
 8002ba8:	bf00      	nop
}
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	0800b42c 	.word	0x0800b42c
 8002bb4:	0800b428 	.word	0x0800b428

08002bb8 <mcp2515_cmd_write_reg>:

static void mcp2515_cmd_write_reg(int argc, char *argv[])
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	uint32_t ret;
	uint8_t reg;
	uint8_t data = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	73fb      	strb	r3, [r7, #15]
	
	// 引数チェック
	if (argc < 3) {
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	dc03      	bgt.n	8002bd4 <mcp2515_cmd_write_reg+0x1c>
		console_printf("mcp2515 write_reg <addr> <val>\n");
 8002bcc:	4815      	ldr	r0, [pc, #84]	@ (8002c24 <mcp2515_cmd_write_reg+0x6c>)
 8002bce:	f7fe fbb1 	bl	8001334 <console_printf>
		return;
 8002bd2:	e024      	b.n	8002c1e <mcp2515_cmd_write_reg+0x66>
	}
	
	// 値設定
	reg = atoi(argv[2]);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f008 f98e 	bl	800aefc <atoi>
 8002be0:	4603      	mov	r3, r0
 8002be2:	73bb      	strb	r3, [r7, #14]
	data = atoi(argv[3]);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	330c      	adds	r3, #12
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f008 f986 	bl	800aefc <atoi>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	73fb      	strb	r3, [r7, #15]
	
	// 書き込み
	ret = write_reg(MCP2515_DEV_1, reg, data);
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	7bbb      	ldrb	r3, [r7, #14]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fe fe46 	bl	800188c <write_reg>
 8002c00:	60b8      	str	r0, [r7, #8]
	if (ret != osOK) {
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <mcp2515_cmd_write_reg+0x5a>
		console_printf("write_reg error\n");
 8002c08:	4807      	ldr	r0, [pc, #28]	@ (8002c28 <mcp2515_cmd_write_reg+0x70>)
 8002c0a:	f7fe fb93 	bl	8001334 <console_printf>
		goto CMD_READ_REG_EXIT;
 8002c0e:	bf00      	nop
	}
	
	console_printf("%x\n", data);
	
CMD_READ_REG_EXIT:
	return;
 8002c10:	e004      	b.n	8002c1c <mcp2515_cmd_write_reg+0x64>
	console_printf("%x\n", data);
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	4619      	mov	r1, r3
 8002c16:	4805      	ldr	r0, [pc, #20]	@ (8002c2c <mcp2515_cmd_write_reg+0x74>)
 8002c18:	f7fe fb8c 	bl	8001334 <console_printf>
	return;
 8002c1c:	bf00      	nop
}
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	0800b440 	.word	0x0800b440
 8002c28:	0800b460 	.word	0x0800b460
 8002c2c:	0800b428 	.word	0x0800b428

08002c30 <mcp2515_cmd_change_bit>:

static void mcp2515_cmd_change_bit(int argc, char *argv[])
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
	uint32_t ret;
	uint8_t reg;
	uint8_t data = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
	uint8_t msk = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73bb      	strb	r3, [r7, #14]
	
	// 引数チェック
	if (argc < 4) {
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	dc03      	bgt.n	8002c50 <mcp2515_cmd_change_bit+0x20>
		console_printf("mcp2515 change_bit <addr> <msk> <data>\n");
 8002c48:	4819      	ldr	r0, [pc, #100]	@ (8002cb0 <mcp2515_cmd_change_bit+0x80>)
 8002c4a:	f7fe fb73 	bl	8001334 <console_printf>
		return;
 8002c4e:	e02c      	b.n	8002caa <mcp2515_cmd_change_bit+0x7a>
	}
	
	// 値設定
	reg = atoi(argv[2]);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	3308      	adds	r3, #8
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f008 f950 	bl	800aefc <atoi>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	737b      	strb	r3, [r7, #13]
	msk = atoi(argv[3]);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f008 f948 	bl	800aefc <atoi>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	73bb      	strb	r3, [r7, #14]
	data = atoi(argv[4]);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3310      	adds	r3, #16
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f008 f940 	bl	800aefc <atoi>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	73fb      	strb	r3, [r7, #15]
	
	// 書き込み
	ret = modify_bit(MCP2515_DEV_1, reg, msk, data);
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	7bba      	ldrb	r2, [r7, #14]
 8002c84:	7b79      	ldrb	r1, [r7, #13]
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7fe fe1c 	bl	80018c4 <modify_bit>
 8002c8c:	60b8      	str	r0, [r7, #8]
	if (ret != osOK) {
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d004      	beq.n	8002c9e <mcp2515_cmd_change_bit+0x6e>
		console_printf("write_reg error\n");
 8002c94:	4807      	ldr	r0, [pc, #28]	@ (8002cb4 <mcp2515_cmd_change_bit+0x84>)
 8002c96:	f7fe fb4d 	bl	8001334 <console_printf>
		goto CMD_READ_REG_EXIT;
 8002c9a:	bf00      	nop
	}
	
	console_printf("%x\n", data);
	
CMD_READ_REG_EXIT:
	return;
 8002c9c:	e004      	b.n	8002ca8 <mcp2515_cmd_change_bit+0x78>
	console_printf("%x\n", data);
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4805      	ldr	r0, [pc, #20]	@ (8002cb8 <mcp2515_cmd_change_bit+0x88>)
 8002ca4:	f7fe fb46 	bl	8001334 <console_printf>
	return;
 8002ca8:	bf00      	nop
}
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	0800b474 	.word	0x0800b474
 8002cb4:	0800b460 	.word	0x0800b460
 8002cb8:	0800b428 	.word	0x0800b428

08002cbc <mcp2515_cmd_start>:

static void mcp2515_cmd_start(int argc, char *argv[])
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
	uint32_t ret;
	
	// 開始
	ret = mcp2515_dev_start(MCP2515_DEV_1);
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7ff fc96 	bl	80025f8 <mcp2515_dev_start>
 8002ccc:	60f8      	str	r0, [r7, #12]
	if (ret != osOK) {
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <mcp2515_cmd_start+0x20>
		console_printf("start error\n");
 8002cd4:	4804      	ldr	r0, [pc, #16]	@ (8002ce8 <mcp2515_cmd_start+0x2c>)
 8002cd6:	f7fe fb2d 	bl	8001334 <console_printf>
		goto EXIT;
 8002cda:	e000      	b.n	8002cde <mcp2515_cmd_start+0x22>
	}
	
EXIT:
 8002cdc:	bf00      	nop
	return;
 8002cde:	bf00      	nop
}
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	0800b49c 	.word	0x0800b49c

08002cec <mcp2515_cmd_send>:

static void mcp2515_cmd_send(int argc, char *argv[])
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	@ 0x28
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
	uint32_t can_id;
	uint8_t i;
	uint8_t data[8];
	
	// 引数チェック
	if (argc < 3) {
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	dc03      	bgt.n	8002d04 <mcp2515_cmd_send+0x18>
		console_printf("mcp2515 send <mbx_id> <can_id>\n");
 8002cfc:	481d      	ldr	r0, [pc, #116]	@ (8002d74 <mcp2515_cmd_send+0x88>)
 8002cfe:	f7fe fb19 	bl	8001334 <console_printf>
		return;
 8002d02:	e033      	b.n	8002d6c <mcp2515_cmd_send+0x80>
	}
	
	// 値設定
	mbx_id = atoi(argv[2]);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	3308      	adds	r3, #8
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f008 f8f6 	bl	800aefc <atoi>
 8002d10:	4603      	mov	r3, r0
 8002d12:	77bb      	strb	r3, [r7, #30]
	can_id = atoi(argv[3]);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	330c      	adds	r3, #12
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f008 f8ee 	bl	800aefc <atoi>
 8002d20:	4603      	mov	r3, r0
 8002d22:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < 8; i++) {
 8002d24:	2300      	movs	r3, #0
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	e008      	b.n	8002d3c <mcp2515_cmd_send+0x50>
		data[i] = i;
 8002d2a:	7ffb      	ldrb	r3, [r7, #31]
 8002d2c:	3320      	adds	r3, #32
 8002d2e:	443b      	add	r3, r7
 8002d30:	7ffa      	ldrb	r2, [r7, #31]
 8002d32:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 8; i++) {
 8002d36:	7ffb      	ldrb	r3, [r7, #31]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	77fb      	strb	r3, [r7, #31]
 8002d3c:	7ffb      	ldrb	r3, [r7, #31]
 8002d3e:	2b07      	cmp	r3, #7
 8002d40:	d9f3      	bls.n	8002d2a <mcp2515_cmd_send+0x3e>
	}
	
	// 送信
	ret = mcp2515_dev_send(MCP2515_DEV_1, mbx_id, CAN_COMMON_FRAME_TYPE_STANDARD, can_id, data, 8);
 8002d42:	7fb9      	ldrb	r1, [r7, #30]
 8002d44:	2308      	movs	r3, #8
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7ff fd22 	bl	800279c <mcp2515_dev_send>
 8002d58:	6178      	str	r0, [r7, #20]
	if (ret != osOK) {
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <mcp2515_cmd_send+0x7c>
		console_printf("send error\n");
 8002d60:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <mcp2515_cmd_send+0x8c>)
 8002d62:	f7fe fae7 	bl	8001334 <console_printf>
		goto EXIT;
 8002d66:	e000      	b.n	8002d6a <mcp2515_cmd_send+0x7e>
	}
	
EXIT:
 8002d68:	bf00      	nop
	return;
 8002d6a:	bf00      	nop
}
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	0800b4ac 	.word	0x0800b4ac
 8002d78:	0800b4cc 	.word	0x0800b4cc

08002d7c <mcp2515_set_cmd>:

// コマンド設定関数
void mcp2515_set_cmd(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
	COMMAND_INFO cmd;
	
	// コマンドの設定
	cmd.input = "mcp2515 open";
 8002d82:	4b1e      	ldr	r3, [pc, #120]	@ (8002dfc <mcp2515_set_cmd+0x80>)
 8002d84:	603b      	str	r3, [r7, #0]
	cmd.func = mcp2515_cmd_open;
 8002d86:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <mcp2515_set_cmd+0x84>)
 8002d88:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 8002d8a:	463b      	mov	r3, r7
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fb0b 	bl	80013a8 <console_set_command>
	cmd.input = "mcp2515 read_reg";
 8002d92:	4b1c      	ldr	r3, [pc, #112]	@ (8002e04 <mcp2515_set_cmd+0x88>)
 8002d94:	603b      	str	r3, [r7, #0]
	cmd.func = mcp2515_cmd_read_reg;
 8002d96:	4b1c      	ldr	r3, [pc, #112]	@ (8002e08 <mcp2515_set_cmd+0x8c>)
 8002d98:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 8002d9a:	463b      	mov	r3, r7
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fb03 	bl	80013a8 <console_set_command>
	cmd.input = "mcp2515 read_status";
 8002da2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e0c <mcp2515_set_cmd+0x90>)
 8002da4:	603b      	str	r3, [r7, #0]
	cmd.func = mcp2515_cmd_read_status;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e10 <mcp2515_set_cmd+0x94>)
 8002da8:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 8002daa:	463b      	mov	r3, r7
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe fafb 	bl	80013a8 <console_set_command>
	cmd.input = "mcp2515 write_reg";
 8002db2:	4b18      	ldr	r3, [pc, #96]	@ (8002e14 <mcp2515_set_cmd+0x98>)
 8002db4:	603b      	str	r3, [r7, #0]
	cmd.func = mcp2515_cmd_write_reg;
 8002db6:	4b18      	ldr	r3, [pc, #96]	@ (8002e18 <mcp2515_set_cmd+0x9c>)
 8002db8:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 8002dba:	463b      	mov	r3, r7
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe faf3 	bl	80013a8 <console_set_command>
	cmd.input = "mcp2515 change_bit";
 8002dc2:	4b16      	ldr	r3, [pc, #88]	@ (8002e1c <mcp2515_set_cmd+0xa0>)
 8002dc4:	603b      	str	r3, [r7, #0]
	cmd.func = mcp2515_cmd_change_bit;
 8002dc6:	4b16      	ldr	r3, [pc, #88]	@ (8002e20 <mcp2515_set_cmd+0xa4>)
 8002dc8:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 8002dca:	463b      	mov	r3, r7
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe faeb 	bl	80013a8 <console_set_command>
	cmd.input = "mcp2515 start";
 8002dd2:	4b14      	ldr	r3, [pc, #80]	@ (8002e24 <mcp2515_set_cmd+0xa8>)
 8002dd4:	603b      	str	r3, [r7, #0]
	cmd.func = mcp2515_cmd_start;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <mcp2515_set_cmd+0xac>)
 8002dd8:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 8002dda:	463b      	mov	r3, r7
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe fae3 	bl	80013a8 <console_set_command>
	cmd.input = "mcp2515 send";
 8002de2:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <mcp2515_set_cmd+0xb0>)
 8002de4:	603b      	str	r3, [r7, #0]
	cmd.func = mcp2515_cmd_send;
 8002de6:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <mcp2515_set_cmd+0xb4>)
 8002de8:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 8002dea:	463b      	mov	r3, r7
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe fadb 	bl	80013a8 <console_set_command>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	0800b4d8 	.word	0x0800b4d8
 8002e00:	08002ad9 	.word	0x08002ad9
 8002e04:	0800b4e8 	.word	0x0800b4e8
 8002e08:	08002b09 	.word	0x08002b09
 8002e0c:	0800b4fc 	.word	0x0800b4fc
 8002e10:	08002b75 	.word	0x08002b75
 8002e14:	0800b510 	.word	0x0800b510
 8002e18:	08002bb9 	.word	0x08002bb9
 8002e1c:	0800b524 	.word	0x0800b524
 8002e20:	08002c31 	.word	0x08002c31
 8002e24:	0800b538 	.word	0x0800b538
 8002e28:	08002cbd 	.word	0x08002cbd
 8002e2c:	0800b548 	.word	0x0800b548
 8002e30:	08002ced 	.word	0x08002ced

08002e34 <can_drv_init>:
static CAN_DRV_CTL can_drv_ctl[CAN_DRV_CH_MAX];
#define get_myself(ch) (&can_drv_ctl[ch])

// 初期化
void can_drv_init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
	CAN_DRV_CTL *this;
	CAN_DRV_CH ch;
	
	// 状態を更新
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	71fb      	strb	r3, [r7, #7]
 8002e3e:	e012      	b.n	8002e66 <can_drv_init+0x32>
		// コンテキスト取得
		this = get_myself(ch);
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4a0c      	ldr	r2, [pc, #48]	@ (8002e78 <can_drv_init+0x44>)
 8002e46:	4413      	add	r3, r2
 8002e48:	603b      	str	r3, [r7, #0]
		// コンテキスト初期化
		memset(this, 0, sizeof(CAN_DRV_CTL));
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	6838      	ldr	r0, [r7, #0]
 8002e50:	f008 f8ec 	bl	800b02c <memset>
		// チャネルセット
		this->ch = ch;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	79fa      	ldrb	r2, [r7, #7]
 8002e58:	701a      	strb	r2, [r3, #0]
		// 状態の更新
		this->state = ST_INITIALIZED;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	605a      	str	r2, [r3, #4]
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	3301      	adds	r3, #1
 8002e64:	71fb      	strb	r3, [r7, #7]
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d9e9      	bls.n	8002e40 <can_drv_init+0xc>
	}
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000178 	.word	0x20000178

08002e7c <can_drv_open>:

// オープン
osStatus can_drv_open(CAN_DRV_CH ch)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
	const CAN_DRV_CH_INFO *p_info;
	CAN_DRV_OPEN open;
	osStatus ercd;
	
	// パラメータチェック
	if (ch >= CAN_DRV_CH_MAX) {
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d901      	bls.n	8002e90 <can_drv_open+0x14>
		return osErrorParameter;
 8002e8c:	2380      	movs	r3, #128	@ 0x80
 8002e8e:	e02b      	b.n	8002ee8 <can_drv_open+0x6c>
	}
	
	// コンテキスト取得
	this = get_myself(ch);
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4a16      	ldr	r2, [pc, #88]	@ (8002ef0 <can_drv_open+0x74>)
 8002e96:	4413      	add	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
	
	// 初期化してないならエラー返して終了
	if (this->state != ST_INITIALIZED) {
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d001      	beq.n	8002ea6 <can_drv_open+0x2a>
		return osErrorResource;
 8002ea2:	2381      	movs	r3, #129	@ 0x81
 8002ea4:	e020      	b.n	8002ee8 <can_drv_open+0x6c>
	}
	
	// チャネルタイプ取得
	p_info = &(can_drv_ch_info[ch]);
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <can_drv_open+0x78>)
 8002eac:	4413      	add	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
	
	// オープン関数取得
	open = can_drv_func_list_tbl[p_info->type]->open;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <can_drv_open+0x7c>)
 8002eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]
	
	// オープン実行
	ercd = open(p_info->ch, p_info->bit_rate);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	785b      	ldrb	r3, [r3, #1]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4798      	blx	r3
 8002ed0:	60b8      	str	r0, [r7, #8]
	if (ercd != osOK) {
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <can_drv_open+0x64>
		console_printf("can_drv_open failed\n");
 8002ed8:	4808      	ldr	r0, [pc, #32]	@ (8002efc <can_drv_open+0x80>)
 8002eda:	f7fe fa2b 	bl	8001334 <console_printf>
		goto EXIT;
 8002ede:	e002      	b.n	8002ee6 <can_drv_open+0x6a>
	}
	
	// 状態の更新
	this->state = ST_OPENED;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	605a      	str	r2, [r3, #4]
	
EXIT:
	return ercd;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000178 	.word	0x20000178
 8002ef4:	0800b854 	.word	0x0800b854
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	0800b558 	.word	0x0800b558

08002f00 <can_drv_set_mailbox>:

// メールボックス設定
osStatus can_drv_set_mailbox(CAN_DRV_CH ch, CAN_COMMON_RX_MAILBOX_INFO *p_mbx_info)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	71fb      	strb	r3, [r7, #7]
	const CAN_DRV_CH_INFO *p_info;
	CAN_DRV_SET_MAILBOX set_mailbox;
	osStatus ercd;
	
	// パラメータチェック
	if (ch >= CAN_DRV_CH_MAX) {
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d901      	bls.n	8002f16 <can_drv_set_mailbox+0x16>
		return osErrorParameter;
 8002f12:	2380      	movs	r3, #128	@ 0x80
 8002f14:	e028      	b.n	8002f68 <can_drv_set_mailbox+0x68>
	}
	
	// コンテキスト取得
	this = get_myself(ch);
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <can_drv_set_mailbox+0x70>)
 8002f1c:	4413      	add	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
	
	// 初期化してないならエラー返して終了
	if (this->state != ST_OPENED) {
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d001      	beq.n	8002f2c <can_drv_set_mailbox+0x2c>
		return osErrorResource;
 8002f28:	2381      	movs	r3, #129	@ 0x81
 8002f2a:	e01d      	b.n	8002f68 <can_drv_set_mailbox+0x68>
	}
	
	// チャネルタイプ取得
	p_info = &(can_drv_ch_info[ch]);
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4a10      	ldr	r2, [pc, #64]	@ (8002f74 <can_drv_set_mailbox+0x74>)
 8002f32:	4413      	add	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
	
	// 開始関数取得
	set_mailbox = can_drv_func_list_tbl[p_info->type]->set_mailbox;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f78 <can_drv_set_mailbox+0x78>)
 8002f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	60fb      	str	r3, [r7, #12]
	
	// 開始実行
	ercd = set_mailbox(p_info->ch, p_mbx_info);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	785b      	ldrb	r3, [r3, #1]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6839      	ldr	r1, [r7, #0]
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
 8002f54:	60b8      	str	r0, [r7, #8]
	if (ercd != osOK) {
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <can_drv_set_mailbox+0x64>
		console_printf("can_drv_set_mailbox failed\n");
 8002f5c:	4807      	ldr	r0, [pc, #28]	@ (8002f7c <can_drv_set_mailbox+0x7c>)
 8002f5e:	f7fe f9e9 	bl	8001334 <console_printf>
		goto EXIT;
 8002f62:	e000      	b.n	8002f66 <can_drv_set_mailbox+0x66>
	}
	
EXIT:
 8002f64:	bf00      	nop
	return ercd;
 8002f66:	68bb      	ldr	r3, [r7, #8]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000178 	.word	0x20000178
 8002f74:	0800b854 	.word	0x0800b854
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	0800b570 	.word	0x0800b570

08002f80 <can_drv_start>:

// 開始関数
osStatus can_drv_start(CAN_DRV_CH ch)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
	const CAN_DRV_CH_INFO *p_info;
	CAN_DRV_START start;
	osStatus ercd;
	
	// パラメータチェック
	if (ch >= CAN_DRV_CH_MAX) {
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d901      	bls.n	8002f94 <can_drv_start+0x14>
		return osErrorParameter;
 8002f90:	2380      	movs	r3, #128	@ 0x80
 8002f92:	e029      	b.n	8002fe8 <can_drv_start+0x68>
	}
	
	// コンテキスト取得
	this = get_myself(ch);
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4a15      	ldr	r2, [pc, #84]	@ (8002ff0 <can_drv_start+0x70>)
 8002f9a:	4413      	add	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
	
	// 初期化してないならエラー返して終了
	if (this->state != ST_OPENED) {
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d001      	beq.n	8002faa <can_drv_start+0x2a>
		return osErrorResource;
 8002fa6:	2381      	movs	r3, #129	@ 0x81
 8002fa8:	e01e      	b.n	8002fe8 <can_drv_start+0x68>
	}
	
	// チャネルタイプ取得
	p_info = &(can_drv_ch_info[ch]);
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4a11      	ldr	r2, [pc, #68]	@ (8002ff4 <can_drv_start+0x74>)
 8002fb0:	4413      	add	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
	
	// 開始関数取得
	start = can_drv_func_list_tbl[p_info->type]->start;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff8 <can_drv_start+0x78>)
 8002fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60fb      	str	r3, [r7, #12]
	
	// 開始実行
	ercd = start(p_info->ch);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	785b      	ldrb	r3, [r3, #1]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4798      	blx	r3
 8002fd0:	60b8      	str	r0, [r7, #8]
	if (ercd != osOK) {
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <can_drv_start+0x60>
		console_printf("can_drv_start failed\n");
 8002fd8:	4808      	ldr	r0, [pc, #32]	@ (8002ffc <can_drv_start+0x7c>)
 8002fda:	f7fe f9ab 	bl	8001334 <console_printf>
		goto EXIT;
 8002fde:	e002      	b.n	8002fe6 <can_drv_start+0x66>
	}
	
	// 状態の更新
	this->state = ST_START;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	605a      	str	r2, [r3, #4]
	
EXIT:
	return ercd;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000178 	.word	0x20000178
 8002ff4:	0800b854 	.word	0x0800b854
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	0800b58c 	.word	0x0800b58c

08003000 <can_drv_stop>:

// 停止関数
osStatus can_drv_stop(CAN_DRV_CH ch)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
	const CAN_DRV_CH_INFO *p_info;
	CAN_DRV_STOP stop;
	osStatus ercd;
	
	// パラメータチェック
	if (ch >= CAN_DRV_CH_MAX) {
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d901      	bls.n	8003014 <can_drv_stop+0x14>
		return osErrorParameter;
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	e029      	b.n	8003068 <can_drv_stop+0x68>
	}
	
	// コンテキスト取得
	this = get_myself(ch);
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4a15      	ldr	r2, [pc, #84]	@ (8003070 <can_drv_stop+0x70>)
 800301a:	4413      	add	r3, r2
 800301c:	617b      	str	r3, [r7, #20]
	
	// 開始状態でないならエラー返して終了
	if (this->state != ST_START) {
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d001      	beq.n	800302a <can_drv_stop+0x2a>
		return osErrorResource;
 8003026:	2381      	movs	r3, #129	@ 0x81
 8003028:	e01e      	b.n	8003068 <can_drv_stop+0x68>
	}
	
	// チャネルタイプ取得
	p_info = &(can_drv_ch_info[ch]);
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4a11      	ldr	r2, [pc, #68]	@ (8003074 <can_drv_stop+0x74>)
 8003030:	4413      	add	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
	
	// 開始関数取得
	stop = can_drv_func_list_tbl[p_info->type]->stop;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	4b0f      	ldr	r3, [pc, #60]	@ (8003078 <can_drv_stop+0x78>)
 800303c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	60fb      	str	r3, [r7, #12]
	
	// 開始実行
	ercd = stop(p_info->ch);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	785b      	ldrb	r3, [r3, #1]
 8003048:	461a      	mov	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4610      	mov	r0, r2
 800304e:	4798      	blx	r3
 8003050:	60b8      	str	r0, [r7, #8]
	if (ercd != osOK) {
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <can_drv_stop+0x60>
		console_printf("can_drv_stop failed\n");
 8003058:	4808      	ldr	r0, [pc, #32]	@ (800307c <can_drv_stop+0x7c>)
 800305a:	f7fe f96b 	bl	8001334 <console_printf>
		goto EXIT;
 800305e:	e002      	b.n	8003066 <can_drv_stop+0x66>
	}
	
	// 状態の更新
	this->state = ST_OPENED;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2202      	movs	r2, #2
 8003064:	605a      	str	r2, [r3, #4]
	
EXIT:
	return ercd;
 8003066:	68bb      	ldr	r3, [r7, #8]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000178 	.word	0x20000178
 8003074:	0800b854 	.word	0x0800b854
 8003078:	20000000 	.word	0x20000000
 800307c:	0800b5a4 	.word	0x0800b5a4

08003080 <can_drv_sleep>:

// スリープ関数
osStatus can_drv_sleep(CAN_DRV_CH ch)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
	const CAN_DRV_CH_INFO *p_info;
	CAN_DRV_SLEEP sleep;
	osStatus ercd;
	
	// パラメータチェック
	if (ch >= CAN_DRV_CH_MAX) {
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d901      	bls.n	8003094 <can_drv_sleep+0x14>
		return osErrorParameter;
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	e027      	b.n	80030e4 <can_drv_sleep+0x64>
	}
	
	// コンテキスト取得
	this = get_myself(ch);
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4a14      	ldr	r2, [pc, #80]	@ (80030ec <can_drv_sleep+0x6c>)
 800309a:	4413      	add	r3, r2
 800309c:	617b      	str	r3, [r7, #20]
	
	// 開始状態でないならエラー返して終了
	if (this->state != ST_START) {
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d001      	beq.n	80030aa <can_drv_sleep+0x2a>
		return osErrorResource;
 80030a6:	2381      	movs	r3, #129	@ 0x81
 80030a8:	e01c      	b.n	80030e4 <can_drv_sleep+0x64>
	}
	
	// チャネルタイプ取得
	p_info = &(can_drv_ch_info[ch]);
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4a10      	ldr	r2, [pc, #64]	@ (80030f0 <can_drv_sleep+0x70>)
 80030b0:	4413      	add	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
	
	// スリープ関数取得
	sleep = can_drv_func_list_tbl[p_info->type]->sleep;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <can_drv_sleep+0x74>)
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	60fb      	str	r3, [r7, #12]
	
	// 開始実行
	ercd = sleep(p_info->ch);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	461a      	mov	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4610      	mov	r0, r2
 80030ce:	4798      	blx	r3
 80030d0:	60b8      	str	r0, [r7, #8]
	if (ercd != osOK) {
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <can_drv_sleep+0x60>
		console_printf("can_drv_sleep failed\n");
 80030d8:	4807      	ldr	r0, [pc, #28]	@ (80030f8 <can_drv_sleep+0x78>)
 80030da:	f7fe f92b 	bl	8001334 <console_printf>
		goto EXIT;
 80030de:	e000      	b.n	80030e2 <can_drv_sleep+0x62>
	}
	
EXIT:
 80030e0:	bf00      	nop
	return ercd;
 80030e2:	68bb      	ldr	r3, [r7, #8]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000178 	.word	0x20000178
 80030f0:	0800b854 	.word	0x0800b854
 80030f4:	20000000 	.word	0x20000000
 80030f8:	0800b5bc 	.word	0x0800b5bc

080030fc <can_drv_send>:

// 送信
osStatus can_drv_send(CAN_DRV_CH ch, uint32_t mbx_id, CAN_COMMON_FRAME_TYPE frame_type, uint32_t can_id, uint8_t *p_data, uint8_t size)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b08b      	sub	sp, #44	@ 0x2c
 8003100:	af02      	add	r7, sp, #8
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	4603      	mov	r3, r0
 8003108:	73fb      	strb	r3, [r7, #15]
 800310a:	4613      	mov	r3, r2
 800310c:	73bb      	strb	r3, [r7, #14]
	const CAN_DRV_CH_INFO *p_info;
	CAN_DRV_SEND send;
	osStatus ercd;
	
	// パラメータチェック
	if ((ch >= CAN_DRV_CH_MAX) || 
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d809      	bhi.n	8003128 <can_drv_send+0x2c>
 8003114:	7bbb      	ldrb	r3, [r7, #14]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d806      	bhi.n	8003128 <can_drv_send+0x2c>
		(frame_type >= CAN_COMMON_FRAME_TYPE_MAX) ||
 800311a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <can_drv_send+0x2c>
		(p_data == NULL) ||
 8003120:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <can_drv_send+0x30>
		(size == 0)) {
		return osErrorParameter;
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	e02c      	b.n	8003186 <can_drv_send+0x8a>
	}
	
	// コンテキスト取得
	this = get_myself(ch);
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4a17      	ldr	r2, [pc, #92]	@ (8003190 <can_drv_send+0x94>)
 8003132:	4413      	add	r3, r2
 8003134:	61fb      	str	r3, [r7, #28]
	
	// オープンしてないならエラー返して終了
	if (this->state != ST_START) {
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d001      	beq.n	8003142 <can_drv_send+0x46>
		return osErrorResource;
 800313e:	2381      	movs	r3, #129	@ 0x81
 8003140:	e021      	b.n	8003186 <can_drv_send+0x8a>
	}
	
	// チャネルタイプ取得
	p_info = &(can_drv_ch_info[ch]);
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4a13      	ldr	r2, [pc, #76]	@ (8003194 <can_drv_send+0x98>)
 8003148:	4413      	add	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
	
	// 開始関数取得
	send = can_drv_func_list_tbl[p_info->type]->send;
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <can_drv_send+0x9c>)
 8003154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	617b      	str	r3, [r7, #20]
	
	// 送信
	ercd = send(p_info->ch, mbx_id, frame_type, can_id, p_data, size);
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	785b      	ldrb	r3, [r3, #1]
 8003160:	4618      	mov	r0, r3
 8003162:	7bba      	ldrb	r2, [r7, #14]
 8003164:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	697c      	ldr	r4, [r7, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	47a0      	blx	r4
 8003176:	6138      	str	r0, [r7, #16]
	if (ercd != osOK) {
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <can_drv_send+0x88>
		console_printf("can_drv_send failed\n");
 800317e:	4807      	ldr	r0, [pc, #28]	@ (800319c <can_drv_send+0xa0>)
 8003180:	f7fe f8d8 	bl	8001334 <console_printf>
	}
	
	return ercd;
 8003184:	693b      	ldr	r3, [r7, #16]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	@ 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd90      	pop	{r4, r7, pc}
 800318e:	bf00      	nop
 8003190:	20000178 	.word	0x20000178
 8003194:	0800b854 	.word	0x0800b854
 8003198:	20000000 	.word	0x20000000
 800319c:	0800b5d4 	.word	0x0800b5d4

080031a0 <can_drv_rx_check>:

// 受信データチェック
osStatus can_drv_rx_check(CAN_DRV_CH ch, uint32_t *p_ret)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	6039      	str	r1, [r7, #0]
 80031aa:	71fb      	strb	r3, [r7, #7]
	const CAN_DRV_CH_INFO *p_info;
	CAN_DRV_RX_CHECK rx_check;
	osStatus ercd;
	
	// パラメータチェック
	if ((ch >= CAN_DRV_CH_MAX) || 
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d802      	bhi.n	80031b8 <can_drv_rx_check+0x18>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <can_drv_rx_check+0x1c>
		(p_ret == NULL)) {
		return osErrorParameter;
 80031b8:	2380      	movs	r3, #128	@ 0x80
 80031ba:	e026      	b.n	800320a <can_drv_rx_check+0x6a>
	}
	
	// コンテキスト取得
	this = get_myself(ch);
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <can_drv_rx_check+0x74>)
 80031c2:	4413      	add	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
	
	// オープンしてないならエラー返して終了
	if (this->state != ST_START) {
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d001      	beq.n	80031d2 <can_drv_rx_check+0x32>
		return osErrorResource;
 80031ce:	2381      	movs	r3, #129	@ 0x81
 80031d0:	e01b      	b.n	800320a <can_drv_rx_check+0x6a>
	}
	
	// チャネルタイプ取得
	p_info = &(can_drv_ch_info[ch]);
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4a10      	ldr	r2, [pc, #64]	@ (8003218 <can_drv_rx_check+0x78>)
 80031d8:	4413      	add	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
	
	// 開始関数取得
	rx_check = can_drv_func_list_tbl[p_info->type]->rx_check;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <can_drv_rx_check+0x7c>)
 80031e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	60fb      	str	r3, [r7, #12]
	
	// 受信
	ercd = rx_check(p_info->ch, p_ret);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	461a      	mov	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6839      	ldr	r1, [r7, #0]
 80031f6:	4610      	mov	r0, r2
 80031f8:	4798      	blx	r3
 80031fa:	60b8      	str	r0, [r7, #8]
	if (ercd != osOK) {
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <can_drv_rx_check+0x68>
		console_printf("can_drv_rx_check failed\n");
 8003202:	4807      	ldr	r0, [pc, #28]	@ (8003220 <can_drv_rx_check+0x80>)
 8003204:	f7fe f896 	bl	8001334 <console_printf>
	}
	
	return ercd;
 8003208:	68bb      	ldr	r3, [r7, #8]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000178 	.word	0x20000178
 8003218:	0800b854 	.word	0x0800b854
 800321c:	20000000 	.word	0x20000000
 8003220:	0800b5ec 	.word	0x0800b5ec

08003224 <can_drv_recv>:

// 受信
osStatus can_drv_recv(CAN_DRV_CH ch, uint32_t mbx_id, uint32_t *p_can_id, uint8_t *p_data, uint8_t *p_size)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b08b      	sub	sp, #44	@ 0x2c
 8003228:	af02      	add	r7, sp, #8
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4603      	mov	r3, r0
 8003232:	73fb      	strb	r3, [r7, #15]
	const CAN_DRV_CH_INFO *p_info;
	CAN_DRV_RECV recv;
	osStatus ercd;
	
	// パラメータチェック
	if ((ch >= CAN_DRV_CH_MAX) || 
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d808      	bhi.n	800324c <can_drv_recv+0x28>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <can_drv_recv+0x28>
		(p_can_id == NULL) ||
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <can_drv_recv+0x28>
		(p_data == NULL) ||
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <can_drv_recv+0x2c>
		(p_size == NULL)) {
		return osErrorParameter;
 800324c:	2380      	movs	r3, #128	@ 0x80
 800324e:	e02c      	b.n	80032aa <can_drv_recv+0x86>
	}
	
	// コンテキスト取得
	this = get_myself(ch);
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4a17      	ldr	r2, [pc, #92]	@ (80032b4 <can_drv_recv+0x90>)
 8003256:	4413      	add	r3, r2
 8003258:	61fb      	str	r3, [r7, #28]
	
	// オープンしてないならエラー返して終了
	if (this->state != ST_START) {
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b03      	cmp	r3, #3
 8003260:	d001      	beq.n	8003266 <can_drv_recv+0x42>
		return osErrorResource;
 8003262:	2381      	movs	r3, #129	@ 0x81
 8003264:	e021      	b.n	80032aa <can_drv_recv+0x86>
	}
	
	// チャネルタイプ取得
	p_info = &(can_drv_ch_info[ch]);
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4a13      	ldr	r2, [pc, #76]	@ (80032b8 <can_drv_recv+0x94>)
 800326c:	4413      	add	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
	
	// 開始関数取得
	recv = can_drv_func_list_tbl[p_info->type]->recv;
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <can_drv_recv+0x98>)
 8003278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	617b      	str	r3, [r7, #20]
	
	// 受信
	ercd = recv(p_info->ch, mbx_id, p_can_id, p_data, p_size);
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	785b      	ldrb	r3, [r3, #1]
 8003284:	4618      	mov	r0, r3
 8003286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	697c      	ldr	r4, [r7, #20]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	47a0      	blx	r4
 8003294:	6138      	str	r0, [r7, #16]
	if ((ercd != osOK) && (ercd != osErrorResource)) {
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <can_drv_recv+0x84>
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b81      	cmp	r3, #129	@ 0x81
 80032a0:	d002      	beq.n	80032a8 <can_drv_recv+0x84>
		// osErrorResourceはデータがないということなので、エラーではない
		console_printf("can_drv_recv failed\n");
 80032a2:	4807      	ldr	r0, [pc, #28]	@ (80032c0 <can_drv_recv+0x9c>)
 80032a4:	f7fe f846 	bl	8001334 <console_printf>
	}
	
	return ercd;
 80032a8:	693b      	ldr	r3, [r7, #16]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3724      	adds	r7, #36	@ 0x24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000178 	.word	0x20000178
 80032b8:	0800b854 	.word	0x0800b854
 80032bc:	20000000 	.word	0x20000000
 80032c0:	0800b608 	.word	0x0800b608

080032c4 <can_drv_get_status>:

// 状態
osStatus can_drv_get_status(CAN_DRV_CH ch, uint32_t *p_sts)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	71fb      	strb	r3, [r7, #7]
	const CAN_DRV_CH_INFO *p_info;
	CAN_DRV_GET_STATUS get_status;
	osStatus ercd;
	
	// パラメータチェック
	if ((ch >= CAN_DRV_CH_MAX) || 
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d802      	bhi.n	80032dc <can_drv_get_status+0x18>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <can_drv_get_status+0x1c>
		(p_sts == NULL)) {
		return osErrorParameter;
 80032dc:	2380      	movs	r3, #128	@ 0x80
 80032de:	e026      	b.n	800332e <can_drv_get_status+0x6a>
	}
	
	// コンテキスト取得
	this = get_myself(ch);
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4a14      	ldr	r2, [pc, #80]	@ (8003338 <can_drv_get_status+0x74>)
 80032e6:	4413      	add	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
	
	// オープンしてないならエラー返して終了
	if (this->state != ST_START) {
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d001      	beq.n	80032f6 <can_drv_get_status+0x32>
		return osErrorResource;
 80032f2:	2381      	movs	r3, #129	@ 0x81
 80032f4:	e01b      	b.n	800332e <can_drv_get_status+0x6a>
	}
	
	// チャネルタイプ取得
	p_info = &(can_drv_ch_info[ch]);
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4a10      	ldr	r2, [pc, #64]	@ (800333c <can_drv_get_status+0x78>)
 80032fc:	4413      	add	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
	
	// 開始関数取得
	get_status = can_drv_func_list_tbl[p_info->type]->get_status;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	4b0e      	ldr	r3, [pc, #56]	@ (8003340 <can_drv_get_status+0x7c>)
 8003308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	60fb      	str	r3, [r7, #12]
	
	// 状態取得
	ercd = get_status(p_info->ch, p_sts);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	461a      	mov	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	4610      	mov	r0, r2
 800331c:	4798      	blx	r3
 800331e:	60b8      	str	r0, [r7, #8]
	if (ercd != osOK) {
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <can_drv_get_status+0x68>
		console_printf("can_drv_get_status failed\n");
 8003326:	4807      	ldr	r0, [pc, #28]	@ (8003344 <can_drv_get_status+0x80>)
 8003328:	f7fe f804 	bl	8001334 <console_printf>
	}
	
	return ercd;
 800332c:	68bb      	ldr	r3, [r7, #8]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000178 	.word	0x20000178
 800333c:	0800b854 	.word	0x0800b854
 8003340:	20000000 	.word	0x20000000
 8003344:	0800b620 	.word	0x0800b620

08003348 <can_drv_cmd_open>:

// コマンド
static void can_drv_cmd_open(int argc, char *argv[])
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
	uint8_t ch;
	uint32_t ret;
	
	// 引数チェック
	if (argc < 2) {
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b01      	cmp	r3, #1
 8003356:	dc03      	bgt.n	8003360 <can_drv_cmd_open+0x18>
		console_printf("can_drv open <ch>\n");
 8003358:	480f      	ldr	r0, [pc, #60]	@ (8003398 <can_drv_cmd_open+0x50>)
 800335a:	f7fd ffeb 	bl	8001334 <console_printf>
		return;
 800335e:	e018      	b.n	8003392 <can_drv_cmd_open+0x4a>
	}
	
	// 値設定
	ch = atoi(argv[2]);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	3308      	adds	r3, #8
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f007 fdc8 	bl	800aefc <atoi>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]
	
	// オープン
	ret = can_drv_open(ch);
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fd82 	bl	8002e7c <can_drv_open>
 8003378:	60b8      	str	r0, [r7, #8]
	if (ret != osOK) {
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <can_drv_cmd_open+0x42>
		console_printf("open error\n");
 8003380:	4806      	ldr	r0, [pc, #24]	@ (800339c <can_drv_cmd_open+0x54>)
 8003382:	f7fd ffd7 	bl	8001334 <console_printf>
		goto EXIT;
 8003386:	bf00      	nop
	}
	
	console_printf("open success\n");
	
EXIT:
	return;
 8003388:	e002      	b.n	8003390 <can_drv_cmd_open+0x48>
	console_printf("open success\n");
 800338a:	4805      	ldr	r0, [pc, #20]	@ (80033a0 <can_drv_cmd_open+0x58>)
 800338c:	f7fd ffd2 	bl	8001334 <console_printf>
	return;
 8003390:	bf00      	nop
	
}
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	0800b63c 	.word	0x0800b63c
 800339c:	0800b650 	.word	0x0800b650
 80033a0:	0800b65c 	.word	0x0800b65c

080033a4 <can_drv_cmd_start>:

static void can_drv_cmd_start(int argc, char *argv[])
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
	uint8_t ch;
	uint32_t ret;
	
	// 引数チェック
	if (argc < 2) {
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	dc03      	bgt.n	80033bc <can_drv_cmd_start+0x18>
		console_printf("can_drv open <ch>\n");
 80033b4:	480f      	ldr	r0, [pc, #60]	@ (80033f4 <can_drv_cmd_start+0x50>)
 80033b6:	f7fd ffbd 	bl	8001334 <console_printf>
		return;
 80033ba:	e018      	b.n	80033ee <can_drv_cmd_start+0x4a>
	}
	
	// 値設定
	ch = atoi(argv[2]);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	3308      	adds	r3, #8
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f007 fd9a 	bl	800aefc <atoi>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]
	
	// オープン
	ret = can_drv_start(ch);
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fdd6 	bl	8002f80 <can_drv_start>
 80033d4:	60b8      	str	r0, [r7, #8]
	if (ret != osOK) {
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <can_drv_cmd_start+0x42>
		console_printf("start error\n");
 80033dc:	4806      	ldr	r0, [pc, #24]	@ (80033f8 <can_drv_cmd_start+0x54>)
 80033de:	f7fd ffa9 	bl	8001334 <console_printf>
		goto EXIT;
 80033e2:	bf00      	nop
	}
	
	console_printf("start success\n");
	
EXIT:
	return;
 80033e4:	e002      	b.n	80033ec <can_drv_cmd_start+0x48>
	console_printf("start success\n");
 80033e6:	4805      	ldr	r0, [pc, #20]	@ (80033fc <can_drv_cmd_start+0x58>)
 80033e8:	f7fd ffa4 	bl	8001334 <console_printf>
	return;
 80033ec:	bf00      	nop
	
}
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	0800b63c 	.word	0x0800b63c
 80033f8:	0800b66c 	.word	0x0800b66c
 80033fc:	0800b67c 	.word	0x0800b67c

08003400 <can_drv_cmd_send>:

static void can_drv_cmd_send(int argc, char *argv[])
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	@ 0x28
 8003404:	af02      	add	r7, sp, #8
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
	uint32_t can_id;
	uint8_t i;
	uint8_t data[8];
	
	// 引数チェック
	if (argc < 4) {
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b03      	cmp	r3, #3
 800340e:	dc03      	bgt.n	8003418 <can_drv_cmd_send+0x18>
		console_printf("can_drv send <ch> <mbx_id> <can_id>\n");
 8003410:	4822      	ldr	r0, [pc, #136]	@ (800349c <can_drv_cmd_send+0x9c>)
 8003412:	f7fd ff8f 	bl	8001334 <console_printf>
		return;
 8003416:	e03e      	b.n	8003496 <can_drv_cmd_send+0x96>
	}
	
	// 値設定
	ch = atoi(argv[2]);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	3308      	adds	r3, #8
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f007 fd6c 	bl	800aefc <atoi>
 8003424:	4603      	mov	r3, r0
 8003426:	77bb      	strb	r3, [r7, #30]
	mbx_id = atoi(argv[3]);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	330c      	adds	r3, #12
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f007 fd64 	bl	800aefc <atoi>
 8003434:	4603      	mov	r3, r0
 8003436:	777b      	strb	r3, [r7, #29]
	can_id = atoi(argv[4]);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	3310      	adds	r3, #16
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f007 fd5c 	bl	800aefc <atoi>
 8003444:	4603      	mov	r3, r0
 8003446:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < 8; i++) {
 8003448:	2300      	movs	r3, #0
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e008      	b.n	8003460 <can_drv_cmd_send+0x60>
		data[i] = i;
 800344e:	7ffb      	ldrb	r3, [r7, #31]
 8003450:	3320      	adds	r3, #32
 8003452:	443b      	add	r3, r7
 8003454:	7ffa      	ldrb	r2, [r7, #31]
 8003456:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 8; i++) {
 800345a:	7ffb      	ldrb	r3, [r7, #31]
 800345c:	3301      	adds	r3, #1
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	7ffb      	ldrb	r3, [r7, #31]
 8003462:	2b07      	cmp	r3, #7
 8003464:	d9f3      	bls.n	800344e <can_drv_cmd_send+0x4e>
	}
	
	// 送信
	ret = can_drv_send(ch, mbx_id, CAN_COMMON_FRAME_TYPE_STANDARD, can_id, data, 8);
 8003466:	7f79      	ldrb	r1, [r7, #29]
 8003468:	7fb8      	ldrb	r0, [r7, #30]
 800346a:	2308      	movs	r3, #8
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2200      	movs	r2, #0
 8003478:	f7ff fe40 	bl	80030fc <can_drv_send>
 800347c:	6178      	str	r0, [r7, #20]
	if (ret != osOK) {
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d004      	beq.n	800348e <can_drv_cmd_send+0x8e>
		console_printf("send error\n");
 8003484:	4806      	ldr	r0, [pc, #24]	@ (80034a0 <can_drv_cmd_send+0xa0>)
 8003486:	f7fd ff55 	bl	8001334 <console_printf>
		goto EXIT;
 800348a:	bf00      	nop
	}
	
	console_printf("send success\n");
	
EXIT:
	return;
 800348c:	e002      	b.n	8003494 <can_drv_cmd_send+0x94>
	console_printf("send success\n");
 800348e:	4805      	ldr	r0, [pc, #20]	@ (80034a4 <can_drv_cmd_send+0xa4>)
 8003490:	f7fd ff50 	bl	8001334 <console_printf>
	return;
 8003494:	bf00      	nop
	
}
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	0800b68c 	.word	0x0800b68c
 80034a0:	0800b6b4 	.word	0x0800b6b4
 80034a4:	0800b6c0 	.word	0x0800b6c0

080034a8 <can_drv_set_cmd>:

// コマンド設定関数
void can_drv_set_cmd(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
	COMMAND_INFO cmd;
	
	// コマンドの設定
	cmd.input = "can_drv open";
 80034ae:	4b0e      	ldr	r3, [pc, #56]	@ (80034e8 <can_drv_set_cmd+0x40>)
 80034b0:	603b      	str	r3, [r7, #0]
	cmd.func = can_drv_cmd_open;
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <can_drv_set_cmd+0x44>)
 80034b4:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 80034b6:	463b      	mov	r3, r7
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd ff75 	bl	80013a8 <console_set_command>
	cmd.input = "can_drv start";
 80034be:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <can_drv_set_cmd+0x48>)
 80034c0:	603b      	str	r3, [r7, #0]
	cmd.func = can_drv_cmd_start;
 80034c2:	4b0c      	ldr	r3, [pc, #48]	@ (80034f4 <can_drv_set_cmd+0x4c>)
 80034c4:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 80034c6:	463b      	mov	r3, r7
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd ff6d 	bl	80013a8 <console_set_command>
	cmd.input = "can_drv send";
 80034ce:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <can_drv_set_cmd+0x50>)
 80034d0:	603b      	str	r3, [r7, #0]
	cmd.func = can_drv_cmd_send;
 80034d2:	4b0a      	ldr	r3, [pc, #40]	@ (80034fc <can_drv_set_cmd+0x54>)
 80034d4:	607b      	str	r3, [r7, #4]
	console_set_command(&cmd);
 80034d6:	463b      	mov	r3, r7
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fd ff65 	bl	80013a8 <console_set_command>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	0800b6d0 	.word	0x0800b6d0
 80034ec:	08003349 	.word	0x08003349
 80034f0:	0800b6e0 	.word	0x0800b6e0
 80034f4:	080033a5 	.word	0x080033a5
 80034f8:	0800b6f0 	.word	0x0800b6f0
 80034fc:	08003401 	.word	0x08003401

08003500 <usart_recv_callback>:
	{USART_CH_1, {USART_LEN_8, USART_STOPBIT_1, USART_PARITY_DISABLE, 115200}},
};

// 受信コールバック
void usart_recv_callback(USART_CH ch, void* p_ctx)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	71fb      	strb	r3, [r7, #7]
	USART_DRV_CB *this = (USART_DRV_CB*)p_ctx;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	60fb      	str	r3, [r7, #12]
	
	if (this->rcv_thread_id != NULL) {
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <usart_recv_callback+0x24>
		// イベント送信
		osSignalSet(this->rcv_thread_id, UART_DRV_RECV_DONE);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2102      	movs	r1, #2
 800351e:	4618      	mov	r0, r3
 8003520:	f004 fa24 	bl	800796c <osSignalSet>
	}
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <usart_send_callback>:

// 送信コールバック
void usart_send_callback(USART_CH ch, void* p_ctx)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	71fb      	strb	r3, [r7, #7]
	USART_DRV_CB *this = (USART_DRV_CB*)p_ctx;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	60fb      	str	r3, [r7, #12]
	
	if (this->snd_thread_id != NULL) {
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <usart_send_callback+0x24>
		// イベント送信
		osSignalSet(this->snd_thread_id, UART_DRV_SEND_DONE);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2101      	movs	r1, #1
 800354a:	4618      	mov	r0, r3
 800354c:	f004 fa0e 	bl	800796c <osSignalSet>
	}
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <usart_err_callback>:

// エラーコールバック
void usart_err_callback(USART_CH ch, void* p_ctx)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
	USART_DRV_CB *this = (USART_DRV_CB*)p_ctx;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	60fb      	str	r3, [r7, #12]
	
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <usart_drv_init>:

// 初期化
osStatus usart_drv_init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
	USART_DRV_CB *this;
	USART_DRV_DEV dev;
	
	// 初期化
	for (dev = 0; dev < USART_DRV_DEV_MAX; dev++) {
 800357a:	2300      	movs	r3, #0
 800357c:	71fb      	strb	r3, [r7, #7]
 800357e:	e012      	b.n	80035a6 <usart_drv_init+0x32>
		// 制御ブロックを取得
		this = get_myself(dev);
 8003580:	79fa      	ldrb	r2, [r7, #7]
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4a0c      	ldr	r2, [pc, #48]	@ (80035bc <usart_drv_init+0x48>)
 800358c:	4413      	add	r3, r2
 800358e:	603b      	str	r3, [r7, #0]
		// 初期化
		memset(this, 0, sizeof(USART_DRV_CB));
 8003590:	220c      	movs	r2, #12
 8003592:	2100      	movs	r1, #0
 8003594:	6838      	ldr	r0, [r7, #0]
 8003596:	f007 fd49 	bl	800b02c <memset>
		// 状態をクローズ状態に更新
		this->status = ST_CLOSE;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
	for (dev = 0; dev < USART_DRV_DEV_MAX; dev++) {
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	3301      	adds	r3, #1
 80035a4:	71fb      	strb	r3, [r7, #7]
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0e9      	beq.n	8003580 <usart_drv_init+0xc>
	}
	
	return usart_init();
 80035ac:	f001 fcee 	bl	8004f8c <usart_init>
 80035b0:	4603      	mov	r3, r0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000188 	.word	0x20000188

080035c0 <usart_drv_open>:

// オープン
osStatus usart_drv_open(USART_DRV_DEV dev)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
	USART_DRV_CB *this;
	const USART_DEV_INFO *p_info;
	uint32_t ercd;
	
	// パラメータチェック
	if (dev >= USART_DRV_DEV_MAX) {
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <usart_drv_open+0x14>
		return osErrorParameter;
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	e02b      	b.n	800362c <usart_drv_open+0x6c>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 80035d4:	79fa      	ldrb	r2, [r7, #7]
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4a15      	ldr	r2, [pc, #84]	@ (8003634 <usart_drv_open+0x74>)
 80035e0:	4413      	add	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
	
	// クローズ状態でなければ終了
	if (this->status != ST_CLOSE) {
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d001      	beq.n	80035f0 <usart_drv_open+0x30>
		return osErrorParameter;
 80035ec:	2380      	movs	r3, #128	@ 0x80
 80035ee:	e01d      	b.n	800362c <usart_drv_open+0x6c>
	}
	
	// USART情報取得
	p_info = &usart_info_tbl[dev];
 80035f0:	79fa      	ldrb	r2, [r7, #7]
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003638 <usart_drv_open+0x78>)
 80035fc:	4413      	add	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
	
	// オープン
	if ((ercd = usart_open(p_info->ch, &(p_info->open_par), usart_send_callback, usart_recv_callback, usart_err_callback, this)) != osOK) {
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	7818      	ldrb	r0, [r3, #0]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1d19      	adds	r1, r3, #4
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	4b0b      	ldr	r3, [pc, #44]	@ (800363c <usart_drv_open+0x7c>)
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <usart_drv_open+0x80>)
 8003612:	4a0c      	ldr	r2, [pc, #48]	@ (8003644 <usart_drv_open+0x84>)
 8003614:	f001 fcde 	bl	8004fd4 <usart_open>
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d103      	bne.n	8003628 <usart_drv_open+0x68>
		goto EXIT;
	}
	
	// 状態を更新
	this->status = ST_OPEN;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2202      	movs	r2, #2
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	e000      	b.n	800362a <usart_drv_open+0x6a>
		goto EXIT;
 8003628:	bf00      	nop
	
EXIT:
	return ercd;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000188 	.word	0x20000188
 8003638:	0800b864 	.word	0x0800b864
 800363c:	08003559 	.word	0x08003559
 8003640:	08003501 	.word	0x08003501
 8003644:	0800352d 	.word	0x0800352d

08003648 <usart_drv_send>:

// 送信
int32_t usart_drv_send(USART_DRV_DEV dev, uint8_t *p_data, uint32_t size, int32_t tmout)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	@ 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	61b9      	str	r1, [r7, #24]
 8003650:	617a      	str	r2, [r7, #20]
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	4603      	mov	r3, r0
 8003656:	77fb      	strb	r3, [r7, #31]
	USART_DRV_CB *this;
	const USART_DEV_INFO *p_info;
	uint32_t ercd;
	uint32_t cnt = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	62bb      	str	r3, [r7, #40]	@ 0x28
	
	// パラメータチェック
	if (dev >= USART_DRV_DEV_MAX) {
 800365c:	7ffb      	ldrb	r3, [r7, #31]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <usart_drv_send+0x20>
		return -1;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295
 8003666:	e057      	b.n	8003718 <usart_drv_send+0xd0>
	}
	if (p_data == NULL) {
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <usart_drv_send+0x2c>
		return -1;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
 8003672:	e051      	b.n	8003718 <usart_drv_send+0xd0>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 8003674:	7ffa      	ldrb	r2, [r7, #31]
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4a28      	ldr	r2, [pc, #160]	@ (8003720 <usart_drv_send+0xd8>)
 8003680:	4413      	add	r3, r2
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
	
	// クローズ状態でなければ終了
	if (this->status != ST_OPEN) {
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d002      	beq.n	8003692 <usart_drv_send+0x4a>
		return -1;
 800368c:	f04f 33ff 	mov.w	r3, #4294967295
 8003690:	e042      	b.n	8003718 <usart_drv_send+0xd0>
	}
	
	// タスク情報を取得
	this->snd_thread_id = osThreadGetId();
 8003692:	f004 f8d7 	bl	8007844 <osThreadGetId>
 8003696:	4602      	mov	r2, r0
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	605a      	str	r2, [r3, #4]
	
	// USART情報取得
	p_info = &usart_info_tbl[dev];
 800369c:	7ffa      	ldrb	r2, [r7, #31]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003724 <usart_drv_send+0xdc>)
 80036a8:	4413      	add	r3, r2
 80036aa:	623b      	str	r3, [r7, #32]
	
	while(1) {
		// 送信
		if ((ercd = usart_send(p_info->ch, p_data, size)) < 0) {
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	69b9      	ldr	r1, [r7, #24]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 fcd3 	bl	8005060 <usart_send>
 80036ba:	4603      	mov	r3, r0
 80036bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			goto EXIT;
		} else {
			// 送信できたサイズ分だけ更新
			p_data += ercd;
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c2:	4413      	add	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
			size -= ercd;
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	617b      	str	r3, [r7, #20]
			cnt += ercd;
 80036ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d2:	4413      	add	r3, r2
 80036d4:	62bb      	str	r3, [r7, #40]	@ 0x28
			
			// 全データ送信完了
			if (size == 0) {
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <usart_drv_send+0x9a>
				ercd = cnt;
 80036dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036de:	62fb      	str	r3, [r7, #44]	@ 0x2c
				break;
 80036e0:	e016      	b.n	8003710 <usart_drv_send+0xc8>
				
			// 送信を待たない
			} else if (tmout == 0) {
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <usart_drv_send+0xa6>
				ercd = cnt;
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
				break;
 80036ec:	e010      	b.n	8003710 <usart_drv_send+0xc8>
				
			// 全部送信できていないから待つ場合
			} else if (tmout > 0) {
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	dddb      	ble.n	80036ac <usart_drv_send+0x64>
				// いったんウェイト
				osSignalWait(UART_DRV_SEND_DONE, SLEEP_TIME);
 80036f4:	463b      	mov	r3, r7
 80036f6:	220a      	movs	r2, #10
 80036f8:	2101      	movs	r1, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 f976 	bl	80079ec <osSignalWait>
				tmout -= SLEEP_TIME;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	3b0a      	subs	r3, #10
 8003704:	613b      	str	r3, [r7, #16]
				// タイムアウト発生
				if (tmout < 0) {
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	dacf      	bge.n	80036ac <usart_drv_send+0x64>
					ercd = cnt;
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		
	}
	
EXIT:
	this->snd_thread_id = NULL;
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	2200      	movs	r2, #0
 8003714:	605a      	str	r2, [r3, #4]
	
	return ercd;
 8003716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003718:	4618      	mov	r0, r3
 800371a:	3730      	adds	r7, #48	@ 0x30
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000188 	.word	0x20000188
 8003724:	0800b864 	.word	0x0800b864

08003728 <usart_drv_recv>:

// 受信
int32_t usart_drv_recv(USART_DRV_DEV dev, uint8_t *p_data, uint32_t size, int32_t tmout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08c      	sub	sp, #48	@ 0x30
 800372c:	af00      	add	r7, sp, #0
 800372e:	61b9      	str	r1, [r7, #24]
 8003730:	617a      	str	r2, [r7, #20]
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	4603      	mov	r3, r0
 8003736:	77fb      	strb	r3, [r7, #31]
	USART_DRV_CB *this;
	const USART_DEV_INFO *p_info;
	uint32_t ercd;
	uint32_t cnt = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	62bb      	str	r3, [r7, #40]	@ 0x28
	
	// パラメータチェック
	if (dev >= USART_DRV_DEV_MAX) {
 800373c:	7ffb      	ldrb	r3, [r7, #31]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <usart_drv_recv+0x20>
		return -1;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	e057      	b.n	80037f8 <usart_drv_recv+0xd0>
	}
	if (p_data == NULL) {
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <usart_drv_recv+0x2c>
		return -1;
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
 8003752:	e051      	b.n	80037f8 <usart_drv_recv+0xd0>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 8003754:	7ffa      	ldrb	r2, [r7, #31]
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4a28      	ldr	r2, [pc, #160]	@ (8003800 <usart_drv_recv+0xd8>)
 8003760:	4413      	add	r3, r2
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
	
	// クローズ状態でなければ終了
	if (this->status != ST_OPEN) {
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d002      	beq.n	8003772 <usart_drv_recv+0x4a>
		return -1;
 800376c:	f04f 33ff 	mov.w	r3, #4294967295
 8003770:	e042      	b.n	80037f8 <usart_drv_recv+0xd0>
	}
	
	// タスク情報を取得
	this->rcv_thread_id = osThreadGetId();
 8003772:	f004 f867 	bl	8007844 <osThreadGetId>
 8003776:	4602      	mov	r2, r0
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	609a      	str	r2, [r3, #8]
	
	// USART情報取得
	p_info = &usart_info_tbl[dev];
 800377c:	7ffa      	ldrb	r2, [r7, #31]
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4a1f      	ldr	r2, [pc, #124]	@ (8003804 <usart_drv_recv+0xdc>)
 8003788:	4413      	add	r3, r2
 800378a:	623b      	str	r3, [r7, #32]
	
	while(1) {
		// 送信
		if ((ercd = usart_recv(p_info->ch, p_data, size)) < 0) {
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	69b9      	ldr	r1, [r7, #24]
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fccf 	bl	8005138 <usart_recv>
 800379a:	4603      	mov	r3, r0
 800379c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			goto EXIT;
		} else {
			// 受信できたサイズ分だけ更新
			p_data += ercd;
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a2:	4413      	add	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
			size -= ercd;
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	617b      	str	r3, [r7, #20]
			cnt += ercd;
 80037ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b2:	4413      	add	r3, r2
 80037b4:	62bb      	str	r3, [r7, #40]	@ 0x28
			
			// 全データ受信完了
			if (size == 0) {
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <usart_drv_recv+0x9a>
				ercd = cnt;
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c
				break;
 80037c0:	e016      	b.n	80037f0 <usart_drv_recv+0xc8>
				
			// 受信を待たない
			} else if (tmout == 0) {
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <usart_drv_recv+0xa6>
				ercd = cnt;
 80037c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
				break;
 80037cc:	e010      	b.n	80037f0 <usart_drv_recv+0xc8>
				
			// 全部送信できていないから待つ場合
			} else if (tmout > 0) {
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	dddb      	ble.n	800378c <usart_drv_recv+0x64>
				// いったんウェイト
				osSignalWait(UART_DRV_RECV_DONE, SLEEP_TIME);
 80037d4:	463b      	mov	r3, r7
 80037d6:	220a      	movs	r2, #10
 80037d8:	2102      	movs	r1, #2
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 f906 	bl	80079ec <osSignalWait>
				tmout -= SLEEP_TIME;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	3b0a      	subs	r3, #10
 80037e4:	613b      	str	r3, [r7, #16]
				// タイムアウト発生
				if (tmout < 0) {
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	dacf      	bge.n	800378c <usart_drv_recv+0x64>
					ercd = cnt;
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		
	}
	
EXIT:
	this->rcv_thread_id = NULL;
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
	
	return ercd;
 80037f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3730      	adds	r7, #48	@ 0x30
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000188 	.word	0x20000188
 8003804:	0800b864 	.word	0x0800b864

08003808 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4a07      	ldr	r2, [pc, #28]	@ (8003834 <vApplicationGetIdleTaskMemory+0x2c>)
 8003818:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4a06      	ldr	r2, [pc, #24]	@ (8003838 <vApplicationGetIdleTaskMemory+0x30>)
 800381e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2280      	movs	r2, #128	@ 0x80
 8003824:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000194 	.word	0x20000194
 8003838:	200001e8 	.word	0x200001e8

0800383c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a07      	ldr	r2, [pc, #28]	@ (8003868 <vApplicationGetTimerTaskMemory+0x2c>)
 800384c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4a06      	ldr	r2, [pc, #24]	@ (800386c <vApplicationGetTimerTaskMemory+0x30>)
 8003852:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800385a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	200003e8 	.word	0x200003e8
 800386c:	2000043c 	.word	0x2000043c

08003870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003870:	b5b0      	push	{r4, r5, r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i, size;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003876:	f000 f9f7 	bl	8003c68 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800387a:	f001 fce4 	bl	8005246 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800387e:	f000 f849 	bl	8003914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003882:	f000 f991 	bl	8003ba8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003886:	f000 f8b3 	bl	80039f0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800388a:	f000 f8ef 	bl	8003a6c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800388e:	f000 f92b 	bl	8003ae8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003892:	f000 f959 	bl	8003b48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	// 初期化
	size = sizeof(init_func)/sizeof(init_func[0]);
 8003896:	2309      	movs	r3, #9
 8003898:	77bb      	strb	r3, [r7, #30]
	for (i = 0; i < size; i++) {
 800389a:	2300      	movs	r3, #0
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e007      	b.n	80038b0 <main+0x40>
		init_func[i]();
 80038a0:	7ffb      	ldrb	r3, [r7, #31]
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <main+0x94>)
 80038a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a8:	4798      	blx	r3
	for (i = 0; i < size; i++) {
 80038aa:	7ffb      	ldrb	r3, [r7, #31]
 80038ac:	3301      	adds	r3, #1
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	7ffa      	ldrb	r2, [r7, #31]
 80038b2:	7fbb      	ldrb	r3, [r7, #30]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d3f3      	bcc.n	80038a0 <main+0x30>
	}
	// コマンド
	size = sizeof(cmd_func)/sizeof(cmd_func[0]);
 80038b8:	2303      	movs	r3, #3
 80038ba:	77bb      	strb	r3, [r7, #30]
	for (i = 0; i < size; i++) {
 80038bc:	2300      	movs	r3, #0
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e007      	b.n	80038d2 <main+0x62>
		cmd_func[i]();
 80038c2:	7ffb      	ldrb	r3, [r7, #31]
 80038c4:	4a10      	ldr	r2, [pc, #64]	@ (8003908 <main+0x98>)
 80038c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ca:	4798      	blx	r3
	for (i = 0; i < size; i++) {
 80038cc:	7ffb      	ldrb	r3, [r7, #31]
 80038ce:	3301      	adds	r3, #1
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	7ffa      	ldrb	r2, [r7, #31]
 80038d4:	7fbb      	ldrb	r3, [r7, #30]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d3f3      	bcc.n	80038c2 <main+0x52>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80038da:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <main+0x9c>)
 80038dc:	463c      	mov	r4, r7
 80038de:	461d      	mov	r5, r3
 80038e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80038ec:	463b      	mov	r3, r7
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f003 ff5b 	bl	80077ac <osThreadCreate>
 80038f6:	4603      	mov	r3, r0
 80038f8:	4a05      	ldr	r2, [pc, #20]	@ (8003910 <main+0xa0>)
 80038fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80038fc:	f003 ff4f 	bl	800779e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <main+0x90>
 8003904:	0800b870 	.word	0x0800b870
 8003908:	0800b894 	.word	0x0800b894
 800390c:	0800b70c 	.word	0x0800b70c
 8003910:	20000a14 	.word	0x20000a14

08003914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b094      	sub	sp, #80	@ 0x50
 8003918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800391a:	f107 031c 	add.w	r3, r7, #28
 800391e:	2234      	movs	r2, #52	@ 0x34
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f007 fb82 	bl	800b02c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003928:	f107 0308 	add.w	r3, r7, #8
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003938:	4b2b      	ldr	r3, [pc, #172]	@ (80039e8 <SystemClock_Config+0xd4>)
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	4a2a      	ldr	r2, [pc, #168]	@ (80039e8 <SystemClock_Config+0xd4>)
 800393e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003942:	6413      	str	r3, [r2, #64]	@ 0x40
 8003944:	4b28      	ldr	r3, [pc, #160]	@ (80039e8 <SystemClock_Config+0xd4>)
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003950:	4b26      	ldr	r3, [pc, #152]	@ (80039ec <SystemClock_Config+0xd8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a25      	ldr	r2, [pc, #148]	@ (80039ec <SystemClock_Config+0xd8>)
 8003956:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b23      	ldr	r3, [pc, #140]	@ (80039ec <SystemClock_Config+0xd8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003968:	2302      	movs	r3, #2
 800396a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800396c:	2301      	movs	r3, #1
 800396e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003970:	2310      	movs	r3, #16
 8003972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003974:	2302      	movs	r3, #2
 8003976:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003978:	2300      	movs	r3, #0
 800397a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800397c:	2308      	movs	r3, #8
 800397e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003980:	23d8      	movs	r3, #216	@ 0xd8
 8003982:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003984:	2302      	movs	r3, #2
 8003986:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003988:	2302      	movs	r3, #2
 800398a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800398c:	2302      	movs	r3, #2
 800398e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	4618      	mov	r0, r3
 8003996:	f002 f8a3 	bl	8005ae0 <HAL_RCC_OscConfig>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80039a0:	f000 f98e 	bl	8003cc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80039a4:	f002 f84c 	bl	8005a40 <HAL_PWREx_EnableOverDrive>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80039ae:	f000 f987 	bl	8003cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039b2:	230f      	movs	r3, #15
 80039b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039b6:	2302      	movs	r3, #2
 80039b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80039c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	2107      	movs	r1, #7
 80039d0:	4618      	mov	r0, r3
 80039d2:	f002 fb33 	bl	800603c <HAL_RCC_ClockConfig>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80039dc:	f000 f970 	bl	8003cc0 <Error_Handler>
  }
}
 80039e0:	bf00      	nop
 80039e2:	3750      	adds	r7, #80	@ 0x50
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40007000 	.word	0x40007000

080039f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a64 <MX_SPI1_Init+0x74>)
 80039f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a68 <MX_SPI1_Init+0x78>)
 80039f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003a64 <MX_SPI1_Init+0x74>)
 80039fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a02:	4b18      	ldr	r3, [pc, #96]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003a08:	4b16      	ldr	r3, [pc, #88]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a0a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003a0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a10:	4b14      	ldr	r3, [pc, #80]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a16:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a24:	4b0f      	ldr	r3, [pc, #60]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a30:	4b0c      	ldr	r3, [pc, #48]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a36:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003a3c:	4b09      	ldr	r3, [pc, #36]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a3e:	2207      	movs	r2, #7
 8003a40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a42:	4b08      	ldr	r3, [pc, #32]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a48:	4b06      	ldr	r3, [pc, #24]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a4e:	4805      	ldr	r0, [pc, #20]	@ (8003a64 <MX_SPI1_Init+0x74>)
 8003a50:	f003 f902 	bl	8006c58 <HAL_SPI_Init>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a5a:	f000 f931 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2000083c 	.word	0x2000083c
 8003a68:	40013000 	.word	0x40013000

08003a6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003a72:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae4 <MX_SPI2_Init+0x78>)
 8003a74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003a78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a7e:	4b18      	ldr	r3, [pc, #96]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a84:	4b16      	ldr	r3, [pc, #88]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003a86:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a8a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a92:	4b13      	ldr	r3, [pc, #76]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a98:	4b11      	ldr	r3, [pc, #68]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a9e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003aac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003ab8:	4b09      	ldr	r3, [pc, #36]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003aba:	2207      	movs	r2, #7
 8003abc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003abe:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003aca:	4805      	ldr	r0, [pc, #20]	@ (8003ae0 <MX_SPI2_Init+0x74>)
 8003acc:	f003 f8c4 	bl	8006c58 <HAL_SPI_Init>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003ad6:	f000 f8f3 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200008a0 	.word	0x200008a0
 8003ae4:	40003800 	.word	0x40003800

08003ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003aec:	4b14      	ldr	r3, [pc, #80]	@ (8003b40 <MX_USART1_UART_Init+0x58>)
 8003aee:	4a15      	ldr	r2, [pc, #84]	@ (8003b44 <MX_USART1_UART_Init+0x5c>)
 8003af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003af2:	4b13      	ldr	r3, [pc, #76]	@ (8003b40 <MX_USART1_UART_Init+0x58>)
 8003af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003afa:	4b11      	ldr	r3, [pc, #68]	@ (8003b40 <MX_USART1_UART_Init+0x58>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b00:	4b0f      	ldr	r3, [pc, #60]	@ (8003b40 <MX_USART1_UART_Init+0x58>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b06:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <MX_USART1_UART_Init+0x58>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b40 <MX_USART1_UART_Init+0x58>)
 8003b0e:	220c      	movs	r2, #12
 8003b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b12:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <MX_USART1_UART_Init+0x58>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b18:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <MX_USART1_UART_Init+0x58>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b1e:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <MX_USART1_UART_Init+0x58>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b24:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <MX_USART1_UART_Init+0x58>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b2a:	4805      	ldr	r0, [pc, #20]	@ (8003b40 <MX_USART1_UART_Init+0x58>)
 8003b2c:	f003 f93f 	bl	8006dae <HAL_UART_Init>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003b36:	f000 f8c3 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000904 	.word	0x20000904
 8003b44:	40011000 	.word	0x40011000

08003b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b4c:	4b14      	ldr	r3, [pc, #80]	@ (8003ba0 <MX_USART2_UART_Init+0x58>)
 8003b4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <MX_USART2_UART_Init+0x5c>)
 8003b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b52:	4b13      	ldr	r3, [pc, #76]	@ (8003ba0 <MX_USART2_UART_Init+0x58>)
 8003b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ba0 <MX_USART2_UART_Init+0x58>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <MX_USART2_UART_Init+0x58>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba0 <MX_USART2_UART_Init+0x58>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba0 <MX_USART2_UART_Init+0x58>)
 8003b6e:	220c      	movs	r2, #12
 8003b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <MX_USART2_UART_Init+0x58>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b78:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <MX_USART2_UART_Init+0x58>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ba0 <MX_USART2_UART_Init+0x58>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b84:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <MX_USART2_UART_Init+0x58>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b8a:	4805      	ldr	r0, [pc, #20]	@ (8003ba0 <MX_USART2_UART_Init+0x58>)
 8003b8c:	f003 f90f 	bl	8006dae <HAL_UART_Init>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003b96:	f000 f893 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	2000098c 	.word	0x2000098c
 8003ba4:	40004400 	.word	0x40004400

08003ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bae:	f107 030c 	add.w	r3, r7, #12
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	60da      	str	r2, [r3, #12]
 8003bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bbe:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <MX_GPIO_Init+0xa8>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	4a23      	ldr	r2, [pc, #140]	@ (8003c50 <MX_GPIO_Init+0xa8>)
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bca:	4b21      	ldr	r3, [pc, #132]	@ (8003c50 <MX_GPIO_Init+0xa8>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c50 <MX_GPIO_Init+0xa8>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	4a1d      	ldr	r2, [pc, #116]	@ (8003c50 <MX_GPIO_Init+0xa8>)
 8003bdc:	f043 0308 	orr.w	r3, r3, #8
 8003be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <MX_GPIO_Init+0xa8>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	607b      	str	r3, [r7, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bee:	4b18      	ldr	r3, [pc, #96]	@ (8003c50 <MX_GPIO_Init+0xa8>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	4a17      	ldr	r2, [pc, #92]	@ (8003c50 <MX_GPIO_Init+0xa8>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bfa:	4b15      	ldr	r3, [pc, #84]	@ (8003c50 <MX_GPIO_Init+0xa8>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8003c06:	2200      	movs	r2, #0
 8003c08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003c0c:	4811      	ldr	r0, [pc, #68]	@ (8003c54 <MX_GPIO_Init+0xac>)
 8003c0e:	f001 fec5 	bl	800599c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c24:	f107 030c 	add.w	r3, r7, #12
 8003c28:	4619      	mov	r1, r3
 8003c2a:	480a      	ldr	r0, [pc, #40]	@ (8003c54 <MX_GPIO_Init+0xac>)
 8003c2c:	f001 fcf2 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c30:	2301      	movs	r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4619      	mov	r1, r3
 8003c42:	4804      	ldr	r0, [pc, #16]	@ (8003c54 <MX_GPIO_Init+0xac>)
 8003c44:	f001 fce6 	bl	8005614 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c48:	bf00      	nop
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40020000 	.word	0x40020000

08003c58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003c60:	2001      	movs	r0, #1
 8003c62:	f003 fdf6 	bl	8007852 <osDelay>
 8003c66:	e7fb      	b.n	8003c60 <StartDefaultTask+0x8>

08003c68 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003c6e:	463b      	mov	r3, r7
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003c7a:	f001 fc53 	bl	8005524 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003c8a:	231f      	movs	r3, #31
 8003c8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003c8e:	2387      	movs	r3, #135	@ 0x87
 8003c90:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003c96:	2300      	movs	r3, #0
 8003c98:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003caa:	463b      	mov	r3, r7
 8003cac:	4618      	mov	r0, r3
 8003cae:	f001 fc71 	bl	8005594 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003cb2:	2004      	movs	r0, #4
 8003cb4:	f001 fc4e 	bl	8005554 <HAL_MPU_Enable>

}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc4:	b672      	cpsid	i
}
 8003cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <Error_Handler+0x8>

08003ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cd2:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	4a10      	ldr	r2, [pc, #64]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cde:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cea:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	4a0a      	ldr	r2, [pc, #40]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cf6:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d02:	2200      	movs	r2, #0
 8003d04:	210f      	movs	r1, #15
 8003d06:	f06f 0001 	mvn.w	r0, #1
 8003d0a:	f001 fbd4 	bl	80054b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800

08003d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08c      	sub	sp, #48	@ 0x30
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d24:	f107 031c 	add.w	r3, r7, #28
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a3d      	ldr	r2, [pc, #244]	@ (8003e30 <HAL_SPI_MspInit+0x114>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d128      	bne.n	8003d90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d42:	4a3c      	ldr	r2, [pc, #240]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003d44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d56:	4b37      	ldr	r3, [pc, #220]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	4a36      	ldr	r2, [pc, #216]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003d5c:	f043 0302 	orr.w	r3, r3, #2
 8003d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d62:	4b34      	ldr	r3, [pc, #208]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 8003d6e:	2338      	movs	r3, #56	@ 0x38
 8003d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d72:	2302      	movs	r3, #2
 8003d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d7e:	2305      	movs	r3, #5
 8003d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d82:	f107 031c 	add.w	r3, r7, #28
 8003d86:	4619      	mov	r1, r3
 8003d88:	482b      	ldr	r0, [pc, #172]	@ (8003e38 <HAL_SPI_MspInit+0x11c>)
 8003d8a:	f001 fc43 	bl	8005614 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003d8e:	e04a      	b.n	8003e26 <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a29      	ldr	r2, [pc, #164]	@ (8003e3c <HAL_SPI_MspInit+0x120>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d145      	bne.n	8003e26 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d9a:	4b26      	ldr	r3, [pc, #152]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	4a25      	ldr	r2, [pc, #148]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da6:	4b23      	ldr	r3, [pc, #140]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db2:	4b20      	ldr	r3, [pc, #128]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dca:	4b1a      	ldr	r3, [pc, #104]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	4a19      	ldr	r2, [pc, #100]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dd6:	4b17      	ldr	r3, [pc, #92]	@ (8003e34 <HAL_SPI_MspInit+0x118>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003de2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de8:	2302      	movs	r3, #2
 8003dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df0:	2303      	movs	r3, #3
 8003df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003df4:	2305      	movs	r3, #5
 8003df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df8:	f107 031c 	add.w	r3, r7, #28
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4810      	ldr	r0, [pc, #64]	@ (8003e40 <HAL_SPI_MspInit+0x124>)
 8003e00:	f001 fc08 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003e04:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e12:	2303      	movs	r3, #3
 8003e14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e16:	2305      	movs	r3, #5
 8003e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e1a:	f107 031c 	add.w	r3, r7, #28
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4805      	ldr	r0, [pc, #20]	@ (8003e38 <HAL_SPI_MspInit+0x11c>)
 8003e22:	f001 fbf7 	bl	8005614 <HAL_GPIO_Init>
}
 8003e26:	bf00      	nop
 8003e28:	3730      	adds	r7, #48	@ 0x30
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40013000 	.word	0x40013000
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40020400 	.word	0x40020400
 8003e3c:	40003800 	.word	0x40003800
 8003e40:	40020000 	.word	0x40020000

08003e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b0b0      	sub	sp, #192	@ 0xc0
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e5c:	f107 031c 	add.w	r3, r7, #28
 8003e60:	2290      	movs	r2, #144	@ 0x90
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f007 f8e1 	bl	800b02c <memset>
  if(huart->Instance==USART1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a42      	ldr	r2, [pc, #264]	@ (8003f78 <HAL_UART_MspInit+0x134>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d13c      	bne.n	8003eee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e74:	2340      	movs	r3, #64	@ 0x40
 8003e76:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e7c:	f107 031c 	add.w	r3, r7, #28
 8003e80:	4618      	mov	r0, r3
 8003e82:	f002 fac1 	bl	8006408 <HAL_RCCEx_PeriphCLKConfig>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003e8c:	f7ff ff18 	bl	8003cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e90:	4b3a      	ldr	r3, [pc, #232]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e94:	4a39      	ldr	r2, [pc, #228]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003e96:	f043 0310 	orr.w	r3, r3, #16
 8003e9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e9c:	4b37      	ldr	r3, [pc, #220]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea8:	4b34      	ldr	r3, [pc, #208]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eac:	4a33      	ldr	r2, [pc, #204]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eb4:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003ec0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eda:	2307      	movs	r3, #7
 8003edc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4826      	ldr	r0, [pc, #152]	@ (8003f80 <HAL_UART_MspInit+0x13c>)
 8003ee8:	f001 fb94 	bl	8005614 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003eec:	e03f      	b.n	8003f6e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a24      	ldr	r2, [pc, #144]	@ (8003f84 <HAL_UART_MspInit+0x140>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d13a      	bne.n	8003f6e <HAL_UART_MspInit+0x12a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ef8:	2380      	movs	r3, #128	@ 0x80
 8003efa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003efc:	2300      	movs	r3, #0
 8003efe:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f00:	f107 031c 	add.w	r3, r7, #28
 8003f04:	4618      	mov	r0, r3
 8003f06:	f002 fa7f 	bl	8006408 <HAL_RCCEx_PeriphCLKConfig>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003f10:	f7ff fed6 	bl	8003cc0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f14:	4b19      	ldr	r3, [pc, #100]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	4a18      	ldr	r2, [pc, #96]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f20:	4b16      	ldr	r3, [pc, #88]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f2c:	4b13      	ldr	r3, [pc, #76]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f30:	4a12      	ldr	r2, [pc, #72]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003f32:	f043 0308 	orr.w	r3, r3, #8
 8003f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f38:	4b10      	ldr	r3, [pc, #64]	@ (8003f7c <HAL_UART_MspInit+0x138>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8003f44:	2360      	movs	r3, #96	@ 0x60
 8003f46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f56:	2303      	movs	r3, #3
 8003f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f5c:	2307      	movs	r3, #7
 8003f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f62:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003f66:	4619      	mov	r1, r3
 8003f68:	4807      	ldr	r0, [pc, #28]	@ (8003f88 <HAL_UART_MspInit+0x144>)
 8003f6a:	f001 fb53 	bl	8005614 <HAL_GPIO_Init>
}
 8003f6e:	bf00      	nop
 8003f70:	37c0      	adds	r7, #192	@ 0xc0
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40011000 	.word	0x40011000
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40020000 	.word	0x40020000
 8003f84:	40004400 	.word	0x40004400
 8003f88:	40020c00 	.word	0x40020c00

08003f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f90:	bf00      	nop
 8003f92:	e7fd      	b.n	8003f90 <NMI_Handler+0x4>

08003f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f98:	bf00      	nop
 8003f9a:	e7fd      	b.n	8003f98 <HardFault_Handler+0x4>

08003f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fa0:	bf00      	nop
 8003fa2:	e7fd      	b.n	8003fa0 <MemManage_Handler+0x4>

08003fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fa8:	bf00      	nop
 8003faa:	e7fd      	b.n	8003fa8 <BusFault_Handler+0x4>

08003fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fb0:	bf00      	nop
 8003fb2:	e7fd      	b.n	8003fb0 <UsageFault_Handler+0x4>

08003fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fb8:	bf00      	nop
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fc6:	f001 f97b 	bl	80052c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003fca:	f005 fc73 	bl	80098b4 <xTaskGetSchedulerState>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d001      	beq.n	8003fd8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003fd4:	f006 fd10 	bl	800a9f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fd8:	bf00      	nop
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fe0:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <SystemInit+0x20>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe6:	4a05      	ldr	r2, [pc, #20]	@ (8003ffc <SystemInit+0x20>)
 8003fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <callback_timer>:
static void callback_timer( void const *arg);
osTimerDef(Timer, callback_timer);

// コールバック
static void callback_timer( void const *arg)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	CAN_MNG_CTL *this = get_myself();
 8004008:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <callback_timer+0x20>)
 800400a:	60fb      	str	r3, [r7, #12]
	
	// イベントセット
	osSignalSet(this->CanMngHandle, PERIODIC_EVENT);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2101      	movs	r1, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f003 fcaa 	bl	800796c <osSignalSet>
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000a90 	.word	0x20000a90

08004024 <mbox_rx_proc>:

// メールボックス 受信処理
static osStatus mbox_rx_proc(CAN_DRV_CH ch, uint32_t ret)
{
 8004024:	b590      	push	{r4, r7, lr}
 8004026:	b08f      	sub	sp, #60	@ 0x3c
 8004028:	af02      	add	r7, sp, #8
 800402a:	4603      	mov	r3, r0
 800402c:	6039      	str	r1, [r7, #0]
 800402e:	71fb      	strb	r3, [r7, #7]
	CAN_MNG_CTL *this = &can_mng_ctl;
 8004030:	4b38      	ldr	r3, [pc, #224]	@ (8004114 <mbox_rx_proc+0xf0>)
 8004032:	623b      	str	r3, [r7, #32]
	osStatus ercd;
	uint8_t data[8];
	uint8_t size;
	uint8_t i;
	
	p_ch_info = &ch_mbox_info[ch];
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4a37      	ldr	r2, [pc, #220]	@ (8004118 <mbox_rx_proc+0xf4>)
 800403a:	4413      	add	r3, r2
 800403c:	61fb      	str	r3, [r7, #28]
	// 受信したメールボックスからデータを取得
	for (mbox_idx = 0; mbox_idx < p_ch_info->mbox_num; mbox_idx++) {
 800403e:	2300      	movs	r3, #0
 8004040:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004044:	e05a      	b.n	80040fc <mbox_rx_proc+0xd8>
		// 受信あり
		if ((ret & (1UL << mbox_idx)) != 0) {
 8004046:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d04c      	beq.n	80040f2 <mbox_rx_proc+0xce>
			if ((ercd = can_drv_recv(ch, mbox_idx, &can_id, data, &size)) != osOK) {
 8004058:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800405c:	f107 040c 	add.w	r4, r7, #12
 8004060:	f107 0214 	add.w	r2, r7, #20
 8004064:	79f8      	ldrb	r0, [r7, #7]
 8004066:	f107 030b 	add.w	r3, r7, #11
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	4623      	mov	r3, r4
 800406e:	f7ff f8d9 	bl	8003224 <can_drv_recv>
 8004072:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	2b00      	cmp	r3, #0
 8004078:	d13a      	bne.n	80040f0 <mbox_rx_proc+0xcc>
				continue;
			}
			// コールバック処理
			for (i = 0; i < CAN_MNG_RECV_FRAME_MAX; i++) {
 800407a:	2300      	movs	r3, #0
 800407c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004080:	e031      	b.n	80040e6 <mbox_rx_proc+0xc2>
				// フレーム情報取得
				p_frame_info = &recv_frame_info_tbl[i];
 8004082:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4a23      	ldr	r2, [pc, #140]	@ (800411c <mbox_rx_proc+0xf8>)
 8004090:	4413      	add	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
				// コールバック呼び出し
				if ((can_id == p_frame_info->can_id) && (this->rcv_callback[i] != NULL)) {
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	429a      	cmp	r2, r3
 800409c:	d11e      	bne.n	80040dc <mbox_rx_proc+0xb8>
 800409e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	320e      	adds	r2, #14
 80040a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <mbox_rx_proc+0xb8>
					// コピー
					memcpy(p_frame_info->p_data, data, p_frame_info->size);
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	6958      	ldr	r0, [r3, #20]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	7c1b      	ldrb	r3, [r3, #16]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f107 030c 	add.w	r3, r7, #12
 80040bc:	4619      	mov	r1, r3
 80040be:	f006 fff5 	bl	800b0ac <memcpy>
					// 呼び出し
					this->rcv_callback[i](p_frame_info->p_data, p_frame_info->size);
 80040c2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	320e      	adds	r2, #14
 80040ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	6950      	ldr	r0, [r2, #20]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	7c12      	ldrb	r2, [r2, #16]
 80040d6:	4611      	mov	r1, r2
 80040d8:	4798      	blx	r3
					break;
 80040da:	e00a      	b.n	80040f2 <mbox_rx_proc+0xce>
			for (i = 0; i < CAN_MNG_RECV_FRAME_MAX; i++) {
 80040dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040e0:	3301      	adds	r3, #1
 80040e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80040e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d9c9      	bls.n	8004082 <mbox_rx_proc+0x5e>
 80040ee:	e000      	b.n	80040f2 <mbox_rx_proc+0xce>
				continue;
 80040f0:	bf00      	nop
	for (mbox_idx = 0; mbox_idx < p_ch_info->mbox_num; mbox_idx++) {
 80040f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80040f6:	3301      	adds	r3, #1
 80040f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004104:	429a      	cmp	r2, r3
 8004106:	d39e      	bcc.n	8004046 <mbox_rx_proc+0x22>
				}
			}
		}
	}
	
	return ercd;
 8004108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800410a:	4618      	mov	r0, r3
 800410c:	3734      	adds	r7, #52	@ 0x34
 800410e:	46bd      	mov	sp, r7
 8004110:	bd90      	pop	{r4, r7, pc}
 8004112:	bf00      	nop
 8004114:	20000a90 	.word	0x20000a90
 8004118:	0800bab0 	.word	0x0800bab0
 800411c:	0800b9d0 	.word	0x0800b9d0

08004120 <recv_func>:

// 受信処理
static void recv_func(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
	osStatus ercd;
	uint32_t ret = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
	CAN_DRV_CH ch;
	
	// 受信チェック
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
 800412e:	e01a      	b.n	8004166 <recv_func+0x46>
		// 受信チェック
		ercd = can_drv_rx_check(ch, &ret);
 8004130:	1d3a      	adds	r2, r7, #4
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff f832 	bl	80031a0 <can_drv_rx_check>
 800413c:	60b8      	str	r0, [r7, #8]
		if ((ercd != osOK) || (ret == 0)) {
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10c      	bne.n	800415e <recv_func+0x3e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <recv_func+0x3e>
			continue;
		}
		// メールボックス受信処理
		ercd = mbox_rx_proc(ch, ret);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	4611      	mov	r1, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ff67 	bl	8004024 <mbox_rx_proc>
 8004156:	60b8      	str	r0, [r7, #8]
		if (ercd != osOK) {
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	e000      	b.n	8004160 <recv_func+0x40>
			continue;
 800415e:	bf00      	nop
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	3301      	adds	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d9e1      	bls.n	8004130 <recv_func+0x10>
			continue;
		}
	}
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <send_func>:

// 送信処理
static void send_func(void)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b089      	sub	sp, #36	@ 0x24
 800417c:	af02      	add	r7, sp, #8
	CAN_MNG_CTL *this = &can_mng_ctl;
 800417e:	4b2c      	ldr	r3, [pc, #176]	@ (8004230 <send_func+0xb8>)
 8004180:	613b      	str	r3, [r7, #16]
	uint8_t send_frame[8];
	osStatus ercd;
	uint8_t i;
	
	// 全送信フレームチェック
	for (i = 0; i < CAN_MNG_SEND_FRAME_MAX; i++) {
 8004182:	2300      	movs	r3, #0
 8004184:	75fb      	strb	r3, [r7, #23]
 8004186:	e04a      	b.n	800421e <send_func+0xa6>
		// 送信情報取得
		p_s_info = &send_frame_info_tbl[i];
 8004188:	7dfa      	ldrb	r2, [r7, #23]
 800418a:	4613      	mov	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4a28      	ldr	r2, [pc, #160]	@ (8004234 <send_func+0xbc>)
 8004194:	4413      	add	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
		// バスオフなら送信しない
		if ((this->ch_state[p_s_info->ch] & CH_ST_BUSOFF_BMP) != 0) {
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d134      	bne.n	8004216 <send_func+0x9e>
			continue;
		}
		// 送信周期になった
		if (this->t[i]++ == p_s_info->period) {
 80041ac:	7dfa      	ldrb	r2, [r7, #23]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1d11      	adds	r1, r2, #4
 80041b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80041b6:	1c58      	adds	r0, r3, #1
 80041b8:	6939      	ldr	r1, [r7, #16]
 80041ba:	3204      	adds	r2, #4
 80041bc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	6912      	ldr	r2, [r2, #16]
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d127      	bne.n	8004218 <send_func+0xa0>
  __ASM volatile ("cpsid i" : : : "memory");
 80041c8:	b672      	cpsid	i
}
 80041ca:	bf00      	nop
			// いったん送信データを取得
			__disable_irq();
			memcpy(send_frame, p_s_info->p_data, sizeof(send_frame));
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	463b      	mov	r3, r7
 80041d2:	6810      	ldr	r0, [r2, #0]
 80041d4:	6851      	ldr	r1, [r2, #4]
 80041d6:	c303      	stmia	r3!, {r0, r1}
  __ASM volatile ("cpsie i" : : : "memory");
 80041d8:	b662      	cpsie	i
}
 80041da:	bf00      	nop
			__enable_irq();
			// 送信
			ercd = can_drv_send(p_s_info->ch, p_s_info->mbx_id, p_s_info->frame_type, p_s_info->can_id, send_frame, sizeof(send_frame));
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	7818      	ldrb	r0, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	7a1a      	ldrb	r2, [r3, #8]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	68dc      	ldr	r4, [r3, #12]
 80041ec:	2308      	movs	r3, #8
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	463b      	mov	r3, r7
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	4623      	mov	r3, r4
 80041f6:	f7fe ff81 	bl	80030fc <can_drv_send>
 80041fa:	60b8      	str	r0, [r7, #8]
			if (ercd != osOK) {
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <send_func+0x90>
				console_printf("send failed\n");
 8004202:	480d      	ldr	r0, [pc, #52]	@ (8004238 <send_func+0xc0>)
 8004204:	f7fd f896 	bl	8001334 <console_printf>
			}
			// クリア
			this->t[i] = 0;
 8004208:	7dfa      	ldrb	r2, [r7, #23]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	3204      	adds	r2, #4
 800420e:	2100      	movs	r1, #0
 8004210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004214:	e000      	b.n	8004218 <send_func+0xa0>
			continue;
 8004216:	bf00      	nop
	for (i = 0; i < CAN_MNG_SEND_FRAME_MAX; i++) {
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	3301      	adds	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	2b09      	cmp	r3, #9
 8004222:	d9b1      	bls.n	8004188 <send_func+0x10>
		}
	}
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	bd90      	pop	{r4, r7, pc}
 800422e:	bf00      	nop
 8004230:	20000a90 	.word	0x20000a90
 8004234:	0800b8b8 	.word	0x0800b8b8
 8004238:	0800b728 	.word	0x0800b728

0800423c <sts_update>:

// 状態更新処理
static void sts_update(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
	CAN_MNG_CTL *this = &can_mng_ctl;
 8004242:	4b2c      	ldr	r3, [pc, #176]	@ (80042f4 <sts_update+0xb8>)
 8004244:	60bb      	str	r3, [r7, #8]
	CAN_DRV_CH ch;
	osStatus ercd;
	uint32_t sts = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	603b      	str	r3, [r7, #0]
	
	// 全チャネルチェック
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	e049      	b.n	80042e4 <sts_update+0xa8>
		// 状態取得
		ercd = can_drv_get_status(ch, &sts);
 8004250:	463a      	mov	r2, r7
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff f834 	bl	80032c4 <can_drv_get_status>
 800425c:	6078      	str	r0, [r7, #4]
		if (ercd != osOK) {
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d13b      	bne.n	80042dc <sts_update+0xa0>
			continue;
		}
		// とりあえずバスオフチェックのみチェック
		// バスオフ発生
		if (((sts & CAN_COMMON_STS_RXOVER) != 0) && ((this->ch_state[ch] & CH_ST_RXERR_BMP) == 0)) {
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <sts_update+0x64>
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10f      	bne.n	80042a0 <sts_update+0x64>
			console_printf("busoff occur\n");
 8004280:	481d      	ldr	r0, [pc, #116]	@ (80042f8 <sts_update+0xbc>)
 8004282:	f7fd f857 	bl	8001334 <console_printf>
			this->ch_state[ch] |= CH_ST_BUSOFF_BMP;
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	f042 0204 	orr.w	r2, r2, #4
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	e01e      	b.n	80042de <sts_update+0xa2>
			
		// バスオフ復帰
		} else if (((sts & CAN_COMMON_STS_RXOVER) == 0) && ((this->ch_state[ch] & CH_ST_RXERR_BMP) != 0)) {
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d119      	bne.n	80042de <sts_update+0xa2>
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d010      	beq.n	80042de <sts_update+0xa2>
			console_printf("busoff recovery\n");
 80042bc:	480f      	ldr	r0, [pc, #60]	@ (80042fc <sts_update+0xc0>)
 80042be:	f7fd f839 	bl	8001334 <console_printf>
			this->ch_state[ch] &= ~CH_ST_BUSOFF_BMP;
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	f022 0204 	bic.w	r2, r2, #4
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	e000      	b.n	80042de <sts_update+0xa2>
			continue;
 80042dc:	bf00      	nop
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	3301      	adds	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d9b2      	bls.n	8004250 <sts_update+0x14>
		// その他
		} else {
			;
		}
	}
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000a90 	.word	0x20000a90
 80042f8:	0800b738 	.word	0x0800b738
 80042fc:	0800b748 	.word	0x0800b748

08004300 <periodic_func>:

// 周期処理
static void periodic_func(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
	CAN_MNG_CTL *this = get_myself();
 8004306:	4b08      	ldr	r3, [pc, #32]	@ (8004328 <periodic_func+0x28>)
 8004308:	607b      	str	r3, [r7, #4]
	
	// アクティブでないならエラー返して終了
	if (this->state != ST_ACTIVE) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d106      	bne.n	8004320 <periodic_func+0x20>
		return;
	}
	
	// 状態更新処理
	sts_update();
 8004312:	f7ff ff93 	bl	800423c <sts_update>
	
#ifdef RX_PERIOD_CHECK
	// 周期受信処理
	recv_func();
 8004316:	f7ff ff03 	bl	8004120 <recv_func>
#endif
	
	// 送信処理
	send_func();
 800431a:	f7ff ff2d 	bl	8004178 <send_func>
 800431e:	e000      	b.n	8004322 <periodic_func+0x22>
		return;
 8004320:	bf00      	nop
}
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000a90 	.word	0x20000a90

0800432c <active_func>:
// [メモ]
// CH毎にopenするということはあまりないのでactiveとする
// activeでデバイス、ドライバをすべてopenする
// また、メールボックスの設定もする
static void active_func(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
	CAN_MNG_CTL *this = get_myself();
 8004332:	4b26      	ldr	r3, [pc, #152]	@ (80043cc <active_func+0xa0>)
 8004334:	60fb      	str	r3, [r7, #12]
	osStatus ercd;
	CAN_DRV_CH ch;
	uint32_t i;
	
	// 初期化してなかったらエラー返して終了
	if (this->state != ST_INITIALIZED) {
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d142      	bne.n	80043c4 <active_func+0x98>
		return;
	}
	
	// 全ch
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
 8004342:	e032      	b.n	80043aa <active_func+0x7e>
		// オープン
		if ((ercd = can_drv_open(ch)) != osOK) {
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fd98 	bl	8002e7c <can_drv_open>
 800434c:	60b8      	str	r0, [r7, #8]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d131      	bne.n	80043b8 <active_func+0x8c>
			goto EXIT;
		}
		// 受信メールボックス設定
		p_ch_info = &ch_mbox_info[ch];
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4a1d      	ldr	r2, [pc, #116]	@ (80043d0 <active_func+0xa4>)
 800435a:	4413      	add	r3, r2
 800435c:	607b      	str	r3, [r7, #4]
		for (i = 0; i < p_ch_info->mbox_num; i++) {
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	e011      	b.n	8004388 <active_func+0x5c>
			// 受信メールボックス情報取得
			p_info = &(p_ch_info->p_mbox_info[i]);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	4413      	add	r3, r2
 800436e:	603b      	str	r3, [r7, #0]
			if ((ercd = can_drv_set_mailbox(ch, p_info)) != osOK) {
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	6839      	ldr	r1, [r7, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe fdc3 	bl	8002f00 <can_drv_set_mailbox>
 800437a:	60b8      	str	r0, [r7, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11c      	bne.n	80043bc <active_func+0x90>
		for (i = 0; i < p_ch_info->mbox_num; i++) {
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3301      	adds	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4293      	cmp	r3, r2
 8004392:	d3e7      	bcc.n	8004364 <active_func+0x38>
				goto EXIT;
			}
		}
		// 開始
		if ((ercd = can_drv_start(ch)) != osOK) {
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe fdf2 	bl	8002f80 <can_drv_start>
 800439c:	60b8      	str	r0, [r7, #8]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10d      	bne.n	80043c0 <active_func+0x94>
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	3301      	adds	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d9c9      	bls.n	8004344 <active_func+0x18>
			goto EXIT;
		}
	}
	
	// 状態更新
	this->state = ST_ACTIVE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2202      	movs	r2, #2
 80043b4:	601a      	str	r2, [r3, #0]
	
EXIT:
	return;
 80043b6:	e006      	b.n	80043c6 <active_func+0x9a>
			goto EXIT;
 80043b8:	bf00      	nop
 80043ba:	e004      	b.n	80043c6 <active_func+0x9a>
				goto EXIT;
 80043bc:	bf00      	nop
 80043be:	e002      	b.n	80043c6 <active_func+0x9a>
			goto EXIT;
 80043c0:	bf00      	nop
	return;
 80043c2:	e000      	b.n	80043c6 <active_func+0x9a>
		return;
 80043c4:	bf00      	nop
}
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000a90 	.word	0x20000a90
 80043d0:	0800bab0 	.word	0x0800bab0

080043d4 <inactive_func>:

// インアクティブ
static void inactive_func(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
	CAN_MNG_CTL *this = get_myself();
 80043da:	4b10      	ldr	r3, [pc, #64]	@ (800441c <inactive_func+0x48>)
 80043dc:	60bb      	str	r3, [r7, #8]
	osStatus ercd;
	CAN_DRV_CH ch;
	
	// アクティブでないならエラー返して終了
	if (this->state != ST_ACTIVE) {
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d116      	bne.n	8004414 <inactive_func+0x40>
		return;
	}
	
	// 全ch
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
 80043ea:	e00a      	b.n	8004402 <inactive_func+0x2e>
		// 開始
		if ((ercd = can_drv_stop(ch)) != osOK) {
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe fe06 	bl	8003000 <can_drv_stop>
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <inactive_func+0x3c>
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	3301      	adds	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d9f1      	bls.n	80043ec <inactive_func+0x18>
			goto EXIT;
		}
	}
	
	// 状態更新
	this->state = ST_INITIALIZED;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]
	
EXIT:
	return;
 800440e:	e002      	b.n	8004416 <inactive_func+0x42>
			goto EXIT;
 8004410:	bf00      	nop
	return;
 8004412:	e000      	b.n	8004416 <inactive_func+0x42>
		return;
 8004414:	bf00      	nop
}
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000a90 	.word	0x20000a90

08004420 <sleep_func>:

// スリープ
static void sleep_func(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
	CAN_MNG_CTL *this = get_myself();
 8004426:	4b1e      	ldr	r3, [pc, #120]	@ (80044a0 <sleep_func+0x80>)
 8004428:	60bb      	str	r3, [r7, #8]
	osStatus ercd;
	CAN_DRV_CH ch;
	const SLEEP_INFO *p_info;
	
	// アクティブでないならエラー返して終了
	if (this->state != ST_ACTIVE) {
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d005      	beq.n	800443e <sleep_func+0x1e>
		osSignalSet(this->sleep_req_tsk_id, SLEEP_SET_NG);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004436:	2102      	movs	r1, #2
 8004438:	4618      	mov	r0, r3
 800443a:	f003 fa97 	bl	800796c <osSignalSet>
	}
	
	// 全ch
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	e014      	b.n	800446e <sleep_func+0x4e>
		// スリープ情報取得
		p_info = &sleep_ch_tbl[ch];
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	4a17      	ldr	r2, [pc, #92]	@ (80044a4 <sleep_func+0x84>)
 8004448:	4413      	add	r3, r2
 800444a:	607b      	str	r3, [r7, #4]
		// スリープ対象でなければ次へ
		if (p_info->is_sleep == 0) {
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <sleep_func+0x46>
			continue;
		}
		// スリープ
		if ((ercd = can_drv_sleep(ch)) != osOK) {
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fe12 	bl	8003080 <can_drv_sleep>
 800445c:	6038      	str	r0, [r7, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d111      	bne.n	8004488 <sleep_func+0x68>
 8004464:	e000      	b.n	8004468 <sleep_func+0x48>
			continue;
 8004466:	bf00      	nop
	for (ch = 0; ch < CAN_DRV_CH_MAX; ch++) {
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	3301      	adds	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d9e7      	bls.n	8004444 <sleep_func+0x24>
			goto EXIT;
		}
	}
	
	// 状態更新
	this->state = ST_INITIALIZED;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]
	
	osSignalSet(this->sleep_req_tsk_id, SLEEP_SET_OK);
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447e:	2101      	movs	r1, #1
 8004480:	4618      	mov	r0, r3
 8004482:	f003 fa73 	bl	800796c <osSignalSet>
	return;
 8004486:	e007      	b.n	8004498 <sleep_func+0x78>
			goto EXIT;
 8004488:	bf00      	nop
	
EXIT:
	osSignalSet(this->sleep_req_tsk_id, SLEEP_SET_NG);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448e:	2102      	movs	r1, #2
 8004490:	4618      	mov	r0, r3
 8004492:	f003 fa6b 	bl	800796c <osSignalSet>
	return;
 8004496:	bf00      	nop
}
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000a90 	.word	0x20000a90
 80044a4:	0800baac 	.word	0x0800baac

080044a8 <CanMngTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTask */
static void CanMngTask(void const * argument)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	
	/* USER CODE BEGIN StartCanTask */
	/* Infinite loop */
	for(;;) {
		// イベント待機
		evt = osSignalWait(ALL_EVENT, osWaitForever);
 80044b0:	f107 030c 	add.w	r3, r7, #12
 80044b4:	f04f 32ff 	mov.w	r2, #4294967295
 80044b8:	211f      	movs	r1, #31
 80044ba:	4618      	mov	r0, r3
 80044bc:	f003 fa96 	bl	80079ec <osSignalWait>
		// イベント受信
		if (evt.status == osEventSignal) {
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d1f4      	bne.n	80044b0 <CanMngTask+0x8>
			// クリア
			//osSignalClear(this->CanMngHandle, evt.value.signals);
			// イベント関数テーブルのインデックスに変換
			for (evt_idx = 0; evt_idx < 32; evt_idx++) {
 80044c6:	2300      	movs	r3, #0
 80044c8:	77fb      	strb	r3, [r7, #31]
 80044ca:	e012      	b.n	80044f2 <CanMngTask+0x4a>
				if (((evt.value.signals) & (1UL << evt_idx)) != 0) {
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	461a      	mov	r2, r3
 80044d0:	7ffb      	ldrb	r3, [r7, #31]
 80044d2:	fa22 f303 	lsr.w	r3, r2, r3
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <CanMngTask+0x44>
					// イベント処理実行
					evt_func = event_func[evt_idx];
 80044de:	7ffb      	ldrb	r3, [r7, #31]
 80044e0:	4a06      	ldr	r2, [pc, #24]	@ (80044fc <CanMngTask+0x54>)
 80044e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e6:	61bb      	str	r3, [r7, #24]
					evt_func();
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	4798      	blx	r3
			for (evt_idx = 0; evt_idx < 32; evt_idx++) {
 80044ec:	7ffb      	ldrb	r3, [r7, #31]
 80044ee:	3301      	adds	r3, #1
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	7ffb      	ldrb	r3, [r7, #31]
 80044f4:	2b1f      	cmp	r3, #31
 80044f6:	d9e9      	bls.n	80044cc <CanMngTask+0x24>
		evt = osSignalWait(ALL_EVENT, osWaitForever);
 80044f8:	e7da      	b.n	80044b0 <CanMngTask+0x8>
 80044fa:	bf00      	nop
 80044fc:	0800bac8 	.word	0x0800bac8

08004500 <can_mng_init>:
	/* USER CODE END StartCanTask */
}

// 初期化
void can_mng_init(void)
{
 8004500:	b5b0      	push	{r4, r5, r7, lr}
 8004502:	b08a      	sub	sp, #40	@ 0x28
 8004504:	af00      	add	r7, sp, #0
	CAN_MNG_CTL *this = get_myself();
 8004506:	4b14      	ldr	r3, [pc, #80]	@ (8004558 <can_mng_init+0x58>)
 8004508:	627b      	str	r3, [r7, #36]	@ 0x24
	osTimerId id;
	
	// コンテキスト初期化
	memset(this, 0, sizeof(CAN_MNG_CTL));
 800450a:	2250      	movs	r2, #80	@ 0x50
 800450c:	2100      	movs	r1, #0
 800450e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004510:	f006 fd8c 	bl	800b02c <memset>

	// タスク生成
	osThreadDef(CanMng, CanMngTask, osPriorityLow, 0, 1024);
 8004514:	4b11      	ldr	r3, [pc, #68]	@ (800455c <can_mng_init+0x5c>)
 8004516:	1d3c      	adds	r4, r7, #4
 8004518:	461d      	mov	r5, r3
 800451a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800451c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800451e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	this->CanMngHandle = osThreadCreate(osThread(CanMng), NULL);
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f003 f93e 	bl	80077ac <osThreadCreate>
 8004530:	4602      	mov	r2, r0
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	60da      	str	r2, [r3, #12]

	// タイマ作成
	id = osTimerCreate(osTimer(Timer), osTimerPeriodic, NULL);
 8004536:	2200      	movs	r2, #0
 8004538:	2101      	movs	r1, #1
 800453a:	4809      	ldr	r0, [pc, #36]	@ (8004560 <can_mng_init+0x60>)
 800453c:	f003 f99e 	bl	800787c <osTimerCreate>
 8004540:	6238      	str	r0, [r7, #32]

	// タイマ開始
	osTimerStart(id, CTRL_PERIOD);
 8004542:	2164      	movs	r1, #100	@ 0x64
 8004544:	6a38      	ldr	r0, [r7, #32]
 8004546:	f003 f9cd 	bl	80078e4 <osTimerStart>

	// 状態更新
	this->state = ST_INITIALIZED;
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	2201      	movs	r2, #1
 800454e:	601a      	str	r2, [r3, #0]
	
}
 8004550:	bf00      	nop
 8004552:	3728      	adds	r7, #40	@ 0x28
 8004554:	46bd      	mov	sp, r7
 8004556:	bdb0      	pop	{r4, r5, r7, pc}
 8004558:	20000a90 	.word	0x20000a90
 800455c:	0800b764 	.word	0x0800b764
 8004560:	0800bac0 	.word	0x0800bac0

08004564 <can_mng_active>:
// [メモ]
// CH毎にopenするということはあまりないのでactiveとする
// activeでデバイス、ドライバをすべてopenする
// また、メールボックスの設定もする
osStatus can_mng_active(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
	CAN_MNG_CTL *this = get_myself();
 800456a:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <can_mng_active+0x20>)
 800456c:	607b      	str	r3, [r7, #4]
	
	// イベントセット
	return osSignalSet(this->CanMngHandle, ACTIVE_EVENT);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	2104      	movs	r1, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f003 f9f9 	bl	800796c <osSignalSet>
 800457a:	4603      	mov	r3, r0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20000a90 	.word	0x20000a90

08004588 <can_mng_sleep>:
}

// スリープ
// 一つしかスリープ要求タスクIDを覚えられないため、複数個所から呼ばないこと
osStatus can_mng_sleep(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
	CAN_MNG_CTL *this = get_myself();
 800458e:	4b12      	ldr	r3, [pc, #72]	@ (80045d8 <can_mng_sleep+0x50>)
 8004590:	613b      	str	r3, [r7, #16]
	osStatus ercd = osErrorParameter;
 8004592:	2380      	movs	r3, #128	@ 0x80
 8004594:	617b      	str	r3, [r7, #20]
	osEvent evt;
	
		// タスクID取得
	this->sleep_req_tsk_id = osThreadGetId();
 8004596:	f003 f955 	bl	8007844 <osThreadGetId>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	64da      	str	r2, [r3, #76]	@ 0x4c
	
	// イベントセット
	osSignalSet(this->CanMngHandle, SLEEP_EVENT);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2110      	movs	r1, #16
 80045a6:	4618      	mov	r0, r3
 80045a8:	f003 f9e0 	bl	800796c <osSignalSet>
	
	// スリープ設定待ち
	evt = osSignalWait(SLEEP_SET_OK|SLEEP_SET_NG, osWaitForever);
 80045ac:	1d3b      	adds	r3, r7, #4
 80045ae:	f04f 32ff 	mov.w	r2, #4294967295
 80045b2:	2103      	movs	r1, #3
 80045b4:	4618      	mov	r0, r3
 80045b6:	f003 fa19 	bl	80079ec <osSignalWait>
	if (evt.status == osEventSignal) {
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d106      	bne.n	80045ce <can_mng_sleep+0x46>
		// 設定完了
		if ((evt.value.signals & SLEEP_SET_OK) != 0) {
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <can_mng_sleep+0x46>
			ercd = osOK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
		}
	}
	
	return ercd;
 80045ce:	697b      	ldr	r3, [r7, #20]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20000a90 	.word	0x20000a90

080045dc <can_mng_get_send_data>:
}

// 送信フレームのデータを取得
// 割込み禁止して呼ぶこと
uint8_t *can_mng_get_send_data(uint32_t frame_type)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	const SEND_FRAME_INFO *p_info;

	// パラメータチェック
	if (frame_type >= CAN_MNG_RECV_FRAME_MAX) {
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d901      	bls.n	80045ee <can_mng_get_send_data+0x12>
		return NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e009      	b.n	8004602 <can_mng_get_send_data+0x26>
	}

	// 受信フレーム取得
	p_info = &send_frame_info_tbl[frame_type];
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4a05      	ldr	r2, [pc, #20]	@ (8004610 <can_mng_get_send_data+0x34>)
 80045fa:	4413      	add	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

	return p_info->p_data;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	0800b8b8 	.word	0x0800b8b8

08004614 <can_mng_reg_recv_callback>:

// 受信コールバック関数登録
osStatus can_mng_reg_recv_callback(uint32_t frame_type, CAN_MNG_RECV_CALLBACK callback)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	CAN_MNG_CTL *this = &can_mng_ctl;
 800461e:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <can_mng_reg_recv_callback+0x38>)
 8004620:	60fb      	str	r3, [r7, #12]

	// パラメータチェック
	if ((frame_type >= CAN_MNG_RECV_FRAME_MAX) ||
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d802      	bhi.n	800462e <can_mng_reg_recv_callback+0x1a>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <can_mng_reg_recv_callback+0x1e>
		(callback == NULL)) {
		return osErrorParameter;
 800462e:	2380      	movs	r3, #128	@ 0x80
 8004630:	e006      	b.n	8004640 <can_mng_reg_recv_callback+0x2c>
	}

	// コールバック登録
	this->rcv_callback[frame_type] = callback;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	320e      	adds	r2, #14
 8004638:	6839      	ldr	r1, [r7, #0]
 800463a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return osOK;
 800463e:	2300      	movs	r3, #0
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	20000a90 	.word	0x20000a90

08004650 <can_open>:

#include "can.h"

// オープン関数
osStatus can_open(CAN_CH ch, uint32_t bit_rate)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	6039      	str	r1, [r7, #0]
 800465a:	71fb      	strb	r3, [r7, #7]
	return osOK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <can_set_mailbox>:

// メールボックス設定
osStatus can_set_mailbox(CAN_CH ch, CAN_COMMON_RX_MAILBOX_INFO *mailbox_info)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	4603      	mov	r3, r0
 8004672:	6039      	str	r1, [r7, #0]
 8004674:	71fb      	strb	r3, [r7, #7]
	return osOK;
 8004676:	2300      	movs	r3, #0
	
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <can_start>:

// 開始関数
osStatus can_start(CAN_CH ch)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
	return osOK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <can_stop>:

// 停止関数
osStatus can_stop(CAN_CH ch)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	71fb      	strb	r3, [r7, #7]
	return osOK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <can_sleep>:

// スリープ関数
osStatus can_sleep(CAN_CH ch)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
	return osOK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <can_send>:

// 送信関数
osStatus can_send(CAN_CH ch, uint32_t mbx_id, CAN_COMMON_FRAME_TYPE frame_type, uint32_t can_id, uint8_t *data, uint8_t size)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	4603      	mov	r3, r0
 80046d8:	73fb      	strb	r3, [r7, #15]
 80046da:	4613      	mov	r3, r2
 80046dc:	73bb      	strb	r3, [r7, #14]
	return osOK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <can_rx_check>:

// 受信データチェック
osStatus can_rx_check(CAN_CH ch, uint8_t *p_ret)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	6039      	str	r1, [r7, #0]
 80046f6:	71fb      	strb	r3, [r7, #7]
	return osOK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <can_recv>:

// 受信関数
osStatus can_recv(CAN_CH ch, uint32_t mbx_id, uint32_t *p_can_id, uint8_t *p_data, uint8_t *p_size)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4603      	mov	r3, r0
 8004714:	73fb      	strb	r3, [r7, #15]
	return osOK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <can_get_status>:

// 状態取得関数
osStatus can_get_status(CAN_CH ch, uint32_t *p_sts)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	6039      	str	r1, [r7, #0]
 800472e:	71fb      	strb	r3, [r7, #7]
	return osOK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <spi_common_handler>:
#define assert_nss(ch)	HAL_GPIO_WritePin(ch_info_tbl[ch].nss_gpio_info.p_gpio_grp,ch_info_tbl[ch].nss_gpio_info.pin,GPIO_PIN_RESET)
#define negate_nss(ch)	HAL_GPIO_WritePin(ch_info_tbl[ch].nss_gpio_info.p_gpio_grp,ch_info_tbl[ch].nss_gpio_info.pin,GPIO_PIN_SET)

// 共通割り込み処理
void spi_common_handler(SPI_CH ch)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
	SPI_CB *this = get_myself(ch);
 800474a:	79fa      	ldrb	r2, [r7, #7]
 800474c:	4613      	mov	r3, r2
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4413      	add	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4a48      	ldr	r2, [pc, #288]	@ (8004878 <spi_common_handler+0x138>)
 8004756:	4413      	add	r3, r2
 8004758:	617b      	str	r3, [r7, #20]
	uint16_t status;
	uint16_t cr2;
	uint8_t dummy_data;
	
	// ベースレジスタ取得
	p_reg = get_reg(ch);
 800475a:	79fa      	ldrb	r2, [r7, #7]
 800475c:	4947      	ldr	r1, [pc, #284]	@ (800487c <spi_common_handler+0x13c>)
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	613b      	str	r3, [r7, #16]
	
	// ステータス取得
	status = p_reg->SR;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	81fb      	strh	r3, [r7, #14]
	
	// エラー処理
	if (status & ( SPI_SR_MODF | SPI_SR_OVR )) {
 8004772:	89fb      	ldrh	r3, [r7, #14]
 8004774:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004778:	2b00      	cmp	r3, #0
 800477a:	d006      	beq.n	800478a <spi_common_handler+0x4a>
		// 送受信失敗
		osSignalSet(this->id, SEND_RESULT_NG);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2102      	movs	r1, #2
 8004782:	4618      	mov	r0, r3
 8004784:	f003 f8f2 	bl	800796c <osSignalSet>
		return;
 8004788:	e072      	b.n	8004870 <spi_common_handler+0x130>
	}
	
	// CR2レジスタ値取得
	cr2 = p_reg->CR2;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	81bb      	strh	r3, [r7, #12]
	
	// 受信処理
	if (((cr2 & SPI_CR2_RXNEIE) != 0)&&((status & SPI_SR_RXNE) != 0)) {
 8004790:	89bb      	ldrh	r3, [r7, #12]
 8004792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d023      	beq.n	80047e2 <spi_common_handler+0xa2>
 800479a:	89fb      	ldrh	r3, [r7, #14]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01e      	beq.n	80047e2 <spi_common_handler+0xa2>
		// データ受信
		dummy_data = (uint8_t)(p_reg->DR);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	72fb      	strb	r3, [r7, #11]
		// データ送信時にダミーデータを受信してしまうため読み捨てる
		if (this->rcv_sz != 0) {
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d010      	beq.n	80047d4 <spi_common_handler+0x94>
			// 受信バッファが用意されているならセット
			if (this->p_rcv_data != NULL) {
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <spi_common_handler+0x88>
				*(this->p_rcv_data++) = dummy_data;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	1c59      	adds	r1, r3, #1
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	60d1      	str	r1, [r2, #12]
 80047c4:	7afa      	ldrb	r2, [r7, #11]
 80047c6:	701a      	strb	r2, [r3, #0]
			}
			this->rcv_sz--;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	1e5a      	subs	r2, r3, #1
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	615a      	str	r2, [r3, #20]
 80047d2:	e006      	b.n	80047e2 <spi_common_handler+0xa2>
			
		// もう全部受信した
		} else {
			// 受信割り込み禁止
			clr_bit_t(uint16_t, p_reg->CR2, SPI_CR2_RXNEIE_Pos);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 80047dc:	4013      	ands	r3, r2
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	6053      	str	r3, [r2, #4]
		}
		
	}
	
	// 送信処理
	if (((cr2 & SPI_CR2_TXEIE) != 0)&&((status & SPI_SR_TXE) != 0)) {
 80047e2:	89bb      	ldrh	r3, [r7, #12]
 80047e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01e      	beq.n	800482a <spi_common_handler+0xea>
 80047ec:	89fb      	ldrh	r3, [r7, #14]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d019      	beq.n	800482a <spi_common_handler+0xea>
		// まだ送信データがある？
		if (this->snd_sz != 0) {
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00e      	beq.n	800481c <spi_common_handler+0xdc>
			// データ送信
			//*((uint8_t*)(p_reg->DR)) = *(this->p_snd_data++);
			*((uint8_t*)&(p_reg->DR)) = *(this->p_snd_data++);
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	1c59      	adds	r1, r3, #1
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	6091      	str	r1, [r2, #8]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	320c      	adds	r2, #12
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	7013      	strb	r3, [r2, #0]
			this->snd_sz--;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	1e5a      	subs	r2, r3, #1
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	611a      	str	r2, [r3, #16]
 800481a:	e006      	b.n	800482a <spi_common_handler+0xea>
			
		// もう送信データはない？
		} else {
			// 送信割込み禁止
			clr_bit_t(uint16_t, p_reg->CR2, SPI_CR2_TXEIE_Pos);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8004824:	4013      	ands	r3, r2
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	6053      	str	r3, [r2, #4]
			
		}
	}
	// 送受信全部終わった
	if ((this->snd_sz == 0) && (this->rcv_sz == 0)) {
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d11e      	bne.n	8004870 <spi_common_handler+0x130>
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11a      	bne.n	8004870 <spi_common_handler+0x130>
		// 一応送受信割込み禁止
		clr_bit_t(uint16_t, p_reg->CR2, SPI_CR2_TXEIE_Pos);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8004842:	4013      	ands	r3, r2
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	6053      	str	r3, [r2, #4]
		clr_bit_t(uint16_t, p_reg->CR2, SPI_CR2_RXNEIE_Pos);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 8004850:	4013      	ands	r3, r2
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	6053      	str	r3, [r2, #4]
		// エラー割込みも
		clr_bit_t(uint16_t, p_reg->CR2, SPI_CR2_ERRIE_Pos);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 800485e:	4013      	ands	r3, r2
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	6053      	str	r3, [r2, #4]
		// 送受信完了
		osSignalSet(this->id, SEND_RESULT_OK);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2101      	movs	r1, #1
 800486a:	4618      	mov	r0, r3
 800486c:	f003 f87e 	bl	800796c <osSignalSet>
		
	}
}
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000ae0 	.word	0x20000ae0
 800487c:	0800badc 	.word	0x0800badc

08004880 <SPI2_IRQHandler>:
//void SPI1_IRQHandler(void)
//{
//	spi_common_handler(SPI_CH_1);
//}
void SPI2_IRQHandler(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
	spi_common_handler(SPI_CH_2);
 8004884:	2000      	movs	r0, #0
 8004886:	f7ff ff5b 	bl	8004740 <spi_common_handler>
}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <calc_br>:
//	spi_common_handler(SPI_CH_4);
//}

// 指定したボーレートからレジスタ設定値を計算する関数
static uint32_t calc_br(SPI_CH ch, uint32_t baudrate)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	71fb      	strb	r3, [r7, #7]
	uint8_t power_of_2;
	uint8_t i;
	uint8_t br;
	
	// SPIクロック取得(*)APB1は45Mhz
	spi_clk = 54*1000*1000;
 800489c:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <calc_br+0x58>)
 800489e:	613b      	str	r3, [r7, #16]
	
	// BR値を計算
	for(i = 0; i < 8; i++) {
 80048a0:	2300      	movs	r3, #0
 80048a2:	75fb      	strb	r3, [r7, #23]
 80048a4:	e00e      	b.n	80048c4 <calc_br+0x34>
		power_of_2 = (1 << i);
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
 80048a8:	2201      	movs	r2, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	73fb      	strb	r3, [r7, #15]
		if ((spi_clk/power_of_2) < baudrate) {
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d806      	bhi.n	80048cc <calc_br+0x3c>
	for(i = 0; i < 8; i++) {
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	3301      	adds	r3, #1
 80048c2:	75fb      	strb	r3, [r7, #23]
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	2b07      	cmp	r3, #7
 80048c8:	d9ed      	bls.n	80048a6 <calc_br+0x16>
 80048ca:	e000      	b.n	80048ce <calc_br+0x3e>
			break;
 80048cc:	bf00      	nop
		}
	}
	
	// br値を計算
	if (i > 0) {
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <calc_br+0x4a>
		br = i - 1;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	75bb      	strb	r3, [r7, #22]
	}
	
	return br;
 80048da:	7dbb      	ldrb	r3, [r7, #22]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	0337f980 	.word	0x0337f980

080048ec <spi_config>:

// コンフィグ
static osStatus spi_config(SPI_CH ch, SPI_PAR *p_par)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	6039      	str	r1, [r7, #0]
 80048f6:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *p_reg;
	uint16_t br = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	81fb      	strh	r3, [r7, #14]
	
	// パラメータチェック
	if ((p_par->cpol >= SPI_CPOL_MAX)		||	// 長さチェック
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	791b      	ldrb	r3, [r3, #4]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d80b      	bhi.n	800491c <spi_config+0x30>
		(p_par->cpha >= SPI_CPHA_MAX)		||	// ストップビットチェック
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	795b      	ldrb	r3, [r3, #5]
	if ((p_par->cpol >= SPI_CPOL_MAX)		||	// 長さチェック
 8004908:	2b01      	cmp	r3, #1
 800490a:	d807      	bhi.n	800491c <spi_config+0x30>
		(p_par->fmt  >= SPI_FRAME_FMT_MAX)	||	// パリティチェック
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	799b      	ldrb	r3, [r3, #6]
		(p_par->cpha >= SPI_CPHA_MAX)		||	// ストップビットチェック
 8004910:	2b01      	cmp	r3, #1
 8004912:	d803      	bhi.n	800491c <spi_config+0x30>
		(p_par->size >= SPI_DATA_SIZE_MAX)) {		// パリティチェック
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	79db      	ldrb	r3, [r3, #7]
		(p_par->fmt  >= SPI_FRAME_FMT_MAX)	||	// パリティチェック
 8004918:	2b0f      	cmp	r3, #15
 800491a:	d901      	bls.n	8004920 <spi_config+0x34>
		return osErrorParameter;
 800491c:	2380      	movs	r3, #128	@ 0x80
 800491e:	e076      	b.n	8004a0e <spi_config+0x122>
	}
	
	// ベースレジスタ取得
	p_reg = get_reg(ch);
 8004920:	79fa      	ldrb	r2, [r7, #7]
 8004922:	493d      	ldr	r1, [pc, #244]	@ (8004a18 <spi_config+0x12c>)
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60bb      	str	r3, [r7, #8]
	
	// ビットレートを設定
	br = calc_br(ch, p_par->bps);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff ffa8 	bl	8004890 <calc_br>
 8004940:	4603      	mov	r3, r0
 8004942:	81fb      	strh	r3, [r7, #14]
	set_field_t(uint16_t, p_reg->CR1, SPI_CR1_BR, br);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	b21b      	sxth	r3, r3
 800494a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800494e:	b21a      	sxth	r2, r3
 8004950:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	b21b      	sxth	r3, r3
 8004958:	4313      	orrs	r3, r2
 800495a:	b21b      	sxth	r3, r3
 800495c:	b29b      	uxth	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	601a      	str	r2, [r3, #0]
	// 極性を設定
	if (p_par->cpol != 0) {
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	791b      	ldrb	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <spi_config+0x8c>
		set_bit_t(uint16_t, p_reg->CR1, SPI_CR1_CPOL_Pos);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f043 0202 	orr.w	r2, r3, #2
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	601a      	str	r2, [r3, #0]
	}
	if (p_par->cpha != 0) {
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	795b      	ldrb	r3, [r3, #5]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <spi_config+0xa0>
		set_bit_t(uint16_t, p_reg->CR1, SPI_CR1_CPHA_Pos);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f043 0201 	orr.w	r2, r3, #1
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	601a      	str	r2, [r3, #0]
	}
	// フォーマットを設定
	if (p_par->fmt != 0) {
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	799b      	ldrb	r3, [r3, #6]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <spi_config+0xb4>
		set_bit_t(uint16_t, p_reg->CR1, SPI_CR1_LSBFIRST_Pos);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	601a      	str	r2, [r3, #0]
	}
	
	// NSSピンの設定(*)NSSはGPIOで制御
	set_bit_t(uint16_t, p_reg->CR1, SPI_CR1_SSM_Pos);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	601a      	str	r2, [r3, #0]
	set_bit_t(uint16_t, p_reg->CR1, SPI_CR1_SSI_Pos);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	601a      	str	r2, [r3, #0]
	// マスターに設定
	set_bit_t(uint16_t, p_reg->CR1, SPI_CR1_MSTR_Pos);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f043 0204 	orr.w	r2, r3, #4
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	601a      	str	r2, [r3, #0]
	
	// 割り込み有効
    HAL_NVIC_SetPriority(get_irqn(ch), get_pri(ch), 0);
 80049c4:	79fa      	ldrb	r2, [r7, #7]
 80049c6:	4914      	ldr	r1, [pc, #80]	@ (8004a18 <spi_config+0x12c>)
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	3304      	adds	r3, #4
 80049d4:	f993 0000 	ldrsb.w	r0, [r3]
 80049d8:	79fa      	ldrb	r2, [r7, #7]
 80049da:	490f      	ldr	r1, [pc, #60]	@ (8004a18 <spi_config+0x12c>)
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	3308      	adds	r3, #8
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2200      	movs	r2, #0
 80049ec:	4619      	mov	r1, r3
 80049ee:	f000 fd62 	bl	80054b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(get_irqn(ch));
 80049f2:	79fa      	ldrb	r2, [r7, #7]
 80049f4:	4908      	ldr	r1, [pc, #32]	@ (8004a18 <spi_config+0x12c>)
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	3304      	adds	r3, #4
 8004a02:	f993 3000 	ldrsb.w	r3, [r3]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fd71 	bl	80054ee <HAL_NVIC_EnableIRQ>
	
	return osOK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	0800badc 	.word	0x0800badc

08004a1c <spi_enable>:

// SPE有効化
static void spi_enable(SPI_TypeDef *p_reg)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	// SPI有効
	set_bit_t(uint16_t, p_reg->CR1, SPI_CR1_SPE_Pos);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	601a      	str	r2, [r3, #0]
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <spi_disable>:

// SPE無効化
static void spi_disable(SPI_TypeDef *p_reg)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	uint16_t status;
	uint8_t t;
	uint8_t timeout = 100; // [ms]
 8004a44:	2364      	movs	r3, #100	@ 0x64
 8004a46:	73bb      	strb	r3, [r7, #14]
	
	// ステータス取得
	status = p_reg->SR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	81bb      	strh	r3, [r7, #12]
	
	// BUSYじゃなくなるまで待つ
	// (*) まあタイムアウトなんて起きないでしょう
	while ((status & SPI_SR_BSY) != 0) {
 8004a4e:	e008      	b.n	8004a62 <spi_disable+0x26>
		// タイムアウト発生
		if (t++ > timeout) {
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	73fa      	strb	r2, [r7, #15]
 8004a56:	7bba      	ldrb	r2, [r7, #14]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d308      	bcc.n	8004a6e <spi_disable+0x32>
			break;
		}
		// 1ms待機
		osDelay(1);
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f002 fef8 	bl	8007852 <osDelay>
	while ((status & SPI_SR_BSY) != 0) {
 8004a62:	89bb      	ldrh	r3, [r7, #12]
 8004a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f1      	bne.n	8004a50 <spi_disable+0x14>
 8004a6c:	e000      	b.n	8004a70 <spi_disable+0x34>
			break;
 8004a6e:	bf00      	nop
	};
	
	// SPI有効
	clr_bit_t(uint16_t, p_reg->CR1, SPI_CR1_SPE_Pos);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 8004a78:	4013      	ands	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6013      	str	r3, [r2, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <spi_init>:

// 初期化
osStatus spi_init(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
	SPI_CB *this;
	SPI_CH ch;
	
	for (ch = 0; ch < SPI_CH_MAX; ch++) {
 8004a8e:	2300      	movs	r3, #0
 8004a90:	71fb      	strb	r3, [r7, #7]
 8004a92:	e012      	b.n	8004aba <spi_init+0x32>
		// 制御ブロックの取得
		this = get_myself(ch);
 8004a94:	79fa      	ldrb	r2, [r7, #7]
 8004a96:	4613      	mov	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8004acc <spi_init+0x44>)
 8004aa0:	4413      	add	r3, r2
 8004aa2:	603b      	str	r3, [r7, #0]
		// 制御ブロックのクリア
		memset(this, 0, sizeof(SPI_CB));
 8004aa4:	2218      	movs	r2, #24
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	6838      	ldr	r0, [r7, #0]
 8004aaa:	f006 fabf 	bl	800b02c <memset>
		// ★割り込みの登録★
		
		// クローズ状態に更新
		this->status = ST_CLOSE;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
	for (ch = 0; ch < SPI_CH_MAX; ch++) {
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	71fb      	strb	r3, [r7, #7]
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0e9      	beq.n	8004a94 <spi_init+0xc>
	}
	
	return osOK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000ae0 	.word	0x20000ae0

08004ad0 <spi_open>:

// オープン関数
osStatus spi_open(SPI_CH ch, SPI_PAR *p_par)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	6039      	str	r1, [r7, #0]
 8004ada:	71fb      	strb	r3, [r7, #7]
	SPI_CB *this;
	osStatus ercd;
	
	// パラメータチェック
	if (ch >= SPI_CH_MAX) {
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <spi_open+0x16>
		return osErrorParameter;
 8004ae2:	2380      	movs	r3, #128	@ 0x80
 8004ae4:	e026      	b.n	8004b34 <spi_open+0x64>
	}
	if (p_par == NULL) {
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <spi_open+0x20>
		return osErrorParameter;
 8004aec:	2380      	movs	r3, #128	@ 0x80
 8004aee:	e021      	b.n	8004b34 <spi_open+0x64>
	}
	
	// 制御ブロック取得
	this = get_myself(ch);
 8004af0:	79fa      	ldrb	r2, [r7, #7]
 8004af2:	4613      	mov	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	4413      	add	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4a10      	ldr	r2, [pc, #64]	@ (8004b3c <spi_open+0x6c>)
 8004afc:	4413      	add	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
	
	// クローズ状態でなければ終了
	if (this->status != ST_CLOSE) {
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d001      	beq.n	8004b0c <spi_open+0x3c>
		return osErrorParameter;
 8004b08:	2380      	movs	r3, #128	@ 0x80
 8004b0a:	e013      	b.n	8004b34 <spi_open+0x64>
	}
	
	// レジスタ設定
	if ((ercd = spi_config(ch, p_par)) != osOK) {
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	6839      	ldr	r1, [r7, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff feeb 	bl	80048ec <spi_config>
 8004b16:	60b8      	str	r0, [r7, #8]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d108      	bne.n	8004b30 <spi_open+0x60>
		goto EXIT;
	}
	
	// とりあえずNSSはあげとく
	spi_nss_off(ch, 1);
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	2101      	movs	r1, #1
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f8c6 	bl	8004cb4 <spi_nss_off>
	
	// 状態をオープンにする
	this->status = ST_OPEN;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e000      	b.n	8004b32 <spi_open+0x62>
		goto EXIT;
 8004b30:	bf00      	nop
	
EXIT:
	return ercd;
 8004b32:	68bb      	ldr	r3, [r7, #8]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000ae0 	.word	0x20000ae0

08004b40 <spi_send_recv>:
}

// 送受信関数
// リエントラントは考えてないんで、複数の人が同じCHを使わないでね
osStatus spi_send_recv(SPI_CH ch, uint8_t *snd_data, uint8_t *rcv_data, uint32_t snd_sz)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	@ 0x28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	73fb      	strb	r3, [r7, #15]
	SPI_TypeDef *p_reg;
	osEvent event;
	osStatus ercd;
	
	// パラメータチェック
	if (ch >= SPI_CH_MAX) {
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <spi_send_recv+0x1c>
		return -1;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5a:	e06e      	b.n	8004c3a <spi_send_recv+0xfa>
	}
	if (snd_data == NULL) {
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d102      	bne.n	8004b68 <spi_send_recv+0x28>
		return -1;
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295
 8004b66:	e068      	b.n	8004c3a <spi_send_recv+0xfa>
	}
	
	// 制御ブロック取得
	this = get_myself(ch);
 8004b68:	7bfa      	ldrb	r2, [r7, #15]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	4413      	add	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4a34      	ldr	r2, [pc, #208]	@ (8004c44 <spi_send_recv+0x104>)
 8004b74:	4413      	add	r3, r2
 8004b76:	623b      	str	r3, [r7, #32]
	
	// オープン状態でなければ終了
	if (this->status != ST_OPEN) {
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d002      	beq.n	8004b86 <spi_send_recv+0x46>
		return -1;
 8004b80:	f04f 33ff 	mov.w	r3, #4294967295
 8004b84:	e059      	b.n	8004c3a <spi_send_recv+0xfa>
	}
	
	// ベースレジスタ取得
	p_reg = get_reg(ch);
 8004b86:	7bfa      	ldrb	r2, [r7, #15]
 8004b88:	492f      	ldr	r1, [pc, #188]	@ (8004c48 <spi_send_recv+0x108>)
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	61fb      	str	r3, [r7, #28]
	
	// データ情報設定
	this->p_snd_data = snd_data;
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
	this->snd_sz = snd_sz;
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	611a      	str	r2, [r3, #16]
	this->p_rcv_data = rcv_data;
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	60da      	str	r2, [r3, #12]
	this->rcv_sz = snd_sz;
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	615a      	str	r2, [r3, #20]
	
	// タスクID取得
	this->id = osThreadGetId();
 8004bb0:	f002 fe48 	bl	8007844 <osThreadGetId>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	605a      	str	r2, [r3, #4]
	
	// 割り込み有効
	set_bit_t(uint16_t, p_reg->CR2, SPI_CR2_TXEIE_Pos);
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	605a      	str	r2, [r3, #4]
	set_bit_t(uint16_t, p_reg->CR2, SPI_CR2_RXNEIE_Pos);
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	605a      	str	r2, [r3, #4]
	set_bit_t(uint16_t, p_reg->CR2, SPI_CR2_ERRIE_Pos);
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f043 0220 	orr.w	r2, r3, #32
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	605a      	str	r2, [r3, #4]
	
	// SPI有効
	spi_enable(p_reg);
 8004bde:	69f8      	ldr	r0, [r7, #28]
 8004be0:	f7ff ff1c 	bl	8004a1c <spi_enable>
	
	// 待機
	if ((ercd = osDelay(1)) != osOK) {
 8004be4:	2001      	movs	r0, #1
 8004be6:	f002 fe34 	bl	8007852 <osDelay>
 8004bea:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d11e      	bne.n	8004c30 <spi_send_recv+0xf0>
		goto EXIT;
	}
	
	// 送信完了待ち
	event = osSignalWait((SEND_RESULT_OK | SEND_RESULT_NG), SLEEP_TIME);
 8004bf2:	f107 0310 	add.w	r3, r7, #16
 8004bf6:	2264      	movs	r2, #100	@ 0x64
 8004bf8:	2103      	movs	r1, #3
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f002 fef6 	bl	80079ec <osSignalWait>
	// 送信できなかった
	if (event.status != osEventSignal) {
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d002      	beq.n	8004c0c <spi_send_recv+0xcc>
		ercd = osErrorParameter;
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c0a:	e00a      	b.n	8004c22 <spi_send_recv+0xe2>
		
	// 送信途中に何かしらのエラーが起きた
	} else if (event.value.signals == SEND_RESULT_NG) {
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d102      	bne.n	8004c18 <spi_send_recv+0xd8>
		ercd = osErrorParameter;
 8004c12:	2380      	movs	r3, #128	@ 0x80
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c16:	e004      	b.n	8004c22 <spi_send_recv+0xe2>
		
	// 送信できた
	} else if (event.value.signals == SEND_RESULT_OK) {
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <spi_send_recv+0xe2>
		ercd = osOK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	627b      	str	r3, [r7, #36]	@ 0x24
		;
		
	}
	
	// 待機
	if ((ercd = osDelay(1)) != osOK) {
 8004c22:	2001      	movs	r0, #1
 8004c24:	f002 fe15 	bl	8007852 <osDelay>
 8004c28:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	2b00      	cmp	r3, #0
		goto EXIT;
	}
	
EXIT:
 8004c2e:	e000      	b.n	8004c32 <spi_send_recv+0xf2>
		goto EXIT;
 8004c30:	bf00      	nop
	// SPI無効
	spi_disable(p_reg);
 8004c32:	69f8      	ldr	r0, [r7, #28]
 8004c34:	f7ff ff02 	bl	8004a3c <spi_disable>
	
	return ercd;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3728      	adds	r7, #40	@ 0x28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000ae0 	.word	0x20000ae0
 8004c48:	0800badc 	.word	0x0800badc

08004c4c <spi_nss_on>:

// NSSオン
osStatus spi_nss_on(SPI_CH ch, uint32_t dly_time)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	6039      	str	r1, [r7, #0]
 8004c56:	71fb      	strb	r3, [r7, #7]
	osStatus status;
	
	// パラメータチェック
	if (ch >= SPI_CH_MAX) {
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <spi_nss_on+0x18>
		return -1;
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c62:	e021      	b.n	8004ca8 <spi_nss_on+0x5c>
	}
	
	// 指定した時間待機
	if ((status = osDelay(dly_time)) != osOK) {
 8004c64:	6838      	ldr	r0, [r7, #0]
 8004c66:	f002 fdf4 	bl	8007852 <osDelay>
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d118      	bne.n	8004ca4 <spi_nss_on+0x58>
		goto EXIT;
	}
	status = osOK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
	
	// アサート
	assert_nss(ch);
 8004c76:	79fa      	ldrb	r2, [r7, #7]
 8004c78:	490d      	ldr	r1, [pc, #52]	@ (8004cb0 <spi_nss_on+0x64>)
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	330c      	adds	r3, #12
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	79fa      	ldrb	r2, [r7, #7]
 8004c8a:	4909      	ldr	r1, [pc, #36]	@ (8004cb0 <spi_nss_on+0x64>)
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	3310      	adds	r3, #16
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f000 fe7d 	bl	800599c <HAL_GPIO_WritePin>
 8004ca2:	e000      	b.n	8004ca6 <spi_nss_on+0x5a>
		goto EXIT;
 8004ca4:	bf00      	nop
	
EXIT:
	return status;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	0800badc 	.word	0x0800badc

08004cb4 <spi_nss_off>:

// NSSオフ
osStatus spi_nss_off(SPI_CH ch, uint32_t dly_time)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	6039      	str	r1, [r7, #0]
 8004cbe:	71fb      	strb	r3, [r7, #7]
	osStatus status;
	
	// パラメータチェック
	if (ch >= SPI_CH_MAX) {
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <spi_nss_off+0x18>
		return -1;
 8004cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cca:	e021      	b.n	8004d10 <spi_nss_off+0x5c>
	}
	
	// 指定した時間待機
	if ((status = osDelay(dly_time)) != osOK) {
 8004ccc:	6838      	ldr	r0, [r7, #0]
 8004cce:	f002 fdc0 	bl	8007852 <osDelay>
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d118      	bne.n	8004d0c <spi_nss_off+0x58>
		goto EXIT;
	}
	status = osOK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
	
	// ネゲート
	negate_nss(ch);
 8004cde:	79fa      	ldrb	r2, [r7, #7]
 8004ce0:	490d      	ldr	r1, [pc, #52]	@ (8004d18 <spi_nss_off+0x64>)
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	330c      	adds	r3, #12
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	79fa      	ldrb	r2, [r7, #7]
 8004cf2:	4909      	ldr	r1, [pc, #36]	@ (8004d18 <spi_nss_off+0x64>)
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	3310      	adds	r3, #16
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	2201      	movs	r2, #1
 8004d04:	4619      	mov	r1, r3
 8004d06:	f000 fe49 	bl	800599c <HAL_GPIO_WritePin>
 8004d0a:	e000      	b.n	8004d0e <spi_nss_off+0x5a>
		goto EXIT;
 8004d0c:	bf00      	nop
	
EXIT:
	return status;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	0800badc 	.word	0x0800badc

08004d1c <usart_common_handler>:
	USART_CR2_STOP_1,				// USART_STOPBIT_2
};

// 共通割り込み処理
void usart_common_handler(USART_CH ch)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	71fb      	strb	r3, [r7, #7]
	USART_CB *this = get_myself(ch);
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	f240 4224 	movw	r2, #1060	@ 0x424
 8004d2c:	fb02 f303 	mul.w	r3, r2, r3
 8004d30:	4a4a      	ldr	r2, [pc, #296]	@ (8004e5c <usart_common_handler+0x140>)
 8004d32:	4413      	add	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
	USART_TypeDef *p_reg;
	RING_BUFF *p_ring_buf;
	uint8_t recv_data;
	
	// ベースレジスタ取得
	p_reg = get_reg(ch);
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	4a49      	ldr	r2, [pc, #292]	@ (8004e60 <usart_common_handler+0x144>)
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	4413      	add	r3, r2
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	613b      	str	r3, [r7, #16]
	
	// エラーチェック
	if (p_reg->ISR & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE | USART_ISR_ORE)) {
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00e      	beq.n	8004d6c <usart_common_handler+0x50>
		//clr_bit(p_reg->ICR, USART_ICR_PECF);
		//clr_bit(p_reg->ICR, USART_ICR_FECF);
		//clr_bit(p_reg->ICR, USART_ICR_NCF);
		//clr_bit(p_reg->ICR, USART_ICR_ORECF);
		// エラーコールバック通知
		if (this->err_cb != NULL) {
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d07c      	beq.n	8004e52 <usart_common_handler+0x136>
			this->err_cb(ch, this->p_ctx);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	f8d2 1420 	ldr.w	r1, [r2, #1056]	@ 0x420
 8004d64:	79fa      	ldrb	r2, [r7, #7]
 8004d66:	4610      	mov	r0, r2
 8004d68:	4798      	blx	r3
		}
		return;
 8004d6a:	e072      	b.n	8004e52 <usart_common_handler+0x136>
	}
	
	// 受信データあり
	if (p_reg->ISR & USART_ISR_RXNE) {
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d034      	beq.n	8004de2 <usart_common_handler+0xc6>
		// 受信データ取得
		recv_data = p_reg->RDR;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	73fb      	strb	r3, [r7, #15]
		//リングバッファ情報を取得
		p_ring_buf = &(this->rcv_buf);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004d84:	60bb      	str	r3, [r7, #8]
		// リングバッファに書き込み
		p_ring_buf->data[p_ring_buf->w_idx] = recv_data;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	7bf9      	ldrb	r1, [r7, #15]
 8004d90:	54d1      	strb	r1, [r2, r3]
		p_ring_buf->w_idx = (p_ring_buf->w_idx + 1) & (BUFF_SIZE - 1);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
		// 上書き発生
		if (p_ring_buf->w_idx == p_ring_buf->r_idx) {
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d108      	bne.n	8004dc6 <usart_common_handler+0xaa>
			p_ring_buf->r_idx = (p_ring_buf->r_idx + 1) & (BUFF_SIZE - 1);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004dba:	3301      	adds	r3, #1
 8004dbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}
		// コールバック通知
		if (this->recv_cb != NULL) {
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <usart_common_handler+0xc6>
			this->recv_cb(ch, this->p_ctx);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	@ 0x420
 8004ddc:	79fa      	ldrb	r2, [r7, #7]
 8004dde:	4610      	mov	r0, r2
 8004de0:	4798      	blx	r3
		}
	}
	
	// 送信データがある
	p_ring_buf = &(this->snd_buf);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	3304      	adds	r3, #4
 8004de6:	60bb      	str	r3, [r7, #8]
	if (p_ring_buf->w_idx != p_ring_buf->r_idx) {
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d025      	beq.n	8004e44 <usart_common_handler+0x128>
		// 送信レジスタが空いている
		if ((p_reg->ISR & USART_ISR_TXE) != 0) {
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d027      	beq.n	8004e54 <usart_common_handler+0x138>
			// 送信レジスタにデータをセット
			p_reg->TDR = p_ring_buf->data[p_ring_buf->r_idx];
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	5cd3      	ldrb	r3, [r2, r3]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	629a      	str	r2, [r3, #40]	@ 0x28
			p_ring_buf->r_idx = (p_ring_buf->r_idx + 1) & (BUFF_SIZE - 1);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			// コールバック通知
			if (this->send_cb != NULL) {
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d011      	beq.n	8004e54 <usart_common_handler+0x138>
				this->send_cb(ch, this->p_ctx);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	f8d2 1420 	ldr.w	r1, [r2, #1056]	@ 0x420
 8004e3c:	79fa      	ldrb	r2, [r7, #7]
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4798      	blx	r3
 8004e42:	e007      	b.n	8004e54 <usart_common_handler+0x138>
			}
		}
	// 送信データがない
	} else {
		clr_bit(p_reg->CR1, USART_CR1_TXEIE_Pos);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e000      	b.n	8004e54 <usart_common_handler+0x138>
		return;
 8004e52:	bf00      	nop
	}
}
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000af8 	.word	0x20000af8
 8004e60:	0800baf0 	.word	0x0800baf0

08004e64 <USART1_IRQHandler>:
// 割り込みハンドラ
void USART1_IRQHandler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
	usart_common_handler(USART_CH_1);
 8004e68:	2000      	movs	r0, #0
 8004e6a:	f7ff ff57 	bl	8004d1c <usart_common_handler>
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	af00      	add	r7, sp, #0
	usart_common_handler(USART_CH_2);
 8004e76:	2001      	movs	r0, #1
 8004e78:	f7ff ff50 	bl	8004d1c <usart_common_handler>
}
 8004e7c:	bf00      	nop
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <usart_config>:
//{
//	usart_common_handler(USART_CH_8);
//}
// コンフィグ
int32_t usart_config(USART_CH ch, USART_OPEN_PAR *p_open_par)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	6039      	str	r1, [r7, #0]
 8004e8a:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef *p_reg;
	uint32_t peri_clk;
	
	// パラメータチェック
	if ((p_open_par->len >= USART_LEN_MAX) ||			// 長さチェック
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d807      	bhi.n	8004ea4 <usart_config+0x24>
		(p_open_par->stopbit >= USART_STOPBIT_MAX) ||	// ストップビットチェック
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	785b      	ldrb	r3, [r3, #1]
	if ((p_open_par->len >= USART_LEN_MAX) ||			// 長さチェック
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d803      	bhi.n	8004ea4 <usart_config+0x24>
		(p_open_par->parity >= USART_PARITY_MAX)) {	// パリティチェック
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	789b      	ldrb	r3, [r3, #2]
		(p_open_par->stopbit >= USART_STOPBIT_MAX) ||	// ストップビットチェック
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <usart_config+0x28>
		return osErrorParameter;
 8004ea4:	2380      	movs	r3, #128	@ 0x80
 8004ea6:	e064      	b.n	8004f72 <usart_config+0xf2>
	}
	
	// ベースレジスタ取得
	p_reg = get_reg(ch);
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	4a34      	ldr	r2, [pc, #208]	@ (8004f7c <usart_config+0xfc>)
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	4413      	add	r3, r2
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]
	
	// クロック設定
	//peri_clk = HAL_RCCEx_GetPeriphCLKFreq(get_clk(ch));
	//p_reg->BRR = peri_clk/p_open_par->baudrate;
	p_reg->BRR = 0x3aa;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f240 32aa 	movw	r2, #938	@ 0x3aa
 8004eba:	60da      	str	r2, [r3, #12]
	
	// データ長、パリティ設定
	p_reg->CR1 |= length_reg_config_tbl[p_open_par->len];
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	7812      	ldrb	r2, [r2, #0]
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8004f80 <usart_config+0x100>)
 8004ec8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]
	p_reg->CR1 |= parity_reg_config_tbl[p_open_par->parity];
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	7892      	ldrb	r2, [r2, #2]
 8004eda:	4611      	mov	r1, r2
 8004edc:	4a29      	ldr	r2, [pc, #164]	@ (8004f84 <usart_config+0x104>)
 8004ede:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	601a      	str	r2, [r3, #0]
	
	// ストップビット設定
	p_reg->CR2 |=  stopbit_reg_config_tbl[p_open_par->stopbit];
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	7852      	ldrb	r2, [r2, #1]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4a25      	ldr	r2, [pc, #148]	@ (8004f88 <usart_config+0x108>)
 8004ef4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	605a      	str	r2, [r3, #4]
	
	// USART有効
	set_bit(p_reg->CR1, USART_CR1_UE_Pos);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f043 0201 	orr.w	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	601a      	str	r2, [r3, #0]
	
	// 割り込み有効
	set_bit(p_reg->CR1, USART_CR1_PEIE_Pos);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]
	set_bit(p_reg->CR1, USART_CR1_RXNEIE_Pos);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f043 0220 	orr.w	r2, r3, #32
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	601a      	str	r2, [r3, #0]
	set_bit(p_reg->CR1, USART_CR1_RE_Pos);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f043 0204 	orr.w	r2, r3, #4
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	601a      	str	r2, [r3, #0]
	set_bit(p_reg->CR1, USART_CR1_TE_Pos);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f043 0208 	orr.w	r2, r3, #8
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	601a      	str	r2, [r3, #0]
	
	// 割り込み有効
    HAL_NVIC_SetPriority(get_irqn(ch), get_pri(ch), 0);
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8004f7c <usart_config+0xfc>)
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	4413      	add	r3, r2
 8004f42:	3304      	adds	r3, #4
 8004f44:	f993 0000 	ldrsb.w	r0, [r3]
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004f7c <usart_config+0xfc>)
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	4413      	add	r3, r2
 8004f50:	3308      	adds	r3, #8
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2200      	movs	r2, #0
 8004f56:	4619      	mov	r1, r3
 8004f58:	f000 faad 	bl	80054b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(get_irqn(ch));
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	4a07      	ldr	r2, [pc, #28]	@ (8004f7c <usart_config+0xfc>)
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	4413      	add	r3, r2
 8004f64:	3304      	adds	r3, #4
 8004f66:	f993 3000 	ldrsb.w	r3, [r3]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fabf 	bl	80054ee <HAL_NVIC_EnableIRQ>
	
	return osOK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	0800baf0 	.word	0x0800baf0
 8004f80:	0800bb10 	.word	0x0800bb10
 8004f84:	0800bb18 	.word	0x0800bb18
 8004f88:	0800bb24 	.word	0x0800bb24

08004f8c <usart_init>:

// 初期化
osStatus usart_init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
	USART_CB *this;
	USART_CH ch;
	
	for (ch = 0; ch < USART_CH_MAX; ch++) {
 8004f92:	2300      	movs	r3, #0
 8004f94:	71fb      	strb	r3, [r7, #7]
 8004f96:	e013      	b.n	8004fc0 <usart_init+0x34>
		// 制御ブロックの取得
		this = get_myself(ch);
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	f240 4224 	movw	r2, #1060	@ 0x424
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd0 <usart_init+0x44>)
 8004fa4:	4413      	add	r3, r2
 8004fa6:	603b      	str	r3, [r7, #0]
		// 制御ブロックのクリア
		memset(this, 0, sizeof(USART_CB));
 8004fa8:	f240 4224 	movw	r2, #1060	@ 0x424
 8004fac:	2100      	movs	r1, #0
 8004fae:	6838      	ldr	r0, [r7, #0]
 8004fb0:	f006 f83c 	bl	800b02c <memset>
		// ★割り込みの登録★
		
		// クローズ状態に更新
		this->status = ST_CLOSE;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
	for (ch = 0; ch < USART_CH_MAX; ch++) {
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	71fb      	strb	r3, [r7, #7]
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d9e8      	bls.n	8004f98 <usart_init+0xc>
	}
	
	return osOK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000af8 	.word	0x20000af8

08004fd4 <usart_open>:

// オープン関数
osStatus usart_open(USART_CH ch, USART_OPEN_PAR *p_open_par, USART_CALLBACK send_cb, USART_CALLBACK recv_cb, USART_CALLBACK err_cb, void* p_ctx)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
	USART_CB *this;
	osStatus ercd;
	
	// パラメータチェック
	if (ch >= USART_CH_MAX) {
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d901      	bls.n	8004fee <usart_open+0x1a>
		return osErrorParameter;
 8004fea:	2380      	movs	r3, #128	@ 0x80
 8004fec:	e032      	b.n	8005054 <usart_open+0x80>
	}
	if (p_open_par == NULL) {
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <usart_open+0x24>
		return osErrorParameter;
 8004ff4:	2380      	movs	r3, #128	@ 0x80
 8004ff6:	e02d      	b.n	8005054 <usart_open+0x80>
	}
	
	// 制御ブロック取得
	this = get_myself(ch);
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	f240 4224 	movw	r2, #1060	@ 0x424
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	4a16      	ldr	r2, [pc, #88]	@ (800505c <usart_open+0x88>)
 8005004:	4413      	add	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
	
	// クローズ状態でなければ終了
	if (this->status != ST_CLOSE) {
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d001      	beq.n	8005014 <usart_open+0x40>
		return osErrorParameter;
 8005010:	2380      	movs	r3, #128	@ 0x80
 8005012:	e01f      	b.n	8005054 <usart_open+0x80>
	}
	
	// レジスタ設定
	if ((ercd = usart_config(ch, p_open_par)) != osOK) {
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff ff31 	bl	8004e80 <usart_config>
 800501e:	4603      	mov	r3, r0
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d113      	bne.n	8005050 <usart_open+0x7c>
		goto EXIT;
	}
	
	// コールバック設定
	this->send_cb = send_cb;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
	this->recv_cb = recv_cb;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
	this->err_cb = err_cb;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	6a3a      	ldr	r2, [r7, #32]
 800503c:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
	this->p_ctx = p_ctx;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005044:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
	
	// 状態をオープンにする
	this->status = ST_OPEN;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2202      	movs	r2, #2
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e000      	b.n	8005052 <usart_open+0x7e>
		goto EXIT;
 8005050:	bf00      	nop
	
EXIT:
	return ercd;
 8005052:	693b      	ldr	r3, [r7, #16]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000af8 	.word	0x20000af8

08005060 <usart_send>:
	// ★後で実装★
}

// 送信関数
int32_t usart_send(USART_CH ch, uint8_t *p_data, uint32_t size)
{
 8005060:	b480      	push	{r7}
 8005062:	b089      	sub	sp, #36	@ 0x24
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	73fb      	strb	r3, [r7, #15]
	USART_CB *this;
	RING_BUFF *p_ring_buf;
	USART_TypeDef *p_reg;
	uint32_t send_sz = size;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	61fb      	str	r3, [r7, #28]
	
	// パラメータチェック
	if (ch >= USART_CH_MAX) {
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d902      	bls.n	800507e <usart_send+0x1e>
		return -1;
 8005078:	f04f 33ff 	mov.w	r3, #4294967295
 800507c:	e052      	b.n	8005124 <usart_send+0xc4>
	}
	if (p_data == NULL) {
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <usart_send+0x2a>
		return -1;
 8005084:	f04f 33ff 	mov.w	r3, #4294967295
 8005088:	e04c      	b.n	8005124 <usart_send+0xc4>
	}
	
	// 制御ブロック取得
	this = get_myself(ch);
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	f240 4224 	movw	r2, #1060	@ 0x424
 8005090:	fb02 f303 	mul.w	r3, r2, r3
 8005094:	4a26      	ldr	r2, [pc, #152]	@ (8005130 <usart_send+0xd0>)
 8005096:	4413      	add	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
	
	// オープン状態でなければ終了
	if (this->status != ST_OPEN) {
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d002      	beq.n	80050a8 <usart_send+0x48>
		return -1;
 80050a2:	f04f 33ff 	mov.w	r3, #4294967295
 80050a6:	e03d      	b.n	8005124 <usart_send+0xc4>
	}
	
	// ベースレジスタ取得
	p_reg = get_reg(ch);
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	4a22      	ldr	r2, [pc, #136]	@ (8005134 <usart_send+0xd4>)
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	4413      	add	r3, r2
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80050b4:	b672      	cpsid	i
}
 80050b6:	bf00      	nop
	
	// 割り込み禁止
	__disable_irq();
	
	// リングバッファ情報取得
	p_ring_buf = &(this->snd_buf);
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	3304      	adds	r3, #4
 80050bc:	613b      	str	r3, [r7, #16]
	
	do {
		// 空いている場合は詰める
		if ((p_ring_buf->w_idx + 1) != p_ring_buf->r_idx) {
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d018      	beq.n	8005102 <usart_send+0xa2>
			p_ring_buf->data[p_ring_buf->w_idx] = *(p_data++);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	60ba      	str	r2, [r7, #8]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80050dc:	7819      	ldrb	r1, [r3, #0]
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	5499      	strb	r1, [r3, r2]
			p_ring_buf->w_idx = (p_ring_buf->w_idx + 1) & (BUFF_SIZE - 1);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050e8:	3301      	adds	r3, #1
 80050ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			size--;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	607b      	str	r3, [r7, #4]
		// 空いていない場合は抜ける
		} else {
			break;
		}
	} while (size > 0);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1de      	bne.n	80050be <usart_send+0x5e>
 8005100:	e000      	b.n	8005104 <usart_send+0xa4>
			break;
 8005102:	bf00      	nop
	
	// 送信サイズ更新
	// (*)サイズはデクリメントしているため、送信したいサイズから引けば送信サイズが出る
	send_sz -= size;
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	61fb      	str	r3, [r7, #28]
	// 送信割り込み有効
	if (send_sz > 0) {
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <usart_send+0xbe>
		set_bit(p_reg->CR1, USART_CR1_TXEIE_Pos);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800511e:	b662      	cpsie	i
}
 8005120:	bf00      	nop
	}
	
	// 割り込み禁止解除
	__enable_irq();
	
	return send_sz;
 8005122:	69fb      	ldr	r3, [r7, #28]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3724      	adds	r7, #36	@ 0x24
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000af8 	.word	0x20000af8
 8005134:	0800baf0 	.word	0x0800baf0

08005138 <usart_recv>:

// 受信関数
int32_t usart_recv(USART_CH ch, uint8_t *p_data, uint32_t size)
{
 8005138:	b480      	push	{r7}
 800513a:	b089      	sub	sp, #36	@ 0x24
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	73fb      	strb	r3, [r7, #15]
	RING_BUFF *p_ring_buf;
	uint32_t recv_sz;
	uint32_t data_sz;
	
	// パラメータチェック
	if (ch >= USART_CH_MAX) {
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d902      	bls.n	8005152 <usart_recv+0x1a>
		return -1;
 800514c:	f04f 33ff 	mov.w	r3, #4294967295
 8005150:	e047      	b.n	80051e2 <usart_recv+0xaa>
	}
	if (p_data == NULL) {
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <usart_recv+0x26>
		return -1;
 8005158:	f04f 33ff 	mov.w	r3, #4294967295
 800515c:	e041      	b.n	80051e2 <usart_recv+0xaa>
	}
	
	// 制御ブロック取得
	this = get_myself(ch);
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	f240 4224 	movw	r2, #1060	@ 0x424
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	4a21      	ldr	r2, [pc, #132]	@ (80051f0 <usart_recv+0xb8>)
 800516a:	4413      	add	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
	
	// オープン状態でなければ終了
	if (this->status != ST_OPEN) {
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d002      	beq.n	800517c <usart_recv+0x44>
		return -1;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	e032      	b.n	80051e2 <usart_recv+0xaa>
  __ASM volatile ("cpsid i" : : : "memory");
 800517c:	b672      	cpsid	i
}
 800517e:	bf00      	nop
	
	// 割り込み禁止
	__disable_irq();
	
	// リングバッファ情報取得
	p_ring_buf = &(this->rcv_buf);
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8005186:	617b      	str	r3, [r7, #20]
	
	// リングバッファに入っているデータ数を取得
	data_sz = ((p_ring_buf->w_idx - p_ring_buf->r_idx) & (BUFF_SIZE - 1));
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519a:	61fb      	str	r3, [r7, #28]
	// 受信サイズ更新
	// (*) リングバッファに入っているデータ数以上はいらない
	if (data_sz > size) {
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d901      	bls.n	80051a8 <usart_recv+0x70>
		data_sz = size;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	61fb      	str	r3, [r7, #28]
	}
	recv_sz = data_sz;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	613b      	str	r3, [r7, #16]
	
	// とりあえずリングバッファからとってくる
	while (data_sz-- > 0) {
 80051ac:	e011      	b.n	80051d2 <usart_recv+0x9a>
		// リングバッファからデータを取得
		*(p_data++) = p_ring_buf->data[p_ring_buf->r_idx];
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	1c59      	adds	r1, r3, #1
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	6979      	ldr	r1, [r7, #20]
 80051bc:	5c8a      	ldrb	r2, [r1, r2]
 80051be:	701a      	strb	r2, [r3, #0]
		p_ring_buf->r_idx = ((p_ring_buf->r_idx + 1) & (BUFF_SIZE - 1));
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80051c6:	3301      	adds	r3, #1
 80051c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	while (data_sz-- > 0) {
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	1e5a      	subs	r2, r3, #1
 80051d6:	61fa      	str	r2, [r7, #28]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e8      	bne.n	80051ae <usart_recv+0x76>
  __ASM volatile ("cpsie i" : : : "memory");
 80051dc:	b662      	cpsie	i
}
 80051de:	bf00      	nop
	}
	
	// 割り込み禁止解除
	__enable_irq();
	
	return recv_sz;
 80051e0:	693b      	ldr	r3, [r7, #16]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3724      	adds	r7, #36	@ 0x24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	20000af8 	.word	0x20000af8

080051f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80051f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800522c <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80051f8:	f7fe fef0 	bl	8003fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80051fc:	480c      	ldr	r0, [pc, #48]	@ (8005230 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80051fe:	490d      	ldr	r1, [pc, #52]	@ (8005234 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005200:	4a0d      	ldr	r2, [pc, #52]	@ (8005238 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005204:	e002      	b.n	800520c <LoopCopyDataInit>

08005206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800520a:	3304      	adds	r3, #4

0800520c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800520c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800520e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005210:	d3f9      	bcc.n	8005206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005212:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005214:	4c0a      	ldr	r4, [pc, #40]	@ (8005240 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005218:	e001      	b.n	800521e <LoopFillZerobss>

0800521a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800521a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800521c:	3204      	adds	r2, #4

0800521e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800521e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005220:	d3fb      	bcc.n	800521a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8005222:	f005 ff1f 	bl	800b064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005226:	f7fe fb23 	bl	8003870 <main>
  bx  lr    
 800522a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800522c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8005230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005234:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8005238:	0800bc40 	.word	0x0800bc40
  ldr r2, =_sbss
 800523c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8005240:	20041704 	.word	0x20041704

08005244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005244:	e7fe      	b.n	8005244 <ADC_IRQHandler>

08005246 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800524a:	2003      	movs	r0, #3
 800524c:	f000 f928 	bl	80054a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005250:	200f      	movs	r0, #15
 8005252:	f000 f805 	bl	8005260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005256:	f7fe fd39 	bl	8003ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005268:	4b12      	ldr	r3, [pc, #72]	@ (80052b4 <HAL_InitTick+0x54>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <HAL_InitTick+0x58>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	4619      	mov	r1, r3
 8005272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005276:	fbb3 f3f1 	udiv	r3, r3, r1
 800527a:	fbb2 f3f3 	udiv	r3, r2, r3
 800527e:	4618      	mov	r0, r3
 8005280:	f000 f943 	bl	800550a <HAL_SYSTICK_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e00e      	b.n	80052ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b0f      	cmp	r3, #15
 8005292:	d80a      	bhi.n	80052aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005294:	2200      	movs	r2, #0
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
 800529c:	f000 f90b 	bl	80054b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052a0:	4a06      	ldr	r2, [pc, #24]	@ (80052bc <HAL_InitTick+0x5c>)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e000      	b.n	80052ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	20000008 	.word	0x20000008
 80052b8:	20000010 	.word	0x20000010
 80052bc:	2000000c 	.word	0x2000000c

080052c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052c4:	4b06      	ldr	r3, [pc, #24]	@ (80052e0 <HAL_IncTick+0x20>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	4b06      	ldr	r3, [pc, #24]	@ (80052e4 <HAL_IncTick+0x24>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4413      	add	r3, r2
 80052d0:	4a04      	ldr	r2, [pc, #16]	@ (80052e4 <HAL_IncTick+0x24>)
 80052d2:	6013      	str	r3, [r2, #0]
}
 80052d4:	bf00      	nop
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000010 	.word	0x20000010
 80052e4:	20001340 	.word	0x20001340

080052e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  return uwTick;
 80052ec:	4b03      	ldr	r3, [pc, #12]	@ (80052fc <HAL_GetTick+0x14>)
 80052ee:	681b      	ldr	r3, [r3, #0]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	20001340 	.word	0x20001340

08005300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005310:	4b0b      	ldr	r3, [pc, #44]	@ (8005340 <__NVIC_SetPriorityGrouping+0x40>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800531c:	4013      	ands	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005328:	4b06      	ldr	r3, [pc, #24]	@ (8005344 <__NVIC_SetPriorityGrouping+0x44>)
 800532a:	4313      	orrs	r3, r2
 800532c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800532e:	4a04      	ldr	r2, [pc, #16]	@ (8005340 <__NVIC_SetPriorityGrouping+0x40>)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	60d3      	str	r3, [r2, #12]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	e000ed00 	.word	0xe000ed00
 8005344:	05fa0000 	.word	0x05fa0000

08005348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800534c:	4b04      	ldr	r3, [pc, #16]	@ (8005360 <__NVIC_GetPriorityGrouping+0x18>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	0a1b      	lsrs	r3, r3, #8
 8005352:	f003 0307 	and.w	r3, r3, #7
}
 8005356:	4618      	mov	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000ed00 	.word	0xe000ed00

08005364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800536e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005372:	2b00      	cmp	r3, #0
 8005374:	db0b      	blt.n	800538e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	f003 021f 	and.w	r2, r3, #31
 800537c:	4907      	ldr	r1, [pc, #28]	@ (800539c <__NVIC_EnableIRQ+0x38>)
 800537e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	2001      	movs	r0, #1
 8005386:	fa00 f202 	lsl.w	r2, r0, r2
 800538a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	e000e100 	.word	0xe000e100

080053a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	6039      	str	r1, [r7, #0]
 80053aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db0a      	blt.n	80053ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	490c      	ldr	r1, [pc, #48]	@ (80053ec <__NVIC_SetPriority+0x4c>)
 80053ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053be:	0112      	lsls	r2, r2, #4
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	440b      	add	r3, r1
 80053c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053c8:	e00a      	b.n	80053e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	4908      	ldr	r1, [pc, #32]	@ (80053f0 <__NVIC_SetPriority+0x50>)
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	3b04      	subs	r3, #4
 80053d8:	0112      	lsls	r2, r2, #4
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	440b      	add	r3, r1
 80053de:	761a      	strb	r2, [r3, #24]
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	e000e100 	.word	0xe000e100
 80053f0:	e000ed00 	.word	0xe000ed00

080053f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b089      	sub	sp, #36	@ 0x24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f1c3 0307 	rsb	r3, r3, #7
 800540e:	2b04      	cmp	r3, #4
 8005410:	bf28      	it	cs
 8005412:	2304      	movcs	r3, #4
 8005414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3304      	adds	r3, #4
 800541a:	2b06      	cmp	r3, #6
 800541c:	d902      	bls.n	8005424 <NVIC_EncodePriority+0x30>
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3b03      	subs	r3, #3
 8005422:	e000      	b.n	8005426 <NVIC_EncodePriority+0x32>
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005428:	f04f 32ff 	mov.w	r2, #4294967295
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43da      	mvns	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	401a      	ands	r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800543c:	f04f 31ff 	mov.w	r1, #4294967295
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	43d9      	mvns	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800544c:	4313      	orrs	r3, r2
         );
}
 800544e:	4618      	mov	r0, r3
 8005450:	3724      	adds	r7, #36	@ 0x24
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3b01      	subs	r3, #1
 8005468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800546c:	d301      	bcc.n	8005472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800546e:	2301      	movs	r3, #1
 8005470:	e00f      	b.n	8005492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005472:	4a0a      	ldr	r2, [pc, #40]	@ (800549c <SysTick_Config+0x40>)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3b01      	subs	r3, #1
 8005478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800547a:	210f      	movs	r1, #15
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	f7ff ff8e 	bl	80053a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005484:	4b05      	ldr	r3, [pc, #20]	@ (800549c <SysTick_Config+0x40>)
 8005486:	2200      	movs	r2, #0
 8005488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800548a:	4b04      	ldr	r3, [pc, #16]	@ (800549c <SysTick_Config+0x40>)
 800548c:	2207      	movs	r2, #7
 800548e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	e000e010 	.word	0xe000e010

080054a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff29 	bl	8005300 <__NVIC_SetPriorityGrouping>
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	4603      	mov	r3, r0
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054c8:	f7ff ff3e 	bl	8005348 <__NVIC_GetPriorityGrouping>
 80054cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	6978      	ldr	r0, [r7, #20]
 80054d4:	f7ff ff8e 	bl	80053f4 <NVIC_EncodePriority>
 80054d8:	4602      	mov	r2, r0
 80054da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054de:	4611      	mov	r1, r2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ff5d 	bl	80053a0 <__NVIC_SetPriority>
}
 80054e6:	bf00      	nop
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	4603      	mov	r3, r0
 80054f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff ff31 	bl	8005364 <__NVIC_EnableIRQ>
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff ffa2 	bl	800545c <SysTick_Config>
 8005518:	4603      	mov	r3, r0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005528:	f3bf 8f5f 	dmb	sy
}
 800552c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800552e:	4b07      	ldr	r3, [pc, #28]	@ (800554c <HAL_MPU_Disable+0x28>)
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	4a06      	ldr	r2, [pc, #24]	@ (800554c <HAL_MPU_Disable+0x28>)
 8005534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005538:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800553a:	4b05      	ldr	r3, [pc, #20]	@ (8005550 <HAL_MPU_Disable+0x2c>)
 800553c:	2200      	movs	r2, #0
 800553e:	605a      	str	r2, [r3, #4]
}
 8005540:	bf00      	nop
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	e000ed00 	.word	0xe000ed00
 8005550:	e000ed90 	.word	0xe000ed90

08005554 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800555c:	4a0b      	ldr	r2, [pc, #44]	@ (800558c <HAL_MPU_Enable+0x38>)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005566:	4b0a      	ldr	r3, [pc, #40]	@ (8005590 <HAL_MPU_Enable+0x3c>)
 8005568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556a:	4a09      	ldr	r2, [pc, #36]	@ (8005590 <HAL_MPU_Enable+0x3c>)
 800556c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005570:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005572:	f3bf 8f4f 	dsb	sy
}
 8005576:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005578:	f3bf 8f6f 	isb	sy
}
 800557c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	e000ed90 	.word	0xe000ed90
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	785a      	ldrb	r2, [r3, #1]
 80055a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005610 <HAL_MPU_ConfigRegion+0x7c>)
 80055a2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80055a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005610 <HAL_MPU_ConfigRegion+0x7c>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	4a19      	ldr	r2, [pc, #100]	@ (8005610 <HAL_MPU_ConfigRegion+0x7c>)
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80055b0:	4a17      	ldr	r2, [pc, #92]	@ (8005610 <HAL_MPU_ConfigRegion+0x7c>)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	7b1b      	ldrb	r3, [r3, #12]
 80055bc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	7adb      	ldrb	r3, [r3, #11]
 80055c2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80055c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	7a9b      	ldrb	r3, [r3, #10]
 80055ca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80055cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	7b5b      	ldrb	r3, [r3, #13]
 80055d2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80055d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	7b9b      	ldrb	r3, [r3, #14]
 80055da:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80055dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	7bdb      	ldrb	r3, [r3, #15]
 80055e2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80055e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	7a5b      	ldrb	r3, [r3, #9]
 80055ea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80055ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	7a1b      	ldrb	r3, [r3, #8]
 80055f2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80055f4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80055fc:	4a04      	ldr	r2, [pc, #16]	@ (8005610 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80055fe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005600:	6113      	str	r3, [r2, #16]
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	e000ed90 	.word	0xe000ed90

08005614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	@ 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005626:	2300      	movs	r3, #0
 8005628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800562a:	2300      	movs	r3, #0
 800562c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	e175      	b.n	8005920 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005634:	2201      	movs	r2, #1
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4013      	ands	r3, r2
 8005646:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	429a      	cmp	r2, r3
 800564e:	f040 8164 	bne.w	800591a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b01      	cmp	r3, #1
 800565c:	d005      	beq.n	800566a <HAL_GPIO_Init+0x56>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d130      	bne.n	80056cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	2203      	movs	r2, #3
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4013      	ands	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4313      	orrs	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056a0:	2201      	movs	r2, #1
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	43db      	mvns	r3, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4013      	ands	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	f003 0201 	and.w	r2, r3, #1
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d017      	beq.n	8005708 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	2203      	movs	r2, #3
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4013      	ands	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4313      	orrs	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d123      	bne.n	800575c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	08da      	lsrs	r2, r3, #3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3208      	adds	r2, #8
 800571c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	220f      	movs	r2, #15
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4013      	ands	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	4313      	orrs	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	08da      	lsrs	r2, r3, #3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3208      	adds	r2, #8
 8005756:	69b9      	ldr	r1, [r7, #24]
 8005758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	2203      	movs	r2, #3
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 0203 	and.w	r2, r3, #3
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 80be 	beq.w	800591a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800579e:	4b66      	ldr	r3, [pc, #408]	@ (8005938 <HAL_GPIO_Init+0x324>)
 80057a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a2:	4a65      	ldr	r2, [pc, #404]	@ (8005938 <HAL_GPIO_Init+0x324>)
 80057a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80057aa:	4b63      	ldr	r3, [pc, #396]	@ (8005938 <HAL_GPIO_Init+0x324>)
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80057b6:	4a61      	ldr	r2, [pc, #388]	@ (800593c <HAL_GPIO_Init+0x328>)
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	089b      	lsrs	r3, r3, #2
 80057bc:	3302      	adds	r3, #2
 80057be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	220f      	movs	r2, #15
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43db      	mvns	r3, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4013      	ands	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a58      	ldr	r2, [pc, #352]	@ (8005940 <HAL_GPIO_Init+0x32c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d037      	beq.n	8005852 <HAL_GPIO_Init+0x23e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a57      	ldr	r2, [pc, #348]	@ (8005944 <HAL_GPIO_Init+0x330>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d031      	beq.n	800584e <HAL_GPIO_Init+0x23a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a56      	ldr	r2, [pc, #344]	@ (8005948 <HAL_GPIO_Init+0x334>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d02b      	beq.n	800584a <HAL_GPIO_Init+0x236>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a55      	ldr	r2, [pc, #340]	@ (800594c <HAL_GPIO_Init+0x338>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d025      	beq.n	8005846 <HAL_GPIO_Init+0x232>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a54      	ldr	r2, [pc, #336]	@ (8005950 <HAL_GPIO_Init+0x33c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01f      	beq.n	8005842 <HAL_GPIO_Init+0x22e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a53      	ldr	r2, [pc, #332]	@ (8005954 <HAL_GPIO_Init+0x340>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d019      	beq.n	800583e <HAL_GPIO_Init+0x22a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a52      	ldr	r2, [pc, #328]	@ (8005958 <HAL_GPIO_Init+0x344>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <HAL_GPIO_Init+0x226>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a51      	ldr	r2, [pc, #324]	@ (800595c <HAL_GPIO_Init+0x348>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00d      	beq.n	8005836 <HAL_GPIO_Init+0x222>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a50      	ldr	r2, [pc, #320]	@ (8005960 <HAL_GPIO_Init+0x34c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <HAL_GPIO_Init+0x21e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a4f      	ldr	r2, [pc, #316]	@ (8005964 <HAL_GPIO_Init+0x350>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <HAL_GPIO_Init+0x21a>
 800582a:	2309      	movs	r3, #9
 800582c:	e012      	b.n	8005854 <HAL_GPIO_Init+0x240>
 800582e:	230a      	movs	r3, #10
 8005830:	e010      	b.n	8005854 <HAL_GPIO_Init+0x240>
 8005832:	2308      	movs	r3, #8
 8005834:	e00e      	b.n	8005854 <HAL_GPIO_Init+0x240>
 8005836:	2307      	movs	r3, #7
 8005838:	e00c      	b.n	8005854 <HAL_GPIO_Init+0x240>
 800583a:	2306      	movs	r3, #6
 800583c:	e00a      	b.n	8005854 <HAL_GPIO_Init+0x240>
 800583e:	2305      	movs	r3, #5
 8005840:	e008      	b.n	8005854 <HAL_GPIO_Init+0x240>
 8005842:	2304      	movs	r3, #4
 8005844:	e006      	b.n	8005854 <HAL_GPIO_Init+0x240>
 8005846:	2303      	movs	r3, #3
 8005848:	e004      	b.n	8005854 <HAL_GPIO_Init+0x240>
 800584a:	2302      	movs	r3, #2
 800584c:	e002      	b.n	8005854 <HAL_GPIO_Init+0x240>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <HAL_GPIO_Init+0x240>
 8005852:	2300      	movs	r3, #0
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	f002 0203 	and.w	r2, r2, #3
 800585a:	0092      	lsls	r2, r2, #2
 800585c:	4093      	lsls	r3, r2
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	4313      	orrs	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005864:	4935      	ldr	r1, [pc, #212]	@ (800593c <HAL_GPIO_Init+0x328>)
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	089b      	lsrs	r3, r3, #2
 800586a:	3302      	adds	r3, #2
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005872:	4b3d      	ldr	r3, [pc, #244]	@ (8005968 <HAL_GPIO_Init+0x354>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	43db      	mvns	r3, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4013      	ands	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005896:	4a34      	ldr	r2, [pc, #208]	@ (8005968 <HAL_GPIO_Init+0x354>)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800589c:	4b32      	ldr	r3, [pc, #200]	@ (8005968 <HAL_GPIO_Init+0x354>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	43db      	mvns	r3, r3
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4013      	ands	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058c0:	4a29      	ldr	r2, [pc, #164]	@ (8005968 <HAL_GPIO_Init+0x354>)
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058c6:	4b28      	ldr	r3, [pc, #160]	@ (8005968 <HAL_GPIO_Init+0x354>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	43db      	mvns	r3, r3
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4013      	ands	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005968 <HAL_GPIO_Init+0x354>)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005968 <HAL_GPIO_Init+0x354>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	43db      	mvns	r3, r3
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	4013      	ands	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005914:	4a14      	ldr	r2, [pc, #80]	@ (8005968 <HAL_GPIO_Init+0x354>)
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	3301      	adds	r3, #1
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2b0f      	cmp	r3, #15
 8005924:	f67f ae86 	bls.w	8005634 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	3724      	adds	r7, #36	@ 0x24
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40023800 	.word	0x40023800
 800593c:	40013800 	.word	0x40013800
 8005940:	40020000 	.word	0x40020000
 8005944:	40020400 	.word	0x40020400
 8005948:	40020800 	.word	0x40020800
 800594c:	40020c00 	.word	0x40020c00
 8005950:	40021000 	.word	0x40021000
 8005954:	40021400 	.word	0x40021400
 8005958:	40021800 	.word	0x40021800
 800595c:	40021c00 	.word	0x40021c00
 8005960:	40022000 	.word	0x40022000
 8005964:	40022400 	.word	0x40022400
 8005968:	40013c00 	.word	0x40013c00

0800596c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	887b      	ldrh	r3, [r7, #2]
 800597e:	4013      	ands	r3, r2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
 8005988:	e001      	b.n	800598e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800598a:	2300      	movs	r3, #0
 800598c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800598e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	807b      	strh	r3, [r7, #2]
 80059a8:	4613      	mov	r3, r2
 80059aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059ac:	787b      	ldrb	r3, [r7, #1]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059b2:	887a      	ldrh	r2, [r7, #2]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80059b8:	e003      	b.n	80059c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80059ba:	887b      	ldrh	r3, [r7, #2]
 80059bc:	041a      	lsls	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	619a      	str	r2, [r3, #24]
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN6_HIGH or PWR_WAKEUP_PIN6_LOW 
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.               
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
  
  /* Enable wake-up pin */
  SET_BIT(PWR->CSR2, (PWR_EWUP_MASK & WakeUpPinPolarity));
 80059d8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a0c <HAL_PWR_EnableWakeUpPin+0x3c>)
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80059e2:	490a      	ldr	r1, [pc, #40]	@ (8005a0c <HAL_PWR_EnableWakeUpPin+0x3c>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60cb      	str	r3, [r1, #12]
	
  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR2, (PWR_EWUP_MASK & WakeUpPinPolarity), (WakeUpPinPolarity >> 0x06));
 80059e8:	4b08      	ldr	r3, [pc, #32]	@ (8005a0c <HAL_PWR_EnableWakeUpPin+0x3c>)
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80059f2:	43db      	mvns	r3, r3
 80059f4:	401a      	ands	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	099b      	lsrs	r3, r3, #6
 80059fa:	4904      	ldr	r1, [pc, #16]	@ (8005a0c <HAL_PWR_EnableWakeUpPin+0x3c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	608b      	str	r3, [r1, #8]
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	40007000 	.word	0x40007000

08005a10 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pins if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  PWR->CR1 |= PWR_CR1_PDDS;
 8005a14:	4b08      	ldr	r3, [pc, #32]	@ (8005a38 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a07      	ldr	r2, [pc, #28]	@ (8005a38 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005a1a:	f043 0302 	orr.w	r3, r3, #2
 8005a1e:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8005a20:	4b06      	ldr	r3, [pc, #24]	@ (8005a3c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	4a05      	ldr	r2, [pc, #20]	@ (8005a3c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005a26:	f043 0304 	orr.w	r3, r3, #4
 8005a2a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005a2c:	bf30      	wfi
}
 8005a2e:	bf00      	nop
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40007000 	.word	0x40007000
 8005a3c:	e000ed00 	.word	0xe000ed00

08005a40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a4a:	4b23      	ldr	r3, [pc, #140]	@ (8005ad8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	4a22      	ldr	r2, [pc, #136]	@ (8005ad8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a56:	4b20      	ldr	r3, [pc, #128]	@ (8005ad8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a62:	4b1e      	ldr	r3, [pc, #120]	@ (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1d      	ldr	r2, [pc, #116]	@ (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a6e:	f7ff fc3b 	bl	80052e8 <HAL_GetTick>
 8005a72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a74:	e009      	b.n	8005a8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a76:	f7ff fc37 	bl	80052e8 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a84:	d901      	bls.n	8005a8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e022      	b.n	8005ad0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a8a:	4b14      	ldr	r3, [pc, #80]	@ (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a96:	d1ee      	bne.n	8005a76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a98:	4b10      	ldr	r3, [pc, #64]	@ (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aa2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aa4:	f7ff fc20 	bl	80052e8 <HAL_GetTick>
 8005aa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005aaa:	e009      	b.n	8005ac0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005aac:	f7ff fc1c 	bl	80052e8 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005aba:	d901      	bls.n	8005ac0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e007      	b.n	8005ad0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ac0:	4b06      	ldr	r3, [pc, #24]	@ (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005acc:	d1ee      	bne.n	8005aac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	40007000 	.word	0x40007000

08005ae0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e29b      	b.n	800602e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 8087 	beq.w	8005c12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b04:	4b96      	ldr	r3, [pc, #600]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d00c      	beq.n	8005b2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b10:	4b93      	ldr	r3, [pc, #588]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 030c 	and.w	r3, r3, #12
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d112      	bne.n	8005b42 <HAL_RCC_OscConfig+0x62>
 8005b1c:	4b90      	ldr	r3, [pc, #576]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b28:	d10b      	bne.n	8005b42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b2a:	4b8d      	ldr	r3, [pc, #564]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d06c      	beq.n	8005c10 <HAL_RCC_OscConfig+0x130>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d168      	bne.n	8005c10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e275      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b4a:	d106      	bne.n	8005b5a <HAL_RCC_OscConfig+0x7a>
 8005b4c:	4b84      	ldr	r3, [pc, #528]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a83      	ldr	r2, [pc, #524]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	e02e      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10c      	bne.n	8005b7c <HAL_RCC_OscConfig+0x9c>
 8005b62:	4b7f      	ldr	r3, [pc, #508]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a7e      	ldr	r2, [pc, #504]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	4b7c      	ldr	r3, [pc, #496]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a7b      	ldr	r2, [pc, #492]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e01d      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0xc0>
 8005b86:	4b76      	ldr	r3, [pc, #472]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a75      	ldr	r2, [pc, #468]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	4b73      	ldr	r3, [pc, #460]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a72      	ldr	r2, [pc, #456]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e00b      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd8>
 8005ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a6e      	ldr	r2, [pc, #440]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	4b6c      	ldr	r3, [pc, #432]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d013      	beq.n	8005be8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7ff fb92 	bl	80052e8 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bc8:	f7ff fb8e 	bl	80052e8 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b64      	cmp	r3, #100	@ 0x64
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e229      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bda:	4b61      	ldr	r3, [pc, #388]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0xe8>
 8005be6:	e014      	b.n	8005c12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be8:	f7ff fb7e 	bl	80052e8 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf0:	f7ff fb7a 	bl	80052e8 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	@ 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e215      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c02:	4b57      	ldr	r3, [pc, #348]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x110>
 8005c0e:	e000      	b.n	8005c12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d069      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c1e:	4b50      	ldr	r3, [pc, #320]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c2a:	4b4d      	ldr	r3, [pc, #308]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d11c      	bne.n	8005c70 <HAL_RCC_OscConfig+0x190>
 8005c36:	4b4a      	ldr	r3, [pc, #296]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d116      	bne.n	8005c70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c42:	4b47      	ldr	r3, [pc, #284]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_RCC_OscConfig+0x17a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d001      	beq.n	8005c5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e1e9      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5a:	4b41      	ldr	r3, [pc, #260]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	493d      	ldr	r1, [pc, #244]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c6e:	e040      	b.n	8005cf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d023      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c78:	4b39      	ldr	r3, [pc, #228]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a38      	ldr	r2, [pc, #224]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c84:	f7ff fb30 	bl	80052e8 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c8c:	f7ff fb2c 	bl	80052e8 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e1c7      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9e:	4b30      	ldr	r3, [pc, #192]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f0      	beq.n	8005c8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005caa:	4b2d      	ldr	r3, [pc, #180]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4929      	ldr	r1, [pc, #164]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]
 8005cbe:	e018      	b.n	8005cf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cc0:	4b27      	ldr	r3, [pc, #156]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a26      	ldr	r2, [pc, #152]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ccc:	f7ff fb0c 	bl	80052e8 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cd4:	f7ff fb08 	bl	80052e8 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e1a3      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d038      	beq.n	8005d70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d019      	beq.n	8005d3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d06:	4b16      	ldr	r3, [pc, #88]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d0a:	4a15      	ldr	r2, [pc, #84]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d0c:	f043 0301 	orr.w	r3, r3, #1
 8005d10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d12:	f7ff fae9 	bl	80052e8 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d1a:	f7ff fae5 	bl	80052e8 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e180      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x23a>
 8005d38:	e01a      	b.n	8005d70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d3a:	4b09      	ldr	r3, [pc, #36]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3e:	4a08      	ldr	r2, [pc, #32]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d46:	f7ff facf 	bl	80052e8 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d4c:	e00a      	b.n	8005d64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d4e:	f7ff facb 	bl	80052e8 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d903      	bls.n	8005d64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e166      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
 8005d60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d64:	4b92      	ldr	r3, [pc, #584]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1ee      	bne.n	8005d4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80a4 	beq.w	8005ec6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7e:	4b8c      	ldr	r3, [pc, #560]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d8a:	4b89      	ldr	r3, [pc, #548]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	4a88      	ldr	r2, [pc, #544]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d96:	4b86      	ldr	r3, [pc, #536]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005da6:	4b83      	ldr	r3, [pc, #524]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d118      	bne.n	8005de4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005db2:	4b80      	ldr	r3, [pc, #512]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a7f      	ldr	r2, [pc, #508]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d4>)
 8005db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dbe:	f7ff fa93 	bl	80052e8 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc6:	f7ff fa8f 	bl	80052e8 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b64      	cmp	r3, #100	@ 0x64
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e12a      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dd8:	4b76      	ldr	r3, [pc, #472]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d106      	bne.n	8005dfa <HAL_RCC_OscConfig+0x31a>
 8005dec:	4b70      	ldr	r3, [pc, #448]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df0:	4a6f      	ldr	r2, [pc, #444]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005df8:	e02d      	b.n	8005e56 <HAL_RCC_OscConfig+0x376>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x33c>
 8005e02:	4b6b      	ldr	r3, [pc, #428]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e06:	4a6a      	ldr	r2, [pc, #424]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e0e:	4b68      	ldr	r3, [pc, #416]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e12:	4a67      	ldr	r2, [pc, #412]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e14:	f023 0304 	bic.w	r3, r3, #4
 8005e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e1a:	e01c      	b.n	8005e56 <HAL_RCC_OscConfig+0x376>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b05      	cmp	r3, #5
 8005e22:	d10c      	bne.n	8005e3e <HAL_RCC_OscConfig+0x35e>
 8005e24:	4b62      	ldr	r3, [pc, #392]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e28:	4a61      	ldr	r2, [pc, #388]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e2a:	f043 0304 	orr.w	r3, r3, #4
 8005e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e30:	4b5f      	ldr	r3, [pc, #380]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e34:	4a5e      	ldr	r2, [pc, #376]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e3c:	e00b      	b.n	8005e56 <HAL_RCC_OscConfig+0x376>
 8005e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e42:	4a5b      	ldr	r2, [pc, #364]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e4a:	4b59      	ldr	r3, [pc, #356]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4e:	4a58      	ldr	r2, [pc, #352]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e50:	f023 0304 	bic.w	r3, r3, #4
 8005e54:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d015      	beq.n	8005e8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5e:	f7ff fa43 	bl	80052e8 <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e64:	e00a      	b.n	8005e7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e66:	f7ff fa3f 	bl	80052e8 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e0d8      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0ee      	beq.n	8005e66 <HAL_RCC_OscConfig+0x386>
 8005e88:	e014      	b.n	8005eb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8a:	f7ff fa2d 	bl	80052e8 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e90:	e00a      	b.n	8005ea8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e92:	f7ff fa29 	bl	80052e8 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e0c2      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea8:	4b41      	ldr	r3, [pc, #260]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1ee      	bne.n	8005e92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d105      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eba:	4b3d      	ldr	r3, [pc, #244]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ec4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 80ae 	beq.w	800602c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ed0:	4b37      	ldr	r3, [pc, #220]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 030c 	and.w	r3, r3, #12
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d06d      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d14b      	bne.n	8005f7c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee4:	4b32      	ldr	r3, [pc, #200]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a31      	ldr	r2, [pc, #196]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef0:	f7ff f9fa 	bl	80052e8 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7ff f9f6 	bl	80052e8 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e091      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0a:	4b29      	ldr	r3, [pc, #164]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69da      	ldr	r2, [r3, #28]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	019b      	lsls	r3, r3, #6
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f38:	061b      	lsls	r3, r3, #24
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f40:	071b      	lsls	r3, r3, #28
 8005f42:	491b      	ldr	r1, [pc, #108]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f48:	4b19      	ldr	r3, [pc, #100]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a18      	ldr	r2, [pc, #96]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f54:	f7ff f9c8 	bl	80052e8 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f5c:	f7ff f9c4 	bl	80052e8 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e05f      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6e:	4b10      	ldr	r3, [pc, #64]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f0      	beq.n	8005f5c <HAL_RCC_OscConfig+0x47c>
 8005f7a:	e057      	b.n	800602c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a0b      	ldr	r2, [pc, #44]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7ff f9ae 	bl	80052e8 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f90:	f7ff f9aa 	bl	80052e8 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e045      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fa2:	4b03      	ldr	r3, [pc, #12]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1f0      	bne.n	8005f90 <HAL_RCC_OscConfig+0x4b0>
 8005fae:	e03d      	b.n	800602c <HAL_RCC_OscConfig+0x54c>
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8006038 <HAL_RCC_OscConfig+0x558>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d030      	beq.n	8006028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d129      	bne.n	8006028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d122      	bne.n	8006028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d119      	bne.n	8006028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	3b01      	subs	r3, #1
 8006002:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d10f      	bne.n	8006028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006012:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006014:	429a      	cmp	r2, r3
 8006016:	d107      	bne.n	8006028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006022:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006024:	429a      	cmp	r2, r3
 8006026:	d001      	beq.n	800602c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40023800 	.word	0x40023800

0800603c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0d0      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006054:	4b6a      	ldr	r3, [pc, #424]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d910      	bls.n	8006084 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006062:	4b67      	ldr	r3, [pc, #412]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f023 020f 	bic.w	r2, r3, #15
 800606a:	4965      	ldr	r1, [pc, #404]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	4313      	orrs	r3, r2
 8006070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006072:	4b63      	ldr	r3, [pc, #396]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d001      	beq.n	8006084 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e0b8      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d020      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800609c:	4b59      	ldr	r3, [pc, #356]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4a58      	ldr	r2, [pc, #352]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060b4:	4b53      	ldr	r3, [pc, #332]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	4a52      	ldr	r2, [pc, #328]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c0:	4b50      	ldr	r3, [pc, #320]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	494d      	ldr	r1, [pc, #308]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d040      	beq.n	8006160 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d107      	bne.n	80060f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e6:	4b47      	ldr	r3, [pc, #284]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d115      	bne.n	800611e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e07f      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d107      	bne.n	800610e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060fe:	4b41      	ldr	r3, [pc, #260]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e073      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610e:	4b3d      	ldr	r3, [pc, #244]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e06b      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800611e:	4b39      	ldr	r3, [pc, #228]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f023 0203 	bic.w	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4936      	ldr	r1, [pc, #216]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 800612c:	4313      	orrs	r3, r2
 800612e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006130:	f7ff f8da 	bl	80052e8 <HAL_GetTick>
 8006134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006136:	e00a      	b.n	800614e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006138:	f7ff f8d6 	bl	80052e8 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006146:	4293      	cmp	r3, r2
 8006148:	d901      	bls.n	800614e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e053      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800614e:	4b2d      	ldr	r3, [pc, #180]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 020c 	and.w	r2, r3, #12
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	429a      	cmp	r2, r3
 800615e:	d1eb      	bne.n	8006138 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006160:	4b27      	ldr	r3, [pc, #156]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d210      	bcs.n	8006190 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616e:	4b24      	ldr	r3, [pc, #144]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f023 020f 	bic.w	r2, r3, #15
 8006176:	4922      	ldr	r1, [pc, #136]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	4313      	orrs	r3, r2
 800617c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b20      	ldr	r3, [pc, #128]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e032      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800619c:	4b19      	ldr	r3, [pc, #100]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	4916      	ldr	r1, [pc, #88]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061ba:	4b12      	ldr	r3, [pc, #72]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	490e      	ldr	r1, [pc, #56]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ce:	f000 f821 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80061d2:	4602      	mov	r2, r0
 80061d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	490a      	ldr	r1, [pc, #40]	@ (8006208 <HAL_RCC_ClockConfig+0x1cc>)
 80061e0:	5ccb      	ldrb	r3, [r1, r3]
 80061e2:	fa22 f303 	lsr.w	r3, r2, r3
 80061e6:	4a09      	ldr	r2, [pc, #36]	@ (800620c <HAL_RCC_ClockConfig+0x1d0>)
 80061e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061ea:	4b09      	ldr	r3, [pc, #36]	@ (8006210 <HAL_RCC_ClockConfig+0x1d4>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff f836 	bl	8005260 <HAL_InitTick>

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40023c00 	.word	0x40023c00
 8006204:	40023800 	.word	0x40023800
 8006208:	0800b8a0 	.word	0x0800b8a0
 800620c:	20000008 	.word	0x20000008
 8006210:	2000000c 	.word	0x2000000c

08006214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006218:	b090      	sub	sp, #64	@ 0x40
 800621a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006220:	2300      	movs	r3, #0
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006224:	2300      	movs	r3, #0
 8006226:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800622c:	4b59      	ldr	r3, [pc, #356]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f003 030c 	and.w	r3, r3, #12
 8006234:	2b08      	cmp	r3, #8
 8006236:	d00d      	beq.n	8006254 <HAL_RCC_GetSysClockFreq+0x40>
 8006238:	2b08      	cmp	r3, #8
 800623a:	f200 80a1 	bhi.w	8006380 <HAL_RCC_GetSysClockFreq+0x16c>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_RCC_GetSysClockFreq+0x34>
 8006242:	2b04      	cmp	r3, #4
 8006244:	d003      	beq.n	800624e <HAL_RCC_GetSysClockFreq+0x3a>
 8006246:	e09b      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006248:	4b53      	ldr	r3, [pc, #332]	@ (8006398 <HAL_RCC_GetSysClockFreq+0x184>)
 800624a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800624c:	e09b      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800624e:	4b53      	ldr	r3, [pc, #332]	@ (800639c <HAL_RCC_GetSysClockFreq+0x188>)
 8006250:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006252:	e098      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006254:	4b4f      	ldr	r3, [pc, #316]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800625c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800625e:	4b4d      	ldr	r3, [pc, #308]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d028      	beq.n	80062bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626a:	4b4a      	ldr	r3, [pc, #296]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	099b      	lsrs	r3, r3, #6
 8006270:	2200      	movs	r2, #0
 8006272:	623b      	str	r3, [r7, #32]
 8006274:	627a      	str	r2, [r7, #36]	@ 0x24
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800627c:	2100      	movs	r1, #0
 800627e:	4b47      	ldr	r3, [pc, #284]	@ (800639c <HAL_RCC_GetSysClockFreq+0x188>)
 8006280:	fb03 f201 	mul.w	r2, r3, r1
 8006284:	2300      	movs	r3, #0
 8006286:	fb00 f303 	mul.w	r3, r0, r3
 800628a:	4413      	add	r3, r2
 800628c:	4a43      	ldr	r2, [pc, #268]	@ (800639c <HAL_RCC_GetSysClockFreq+0x188>)
 800628e:	fba0 1202 	umull	r1, r2, r0, r2
 8006292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006294:	460a      	mov	r2, r1
 8006296:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800629a:	4413      	add	r3, r2
 800629c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800629e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a0:	2200      	movs	r2, #0
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	61fa      	str	r2, [r7, #28]
 80062a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80062ae:	f7f9 ffcf 	bl	8000250 <__aeabi_uldivmod>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4613      	mov	r3, r2
 80062b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062ba:	e053      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062bc:	4b35      	ldr	r3, [pc, #212]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	099b      	lsrs	r3, r3, #6
 80062c2:	2200      	movs	r2, #0
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	617a      	str	r2, [r7, #20]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80062ce:	f04f 0b00 	mov.w	fp, #0
 80062d2:	4652      	mov	r2, sl
 80062d4:	465b      	mov	r3, fp
 80062d6:	f04f 0000 	mov.w	r0, #0
 80062da:	f04f 0100 	mov.w	r1, #0
 80062de:	0159      	lsls	r1, r3, #5
 80062e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062e4:	0150      	lsls	r0, r2, #5
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	ebb2 080a 	subs.w	r8, r2, sl
 80062ee:	eb63 090b 	sbc.w	r9, r3, fp
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80062fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006302:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006306:	ebb2 0408 	subs.w	r4, r2, r8
 800630a:	eb63 0509 	sbc.w	r5, r3, r9
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	00eb      	lsls	r3, r5, #3
 8006318:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800631c:	00e2      	lsls	r2, r4, #3
 800631e:	4614      	mov	r4, r2
 8006320:	461d      	mov	r5, r3
 8006322:	eb14 030a 	adds.w	r3, r4, sl
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	eb45 030b 	adc.w	r3, r5, fp
 800632c:	607b      	str	r3, [r7, #4]
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800633a:	4629      	mov	r1, r5
 800633c:	028b      	lsls	r3, r1, #10
 800633e:	4621      	mov	r1, r4
 8006340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006344:	4621      	mov	r1, r4
 8006346:	028a      	lsls	r2, r1, #10
 8006348:	4610      	mov	r0, r2
 800634a:	4619      	mov	r1, r3
 800634c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800634e:	2200      	movs	r2, #0
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	60fa      	str	r2, [r7, #12]
 8006354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006358:	f7f9 ff7a 	bl	8000250 <__aeabi_uldivmod>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4613      	mov	r3, r2
 8006362:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006364:	4b0b      	ldr	r3, [pc, #44]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	0c1b      	lsrs	r3, r3, #16
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	3301      	adds	r3, #1
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006374:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	fbb2 f3f3 	udiv	r3, r2, r3
 800637c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800637e:	e002      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006380:	4b05      	ldr	r3, [pc, #20]	@ (8006398 <HAL_RCC_GetSysClockFreq+0x184>)
 8006382:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006388:	4618      	mov	r0, r3
 800638a:	3740      	adds	r7, #64	@ 0x40
 800638c:	46bd      	mov	sp, r7
 800638e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006392:	bf00      	nop
 8006394:	40023800 	.word	0x40023800
 8006398:	00f42400 	.word	0x00f42400
 800639c:	017d7840 	.word	0x017d7840

080063a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063a4:	4b03      	ldr	r3, [pc, #12]	@ (80063b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80063a6:	681b      	ldr	r3, [r3, #0]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000008 	.word	0x20000008

080063b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063bc:	f7ff fff0 	bl	80063a0 <HAL_RCC_GetHCLKFreq>
 80063c0:	4602      	mov	r2, r0
 80063c2:	4b05      	ldr	r3, [pc, #20]	@ (80063d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	0a9b      	lsrs	r3, r3, #10
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	4903      	ldr	r1, [pc, #12]	@ (80063dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ce:	5ccb      	ldrb	r3, [r1, r3]
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40023800 	.word	0x40023800
 80063dc:	0800b8b0 	.word	0x0800b8b0

080063e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063e4:	f7ff ffdc 	bl	80063a0 <HAL_RCC_GetHCLKFreq>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	0b5b      	lsrs	r3, r3, #13
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	4903      	ldr	r1, [pc, #12]	@ (8006404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063f6:	5ccb      	ldrb	r3, [r1, r3]
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40023800 	.word	0x40023800
 8006404:	0800b8b0 	.word	0x0800b8b0

08006408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d012      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006430:	4b69      	ldr	r3, [pc, #420]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4a68      	ldr	r2, [pc, #416]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006436:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800643a:	6093      	str	r3, [r2, #8]
 800643c:	4b66      	ldr	r3, [pc, #408]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006444:	4964      	ldr	r1, [pc, #400]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006446:	4313      	orrs	r3, r2
 8006448:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006452:	2301      	movs	r3, #1
 8006454:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d017      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006462:	4b5d      	ldr	r3, [pc, #372]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006468:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006470:	4959      	ldr	r1, [pc, #356]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006480:	d101      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006482:	2301      	movs	r3, #1
 8006484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800648e:	2301      	movs	r3, #1
 8006490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d017      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800649e:	4b4e      	ldr	r3, [pc, #312]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ac:	494a      	ldr	r1, [pc, #296]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064bc:	d101      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80064be:	2301      	movs	r3, #1
 80064c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80064ca:	2301      	movs	r3, #1
 80064cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80064da:	2301      	movs	r3, #1
 80064dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 808b 	beq.w	8006602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064ec:	4b3a      	ldr	r3, [pc, #232]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f0:	4a39      	ldr	r2, [pc, #228]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80064f8:	4b37      	ldr	r3, [pc, #220]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006504:	4b35      	ldr	r3, [pc, #212]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a34      	ldr	r2, [pc, #208]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800650a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800650e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006510:	f7fe feea 	bl	80052e8 <HAL_GetTick>
 8006514:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006516:	e008      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006518:	f7fe fee6 	bl	80052e8 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b64      	cmp	r3, #100	@ 0x64
 8006524:	d901      	bls.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e38f      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800652a:	4b2c      	ldr	r3, [pc, #176]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f0      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006536:	4b28      	ldr	r3, [pc, #160]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800653e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d035      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	429a      	cmp	r2, r3
 8006552:	d02e      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006554:	4b20      	ldr	r3, [pc, #128]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800655c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800655e:	4b1e      	ldr	r3, [pc, #120]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006562:	4a1d      	ldr	r2, [pc, #116]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006568:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800656a:	4b1b      	ldr	r3, [pc, #108]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	4a1a      	ldr	r2, [pc, #104]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006574:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006576:	4a18      	ldr	r2, [pc, #96]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800657c:	4b16      	ldr	r3, [pc, #88]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b01      	cmp	r3, #1
 8006586:	d114      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006588:	f7fe feae 	bl	80052e8 <HAL_GetTick>
 800658c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800658e:	e00a      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006590:	f7fe feaa 	bl	80052e8 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659e:	4293      	cmp	r3, r2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e351      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a6:	4b0c      	ldr	r3, [pc, #48]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0ee      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065be:	d111      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80065c0:	4b05      	ldr	r3, [pc, #20]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80065cc:	4b04      	ldr	r3, [pc, #16]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80065ce:	400b      	ands	r3, r1
 80065d0:	4901      	ldr	r1, [pc, #4]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	608b      	str	r3, [r1, #8]
 80065d6:	e00b      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80065d8:	40023800 	.word	0x40023800
 80065dc:	40007000 	.word	0x40007000
 80065e0:	0ffffcff 	.word	0x0ffffcff
 80065e4:	4bac      	ldr	r3, [pc, #688]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	4aab      	ldr	r2, [pc, #684]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80065ee:	6093      	str	r3, [r2, #8]
 80065f0:	4ba9      	ldr	r3, [pc, #676]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065fc:	49a6      	ldr	r1, [pc, #664]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b00      	cmp	r3, #0
 800660c:	d010      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800660e:	4ba2      	ldr	r3, [pc, #648]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006614:	4aa0      	ldr	r2, [pc, #640]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800661a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800661e:	4b9e      	ldr	r3, [pc, #632]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006620:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006628:	499b      	ldr	r1, [pc, #620]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800663c:	4b96      	ldr	r3, [pc, #600]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006642:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800664a:	4993      	ldr	r1, [pc, #588]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800665e:	4b8e      	ldr	r3, [pc, #568]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006664:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800666c:	498a      	ldr	r1, [pc, #552]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800666e:	4313      	orrs	r3, r2
 8006670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006680:	4b85      	ldr	r3, [pc, #532]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006686:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800668e:	4982      	ldr	r1, [pc, #520]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066a2:	4b7d      	ldr	r3, [pc, #500]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b0:	4979      	ldr	r1, [pc, #484]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066c4:	4b74      	ldr	r3, [pc, #464]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ca:	f023 0203 	bic.w	r2, r3, #3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d2:	4971      	ldr	r1, [pc, #452]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066e6:	4b6c      	ldr	r3, [pc, #432]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ec:	f023 020c 	bic.w	r2, r3, #12
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f4:	4968      	ldr	r1, [pc, #416]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006708:	4b63      	ldr	r3, [pc, #396]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800670a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800670e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006716:	4960      	ldr	r1, [pc, #384]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800672a:	4b5b      	ldr	r3, [pc, #364]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800672c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006730:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006738:	4957      	ldr	r1, [pc, #348]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800674c:	4b52      	ldr	r3, [pc, #328]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006752:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675a:	494f      	ldr	r1, [pc, #316]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800676e:	4b4a      	ldr	r3, [pc, #296]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006774:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677c:	4946      	ldr	r1, [pc, #280]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00a      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006790:	4b41      	ldr	r3, [pc, #260]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006796:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800679e:	493e      	ldr	r1, [pc, #248]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80067b2:	4b39      	ldr	r3, [pc, #228]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c0:	4935      	ldr	r1, [pc, #212]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067d4:	4b30      	ldr	r3, [pc, #192]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067e2:	492d      	ldr	r1, [pc, #180]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d011      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80067f6:	4b28      	ldr	r3, [pc, #160]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006804:	4924      	ldr	r1, [pc, #144]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006814:	d101      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006816:	2301      	movs	r3, #1
 8006818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006826:	2301      	movs	r3, #1
 8006828:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006836:	4b18      	ldr	r3, [pc, #96]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006844:	4914      	ldr	r1, [pc, #80]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006858:	4b0f      	ldr	r3, [pc, #60]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800685a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800685e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006868:	490b      	ldr	r1, [pc, #44]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00f      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800687c:	4b06      	ldr	r3, [pc, #24]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006882:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800688c:	4902      	ldr	r1, [pc, #8]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006894:	e002      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006896:	bf00      	nop
 8006898:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068a8:	4b8a      	ldr	r3, [pc, #552]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b8:	4986      	ldr	r1, [pc, #536]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80068cc:	4b81      	ldr	r3, [pc, #516]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068dc:	497d      	ldr	r1, [pc, #500]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d006      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80d6 	beq.w	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068f8:	4b76      	ldr	r3, [pc, #472]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a75      	ldr	r2, [pc, #468]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006904:	f7fe fcf0 	bl	80052e8 <HAL_GetTick>
 8006908:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800690a:	e008      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800690c:	f7fe fcec 	bl	80052e8 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b64      	cmp	r3, #100	@ 0x64
 8006918:	d901      	bls.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e195      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800691e:	4b6d      	ldr	r3, [pc, #436]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1f0      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d021      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693a:	2b00      	cmp	r3, #0
 800693c:	d11d      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800693e:	4b65      	ldr	r3, [pc, #404]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006944:	0c1b      	lsrs	r3, r3, #16
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800694c:	4b61      	ldr	r3, [pc, #388]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800694e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006952:	0e1b      	lsrs	r3, r3, #24
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	019a      	lsls	r2, r3, #6
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	041b      	lsls	r3, r3, #16
 8006964:	431a      	orrs	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	061b      	lsls	r3, r3, #24
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	071b      	lsls	r3, r3, #28
 8006972:	4958      	ldr	r1, [pc, #352]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d004      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800698a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800698e:	d00a      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006998:	2b00      	cmp	r3, #0
 800699a:	d02e      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069a4:	d129      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069a6:	4b4b      	ldr	r3, [pc, #300]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ac:	0c1b      	lsrs	r3, r3, #16
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069b4:	4b47      	ldr	r3, [pc, #284]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ba:	0f1b      	lsrs	r3, r3, #28
 80069bc:	f003 0307 	and.w	r3, r3, #7
 80069c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	019a      	lsls	r2, r3, #6
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	041b      	lsls	r3, r3, #16
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	061b      	lsls	r3, r3, #24
 80069d4:	431a      	orrs	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	071b      	lsls	r3, r3, #28
 80069da:	493e      	ldr	r1, [pc, #248]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069e2:	4b3c      	ldr	r3, [pc, #240]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069e8:	f023 021f 	bic.w	r2, r3, #31
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	3b01      	subs	r3, #1
 80069f2:	4938      	ldr	r1, [pc, #224]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01d      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a06:	4b33      	ldr	r3, [pc, #204]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0c:	0e1b      	lsrs	r3, r3, #24
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a14:	4b2f      	ldr	r3, [pc, #188]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a1a:	0f1b      	lsrs	r3, r3, #28
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	019a      	lsls	r2, r3, #6
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	041b      	lsls	r3, r3, #16
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	061b      	lsls	r3, r3, #24
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	071b      	lsls	r3, r3, #28
 8006a3a:	4926      	ldr	r1, [pc, #152]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d011      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	019a      	lsls	r2, r3, #6
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	041b      	lsls	r3, r3, #16
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	061b      	lsls	r3, r3, #24
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	071b      	lsls	r3, r3, #28
 8006a6a:	491a      	ldr	r1, [pc, #104]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a72:	4b18      	ldr	r3, [pc, #96]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a17      	ldr	r2, [pc, #92]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a7e:	f7fe fc33 	bl	80052e8 <HAL_GetTick>
 8006a82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a84:	e008      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a86:	f7fe fc2f 	bl	80052e8 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b64      	cmp	r3, #100	@ 0x64
 8006a92:	d901      	bls.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e0d8      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a98:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0f0      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	f040 80ce 	bne.w	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006aac:	4b09      	ldr	r3, [pc, #36]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a08      	ldr	r2, [pc, #32]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab8:	f7fe fc16 	bl	80052e8 <HAL_GetTick>
 8006abc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006abe:	e00b      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ac0:	f7fe fc12 	bl	80052e8 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b64      	cmp	r3, #100	@ 0x64
 8006acc:	d904      	bls.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e0bb      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006ad2:	bf00      	nop
 8006ad4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ae4:	d0ec      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d02e      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d12a      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b0e:	4b51      	ldr	r3, [pc, #324]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b14:	0c1b      	lsrs	r3, r3, #16
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b22:	0f1b      	lsrs	r3, r3, #28
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	019a      	lsls	r2, r3, #6
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	431a      	orrs	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	061b      	lsls	r3, r3, #24
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	071b      	lsls	r3, r3, #28
 8006b42:	4944      	ldr	r1, [pc, #272]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b4a:	4b42      	ldr	r3, [pc, #264]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b50:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	021b      	lsls	r3, r3, #8
 8006b5c:	493d      	ldr	r1, [pc, #244]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d022      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b78:	d11d      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b7a:	4b36      	ldr	r3, [pc, #216]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b80:	0e1b      	lsrs	r3, r3, #24
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b88:	4b32      	ldr	r3, [pc, #200]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b8e:	0f1b      	lsrs	r3, r3, #28
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	019a      	lsls	r2, r3, #6
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	041b      	lsls	r3, r3, #16
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	061b      	lsls	r3, r3, #24
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	071b      	lsls	r3, r3, #28
 8006bae:	4929      	ldr	r1, [pc, #164]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d028      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bc2:	4b24      	ldr	r3, [pc, #144]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc8:	0e1b      	lsrs	r3, r3, #24
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006bd0:	4b20      	ldr	r3, [pc, #128]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd6:	0c1b      	lsrs	r3, r3, #16
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	019a      	lsls	r2, r3, #6
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	041b      	lsls	r3, r3, #16
 8006be8:	431a      	orrs	r2, r3
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	061b      	lsls	r3, r3, #24
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	071b      	lsls	r3, r3, #28
 8006bf6:	4917      	ldr	r1, [pc, #92]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006bfe:	4b15      	ldr	r3, [pc, #84]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0c:	4911      	ldr	r1, [pc, #68]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c14:	4b0f      	ldr	r3, [pc, #60]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a0e      	ldr	r2, [pc, #56]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c20:	f7fe fb62 	bl	80052e8 <HAL_GetTick>
 8006c24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c26:	e008      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c28:	f7fe fb5e 	bl	80052e8 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b64      	cmp	r3, #100	@ 0x64
 8006c34:	d901      	bls.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e007      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c3a:	4b06      	ldr	r3, [pc, #24]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c46:	d1ef      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40023800 	.word	0x40023800

08006c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e09d      	b.n	8006da6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d108      	bne.n	8006c84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c7a:	d009      	beq.n	8006c90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	61da      	str	r2, [r3, #28]
 8006c82:	e005      	b.n	8006c90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fd f836 	bl	8003d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cd0:	d902      	bls.n	8006cd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	e002      	b.n	8006cde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006ce6:	d007      	beq.n	8006cf8 <HAL_SPI_Init+0xa0>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cf0:	d002      	beq.n	8006cf8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	431a      	orrs	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d30:	431a      	orrs	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d3a:	ea42 0103 	orr.w	r1, r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d42:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	0c1b      	lsrs	r3, r3, #16
 8006d54:	f003 0204 	and.w	r2, r3, #4
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d74:	ea42 0103 	orr.w	r1, r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69da      	ldr	r2, [r3, #28]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e040      	b.n	8006e42 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d106      	bne.n	8006dd6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fd f837 	bl	8003e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2224      	movs	r2, #36	@ 0x24
 8006dda:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0201 	bic.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fa8d 	bl	8007314 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f826 	bl	8006e4c <UART_SetConfig>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d101      	bne.n	8006e0a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e01b      	b.n	8006e42 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fb0c 	bl	8007458 <UART_CheckIdleState>
 8006e40:	4603      	mov	r3, r0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	4ba6      	ldr	r3, [pc, #664]	@ (8007110 <UART_SetConfig+0x2c4>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6812      	ldr	r2, [r2, #0]
 8006e7e:	6979      	ldr	r1, [r7, #20]
 8006e80:	430b      	orrs	r3, r1
 8006e82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a94      	ldr	r2, [pc, #592]	@ (8007114 <UART_SetConfig+0x2c8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d120      	bne.n	8006f0a <UART_SetConfig+0xbe>
 8006ec8:	4b93      	ldr	r3, [pc, #588]	@ (8007118 <UART_SetConfig+0x2cc>)
 8006eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ece:	f003 0303 	and.w	r3, r3, #3
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d816      	bhi.n	8006f04 <UART_SetConfig+0xb8>
 8006ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8006edc <UART_SetConfig+0x90>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006ef9 	.word	0x08006ef9
 8006ee4:	08006ef3 	.word	0x08006ef3
 8006ee8:	08006eff 	.word	0x08006eff
 8006eec:	2301      	movs	r3, #1
 8006eee:	77fb      	strb	r3, [r7, #31]
 8006ef0:	e150      	b.n	8007194 <UART_SetConfig+0x348>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	77fb      	strb	r3, [r7, #31]
 8006ef6:	e14d      	b.n	8007194 <UART_SetConfig+0x348>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e14a      	b.n	8007194 <UART_SetConfig+0x348>
 8006efe:	2308      	movs	r3, #8
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e147      	b.n	8007194 <UART_SetConfig+0x348>
 8006f04:	2310      	movs	r3, #16
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e144      	b.n	8007194 <UART_SetConfig+0x348>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a83      	ldr	r2, [pc, #524]	@ (800711c <UART_SetConfig+0x2d0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d132      	bne.n	8006f7a <UART_SetConfig+0x12e>
 8006f14:	4b80      	ldr	r3, [pc, #512]	@ (8007118 <UART_SetConfig+0x2cc>)
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f1a:	f003 030c 	and.w	r3, r3, #12
 8006f1e:	2b0c      	cmp	r3, #12
 8006f20:	d828      	bhi.n	8006f74 <UART_SetConfig+0x128>
 8006f22:	a201      	add	r2, pc, #4	@ (adr r2, 8006f28 <UART_SetConfig+0xdc>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f5d 	.word	0x08006f5d
 8006f2c:	08006f75 	.word	0x08006f75
 8006f30:	08006f75 	.word	0x08006f75
 8006f34:	08006f75 	.word	0x08006f75
 8006f38:	08006f69 	.word	0x08006f69
 8006f3c:	08006f75 	.word	0x08006f75
 8006f40:	08006f75 	.word	0x08006f75
 8006f44:	08006f75 	.word	0x08006f75
 8006f48:	08006f63 	.word	0x08006f63
 8006f4c:	08006f75 	.word	0x08006f75
 8006f50:	08006f75 	.word	0x08006f75
 8006f54:	08006f75 	.word	0x08006f75
 8006f58:	08006f6f 	.word	0x08006f6f
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e118      	b.n	8007194 <UART_SetConfig+0x348>
 8006f62:	2302      	movs	r3, #2
 8006f64:	77fb      	strb	r3, [r7, #31]
 8006f66:	e115      	b.n	8007194 <UART_SetConfig+0x348>
 8006f68:	2304      	movs	r3, #4
 8006f6a:	77fb      	strb	r3, [r7, #31]
 8006f6c:	e112      	b.n	8007194 <UART_SetConfig+0x348>
 8006f6e:	2308      	movs	r3, #8
 8006f70:	77fb      	strb	r3, [r7, #31]
 8006f72:	e10f      	b.n	8007194 <UART_SetConfig+0x348>
 8006f74:	2310      	movs	r3, #16
 8006f76:	77fb      	strb	r3, [r7, #31]
 8006f78:	e10c      	b.n	8007194 <UART_SetConfig+0x348>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a68      	ldr	r2, [pc, #416]	@ (8007120 <UART_SetConfig+0x2d4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d120      	bne.n	8006fc6 <UART_SetConfig+0x17a>
 8006f84:	4b64      	ldr	r3, [pc, #400]	@ (8007118 <UART_SetConfig+0x2cc>)
 8006f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f8a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f8e:	2b30      	cmp	r3, #48	@ 0x30
 8006f90:	d013      	beq.n	8006fba <UART_SetConfig+0x16e>
 8006f92:	2b30      	cmp	r3, #48	@ 0x30
 8006f94:	d814      	bhi.n	8006fc0 <UART_SetConfig+0x174>
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d009      	beq.n	8006fae <UART_SetConfig+0x162>
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	d810      	bhi.n	8006fc0 <UART_SetConfig+0x174>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <UART_SetConfig+0x15c>
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	d006      	beq.n	8006fb4 <UART_SetConfig+0x168>
 8006fa6:	e00b      	b.n	8006fc0 <UART_SetConfig+0x174>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	77fb      	strb	r3, [r7, #31]
 8006fac:	e0f2      	b.n	8007194 <UART_SetConfig+0x348>
 8006fae:	2302      	movs	r3, #2
 8006fb0:	77fb      	strb	r3, [r7, #31]
 8006fb2:	e0ef      	b.n	8007194 <UART_SetConfig+0x348>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	77fb      	strb	r3, [r7, #31]
 8006fb8:	e0ec      	b.n	8007194 <UART_SetConfig+0x348>
 8006fba:	2308      	movs	r3, #8
 8006fbc:	77fb      	strb	r3, [r7, #31]
 8006fbe:	e0e9      	b.n	8007194 <UART_SetConfig+0x348>
 8006fc0:	2310      	movs	r3, #16
 8006fc2:	77fb      	strb	r3, [r7, #31]
 8006fc4:	e0e6      	b.n	8007194 <UART_SetConfig+0x348>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a56      	ldr	r2, [pc, #344]	@ (8007124 <UART_SetConfig+0x2d8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d120      	bne.n	8007012 <UART_SetConfig+0x1c6>
 8006fd0:	4b51      	ldr	r3, [pc, #324]	@ (8007118 <UART_SetConfig+0x2cc>)
 8006fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006fda:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fdc:	d013      	beq.n	8007006 <UART_SetConfig+0x1ba>
 8006fde:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fe0:	d814      	bhi.n	800700c <UART_SetConfig+0x1c0>
 8006fe2:	2b80      	cmp	r3, #128	@ 0x80
 8006fe4:	d009      	beq.n	8006ffa <UART_SetConfig+0x1ae>
 8006fe6:	2b80      	cmp	r3, #128	@ 0x80
 8006fe8:	d810      	bhi.n	800700c <UART_SetConfig+0x1c0>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <UART_SetConfig+0x1a8>
 8006fee:	2b40      	cmp	r3, #64	@ 0x40
 8006ff0:	d006      	beq.n	8007000 <UART_SetConfig+0x1b4>
 8006ff2:	e00b      	b.n	800700c <UART_SetConfig+0x1c0>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	77fb      	strb	r3, [r7, #31]
 8006ff8:	e0cc      	b.n	8007194 <UART_SetConfig+0x348>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	e0c9      	b.n	8007194 <UART_SetConfig+0x348>
 8007000:	2304      	movs	r3, #4
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e0c6      	b.n	8007194 <UART_SetConfig+0x348>
 8007006:	2308      	movs	r3, #8
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e0c3      	b.n	8007194 <UART_SetConfig+0x348>
 800700c:	2310      	movs	r3, #16
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	e0c0      	b.n	8007194 <UART_SetConfig+0x348>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a44      	ldr	r2, [pc, #272]	@ (8007128 <UART_SetConfig+0x2dc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d125      	bne.n	8007068 <UART_SetConfig+0x21c>
 800701c:	4b3e      	ldr	r3, [pc, #248]	@ (8007118 <UART_SetConfig+0x2cc>)
 800701e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800702a:	d017      	beq.n	800705c <UART_SetConfig+0x210>
 800702c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007030:	d817      	bhi.n	8007062 <UART_SetConfig+0x216>
 8007032:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007036:	d00b      	beq.n	8007050 <UART_SetConfig+0x204>
 8007038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800703c:	d811      	bhi.n	8007062 <UART_SetConfig+0x216>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <UART_SetConfig+0x1fe>
 8007042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007046:	d006      	beq.n	8007056 <UART_SetConfig+0x20a>
 8007048:	e00b      	b.n	8007062 <UART_SetConfig+0x216>
 800704a:	2300      	movs	r3, #0
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e0a1      	b.n	8007194 <UART_SetConfig+0x348>
 8007050:	2302      	movs	r3, #2
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e09e      	b.n	8007194 <UART_SetConfig+0x348>
 8007056:	2304      	movs	r3, #4
 8007058:	77fb      	strb	r3, [r7, #31]
 800705a:	e09b      	b.n	8007194 <UART_SetConfig+0x348>
 800705c:	2308      	movs	r3, #8
 800705e:	77fb      	strb	r3, [r7, #31]
 8007060:	e098      	b.n	8007194 <UART_SetConfig+0x348>
 8007062:	2310      	movs	r3, #16
 8007064:	77fb      	strb	r3, [r7, #31]
 8007066:	e095      	b.n	8007194 <UART_SetConfig+0x348>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a2f      	ldr	r2, [pc, #188]	@ (800712c <UART_SetConfig+0x2e0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d125      	bne.n	80070be <UART_SetConfig+0x272>
 8007072:	4b29      	ldr	r3, [pc, #164]	@ (8007118 <UART_SetConfig+0x2cc>)
 8007074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007078:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800707c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007080:	d017      	beq.n	80070b2 <UART_SetConfig+0x266>
 8007082:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007086:	d817      	bhi.n	80070b8 <UART_SetConfig+0x26c>
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800708c:	d00b      	beq.n	80070a6 <UART_SetConfig+0x25a>
 800708e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007092:	d811      	bhi.n	80070b8 <UART_SetConfig+0x26c>
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <UART_SetConfig+0x254>
 8007098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800709c:	d006      	beq.n	80070ac <UART_SetConfig+0x260>
 800709e:	e00b      	b.n	80070b8 <UART_SetConfig+0x26c>
 80070a0:	2301      	movs	r3, #1
 80070a2:	77fb      	strb	r3, [r7, #31]
 80070a4:	e076      	b.n	8007194 <UART_SetConfig+0x348>
 80070a6:	2302      	movs	r3, #2
 80070a8:	77fb      	strb	r3, [r7, #31]
 80070aa:	e073      	b.n	8007194 <UART_SetConfig+0x348>
 80070ac:	2304      	movs	r3, #4
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	e070      	b.n	8007194 <UART_SetConfig+0x348>
 80070b2:	2308      	movs	r3, #8
 80070b4:	77fb      	strb	r3, [r7, #31]
 80070b6:	e06d      	b.n	8007194 <UART_SetConfig+0x348>
 80070b8:	2310      	movs	r3, #16
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	e06a      	b.n	8007194 <UART_SetConfig+0x348>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007130 <UART_SetConfig+0x2e4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d138      	bne.n	800713a <UART_SetConfig+0x2ee>
 80070c8:	4b13      	ldr	r3, [pc, #76]	@ (8007118 <UART_SetConfig+0x2cc>)
 80070ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80070d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070d6:	d017      	beq.n	8007108 <UART_SetConfig+0x2bc>
 80070d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070dc:	d82a      	bhi.n	8007134 <UART_SetConfig+0x2e8>
 80070de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070e2:	d00b      	beq.n	80070fc <UART_SetConfig+0x2b0>
 80070e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070e8:	d824      	bhi.n	8007134 <UART_SetConfig+0x2e8>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <UART_SetConfig+0x2aa>
 80070ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070f2:	d006      	beq.n	8007102 <UART_SetConfig+0x2b6>
 80070f4:	e01e      	b.n	8007134 <UART_SetConfig+0x2e8>
 80070f6:	2300      	movs	r3, #0
 80070f8:	77fb      	strb	r3, [r7, #31]
 80070fa:	e04b      	b.n	8007194 <UART_SetConfig+0x348>
 80070fc:	2302      	movs	r3, #2
 80070fe:	77fb      	strb	r3, [r7, #31]
 8007100:	e048      	b.n	8007194 <UART_SetConfig+0x348>
 8007102:	2304      	movs	r3, #4
 8007104:	77fb      	strb	r3, [r7, #31]
 8007106:	e045      	b.n	8007194 <UART_SetConfig+0x348>
 8007108:	2308      	movs	r3, #8
 800710a:	77fb      	strb	r3, [r7, #31]
 800710c:	e042      	b.n	8007194 <UART_SetConfig+0x348>
 800710e:	bf00      	nop
 8007110:	efff69f3 	.word	0xefff69f3
 8007114:	40011000 	.word	0x40011000
 8007118:	40023800 	.word	0x40023800
 800711c:	40004400 	.word	0x40004400
 8007120:	40004800 	.word	0x40004800
 8007124:	40004c00 	.word	0x40004c00
 8007128:	40005000 	.word	0x40005000
 800712c:	40011400 	.word	0x40011400
 8007130:	40007800 	.word	0x40007800
 8007134:	2310      	movs	r3, #16
 8007136:	77fb      	strb	r3, [r7, #31]
 8007138:	e02c      	b.n	8007194 <UART_SetConfig+0x348>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a72      	ldr	r2, [pc, #456]	@ (8007308 <UART_SetConfig+0x4bc>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d125      	bne.n	8007190 <UART_SetConfig+0x344>
 8007144:	4b71      	ldr	r3, [pc, #452]	@ (800730c <UART_SetConfig+0x4c0>)
 8007146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800714a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800714e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007152:	d017      	beq.n	8007184 <UART_SetConfig+0x338>
 8007154:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007158:	d817      	bhi.n	800718a <UART_SetConfig+0x33e>
 800715a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800715e:	d00b      	beq.n	8007178 <UART_SetConfig+0x32c>
 8007160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007164:	d811      	bhi.n	800718a <UART_SetConfig+0x33e>
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <UART_SetConfig+0x326>
 800716a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800716e:	d006      	beq.n	800717e <UART_SetConfig+0x332>
 8007170:	e00b      	b.n	800718a <UART_SetConfig+0x33e>
 8007172:	2300      	movs	r3, #0
 8007174:	77fb      	strb	r3, [r7, #31]
 8007176:	e00d      	b.n	8007194 <UART_SetConfig+0x348>
 8007178:	2302      	movs	r3, #2
 800717a:	77fb      	strb	r3, [r7, #31]
 800717c:	e00a      	b.n	8007194 <UART_SetConfig+0x348>
 800717e:	2304      	movs	r3, #4
 8007180:	77fb      	strb	r3, [r7, #31]
 8007182:	e007      	b.n	8007194 <UART_SetConfig+0x348>
 8007184:	2308      	movs	r3, #8
 8007186:	77fb      	strb	r3, [r7, #31]
 8007188:	e004      	b.n	8007194 <UART_SetConfig+0x348>
 800718a:	2310      	movs	r3, #16
 800718c:	77fb      	strb	r3, [r7, #31]
 800718e:	e001      	b.n	8007194 <UART_SetConfig+0x348>
 8007190:	2310      	movs	r3, #16
 8007192:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800719c:	d15b      	bne.n	8007256 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800719e:	7ffb      	ldrb	r3, [r7, #31]
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d828      	bhi.n	80071f6 <UART_SetConfig+0x3aa>
 80071a4:	a201      	add	r2, pc, #4	@ (adr r2, 80071ac <UART_SetConfig+0x360>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071d1 	.word	0x080071d1
 80071b0:	080071d9 	.word	0x080071d9
 80071b4:	080071e1 	.word	0x080071e1
 80071b8:	080071f7 	.word	0x080071f7
 80071bc:	080071e7 	.word	0x080071e7
 80071c0:	080071f7 	.word	0x080071f7
 80071c4:	080071f7 	.word	0x080071f7
 80071c8:	080071f7 	.word	0x080071f7
 80071cc:	080071ef 	.word	0x080071ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d0:	f7ff f8f2 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 80071d4:	61b8      	str	r0, [r7, #24]
        break;
 80071d6:	e013      	b.n	8007200 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071d8:	f7ff f902 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 80071dc:	61b8      	str	r0, [r7, #24]
        break;
 80071de:	e00f      	b.n	8007200 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071e0:	4b4b      	ldr	r3, [pc, #300]	@ (8007310 <UART_SetConfig+0x4c4>)
 80071e2:	61bb      	str	r3, [r7, #24]
        break;
 80071e4:	e00c      	b.n	8007200 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071e6:	f7ff f815 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80071ea:	61b8      	str	r0, [r7, #24]
        break;
 80071ec:	e008      	b.n	8007200 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071f2:	61bb      	str	r3, [r7, #24]
        break;
 80071f4:	e004      	b.n	8007200 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	77bb      	strb	r3, [r7, #30]
        break;
 80071fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d074      	beq.n	80072f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	005a      	lsls	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	441a      	add	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	fbb2 f3f3 	udiv	r3, r2, r3
 800721a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b0f      	cmp	r3, #15
 8007220:	d916      	bls.n	8007250 <UART_SetConfig+0x404>
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007228:	d212      	bcs.n	8007250 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f023 030f 	bic.w	r3, r3, #15
 8007232:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	b29b      	uxth	r3, r3
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	b29a      	uxth	r2, r3
 8007240:	89fb      	ldrh	r3, [r7, #14]
 8007242:	4313      	orrs	r3, r2
 8007244:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	89fa      	ldrh	r2, [r7, #14]
 800724c:	60da      	str	r2, [r3, #12]
 800724e:	e04f      	b.n	80072f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	77bb      	strb	r3, [r7, #30]
 8007254:	e04c      	b.n	80072f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007256:	7ffb      	ldrb	r3, [r7, #31]
 8007258:	2b08      	cmp	r3, #8
 800725a:	d828      	bhi.n	80072ae <UART_SetConfig+0x462>
 800725c:	a201      	add	r2, pc, #4	@ (adr r2, 8007264 <UART_SetConfig+0x418>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	08007289 	.word	0x08007289
 8007268:	08007291 	.word	0x08007291
 800726c:	08007299 	.word	0x08007299
 8007270:	080072af 	.word	0x080072af
 8007274:	0800729f 	.word	0x0800729f
 8007278:	080072af 	.word	0x080072af
 800727c:	080072af 	.word	0x080072af
 8007280:	080072af 	.word	0x080072af
 8007284:	080072a7 	.word	0x080072a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007288:	f7ff f896 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 800728c:	61b8      	str	r0, [r7, #24]
        break;
 800728e:	e013      	b.n	80072b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007290:	f7ff f8a6 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 8007294:	61b8      	str	r0, [r7, #24]
        break;
 8007296:	e00f      	b.n	80072b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007298:	4b1d      	ldr	r3, [pc, #116]	@ (8007310 <UART_SetConfig+0x4c4>)
 800729a:	61bb      	str	r3, [r7, #24]
        break;
 800729c:	e00c      	b.n	80072b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800729e:	f7fe ffb9 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80072a2:	61b8      	str	r0, [r7, #24]
        break;
 80072a4:	e008      	b.n	80072b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072aa:	61bb      	str	r3, [r7, #24]
        break;
 80072ac:	e004      	b.n	80072b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	77bb      	strb	r3, [r7, #30]
        break;
 80072b6:	bf00      	nop
    }

    if (pclk != 0U)
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d018      	beq.n	80072f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	085a      	lsrs	r2, r3, #1
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	441a      	add	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b0f      	cmp	r3, #15
 80072d6:	d909      	bls.n	80072ec <UART_SetConfig+0x4a0>
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072de:	d205      	bcs.n	80072ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60da      	str	r2, [r3, #12]
 80072ea:	e001      	b.n	80072f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80072fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	40007c00 	.word	0x40007c00
 800730c:	40023800 	.word	0x40023800
 8007310:	00f42400 	.word	0x00f42400

08007314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00a      	beq.n	8007382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00a      	beq.n	80073c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01a      	beq.n	800742a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007412:	d10a      	bne.n	800742a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	605a      	str	r2, [r3, #4]
  }
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b098      	sub	sp, #96	@ 0x60
 800745c:	af02      	add	r7, sp, #8
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007468:	f7fd ff3e 	bl	80052e8 <HAL_GetTick>
 800746c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b08      	cmp	r3, #8
 800747a:	d12e      	bne.n	80074da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800747c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007484:	2200      	movs	r2, #0
 8007486:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f88c 	bl	80075a8 <UART_WaitOnFlagUntilTimeout>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d021      	beq.n	80074da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80074b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e6      	bne.n	8007496 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e062      	b.n	80075a0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d149      	bne.n	800757c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074f0:	2200      	movs	r2, #0
 80074f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f856 	bl	80075a8 <UART_WaitOnFlagUntilTimeout>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d03c      	beq.n	800757c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	623b      	str	r3, [r7, #32]
   return(result);
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007520:	633b      	str	r3, [r7, #48]	@ 0x30
 8007522:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800752e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e6      	bne.n	8007502 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	60fb      	str	r3, [r7, #12]
   return(result);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0301 	bic.w	r3, r3, #1
 800754a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3308      	adds	r3, #8
 8007552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007554:	61fa      	str	r2, [r7, #28]
 8007556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	69b9      	ldr	r1, [r7, #24]
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	617b      	str	r3, [r7, #20]
   return(result);
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e5      	bne.n	8007534 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2220      	movs	r2, #32
 800756c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e011      	b.n	80075a0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3758      	adds	r7, #88	@ 0x58
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	4613      	mov	r3, r2
 80075b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b8:	e04f      	b.n	800765a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c0:	d04b      	beq.n	800765a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c2:	f7fd fe91 	bl	80052e8 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d302      	bcc.n	80075d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e04e      	b.n	800767a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0304 	and.w	r3, r3, #4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d037      	beq.n	800765a <UART_WaitOnFlagUntilTimeout+0xb2>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b80      	cmp	r3, #128	@ 0x80
 80075ee:	d034      	beq.n	800765a <UART_WaitOnFlagUntilTimeout+0xb2>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b40      	cmp	r3, #64	@ 0x40
 80075f4:	d031      	beq.n	800765a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b08      	cmp	r3, #8
 8007602:	d110      	bne.n	8007626 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2208      	movs	r2, #8
 800760a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f838 	bl	8007682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2208      	movs	r2, #8
 8007616:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e029      	b.n	800767a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007634:	d111      	bne.n	800765a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800763e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f81e 	bl	8007682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2220      	movs	r2, #32
 800764a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e00f      	b.n	800767a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4013      	ands	r3, r2
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	429a      	cmp	r2, r3
 8007668:	bf0c      	ite	eq
 800766a:	2301      	moveq	r3, #1
 800766c:	2300      	movne	r3, #0
 800766e:	b2db      	uxtb	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	429a      	cmp	r2, r3
 8007676:	d0a0      	beq.n	80075ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007682:	b480      	push	{r7}
 8007684:	b095      	sub	sp, #84	@ 0x54
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800769e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80076aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e6      	bne.n	800768a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e5      	bne.n	80076bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d118      	bne.n	800772a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	60bb      	str	r3, [r7, #8]
   return(result);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f023 0310 	bic.w	r3, r3, #16
 800770c:	647b      	str	r3, [r7, #68]	@ 0x44
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6979      	ldr	r1, [r7, #20]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	613b      	str	r3, [r7, #16]
   return(result);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e6      	bne.n	80076f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800773e:	bf00      	nop
 8007740:	3754      	adds	r7, #84	@ 0x54
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	4603      	mov	r3, r0
 8007752:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800775c:	2b84      	cmp	r3, #132	@ 0x84
 800775e:	d005      	beq.n	800776c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007760:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	3303      	adds	r3, #3
 800776a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800776c:	68fb      	ldr	r3, [r7, #12]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007780:	f3ef 8305 	mrs	r3, IPSR
 8007784:	607b      	str	r3, [r7, #4]
  return(result);
 8007786:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007788:	2b00      	cmp	r3, #0
 800778a:	bf14      	ite	ne
 800778c:	2301      	movne	r3, #1
 800778e:	2300      	moveq	r3, #0
 8007790:	b2db      	uxtb	r3, r3
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80077a2:	f001 fc15 	bl	8008fd0 <vTaskStartScheduler>
  
  return osOK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	bd80      	pop	{r7, pc}

080077ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80077ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ae:	b089      	sub	sp, #36	@ 0x24
 80077b0:	af04      	add	r7, sp, #16
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d020      	beq.n	8007800 <osThreadCreate+0x54>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d01c      	beq.n	8007800 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685c      	ldr	r4, [r3, #4]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691e      	ldr	r6, [r3, #16]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff ffb6 	bl	800774a <makeFreeRtosPriority>
 80077de:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077e8:	9202      	str	r2, [sp, #8]
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	9100      	str	r1, [sp, #0]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	4632      	mov	r2, r6
 80077f2:	4629      	mov	r1, r5
 80077f4:	4620      	mov	r0, r4
 80077f6:	f001 fa13 	bl	8008c20 <xTaskCreateStatic>
 80077fa:	4603      	mov	r3, r0
 80077fc:	60fb      	str	r3, [r7, #12]
 80077fe:	e01c      	b.n	800783a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685c      	ldr	r4, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800780c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff ff98 	bl	800774a <makeFreeRtosPriority>
 800781a:	4602      	mov	r2, r0
 800781c:	f107 030c 	add.w	r3, r7, #12
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	9200      	str	r2, [sp, #0]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	4632      	mov	r2, r6
 8007828:	4629      	mov	r1, r5
 800782a:	4620      	mov	r0, r4
 800782c:	f001 fa5e 	bl	8008cec <xTaskCreate>
 8007830:	4603      	mov	r3, r0
 8007832:	2b01      	cmp	r3, #1
 8007834:	d001      	beq.n	800783a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	e000      	b.n	800783c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800783a:	68fb      	ldr	r3, [r7, #12]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007844 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8007848:	f002 f824 	bl	8009894 <xTaskGetCurrentTaskHandle>
 800784c:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 800784e:	4618      	mov	r0, r3
 8007850:	bd80      	pop	{r7, pc}

08007852 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <osDelay+0x16>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	e000      	b.n	800786a <osDelay+0x18>
 8007868:	2301      	movs	r3, #1
 800786a:	4618      	mov	r0, r3
 800786c:	f001 fb78 	bl	8008f60 <vTaskDelay>
  
  return osOK;
 8007870:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af02      	add	r7, sp, #8
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	460b      	mov	r3, r1
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d013      	beq.n	80078ba <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8007892:	7afb      	ldrb	r3, [r7, #11]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d101      	bne.n	800789c <osTimerCreate+0x20>
 8007898:	2101      	movs	r1, #1
 800789a:	e000      	b.n	800789e <osTimerCreate+0x22>
 800789c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80078a6:	9201      	str	r2, [sp, #4]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	460a      	mov	r2, r1
 80078ae:	2101      	movs	r1, #1
 80078b0:	480b      	ldr	r0, [pc, #44]	@ (80078e0 <osTimerCreate+0x64>)
 80078b2:	f002 fb7a 	bl	8009faa <xTimerCreateStatic>
 80078b6:	4603      	mov	r3, r0
 80078b8:	e00e      	b.n	80078d8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80078ba:	7afb      	ldrb	r3, [r7, #11]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <osTimerCreate+0x48>
 80078c0:	2201      	movs	r2, #1
 80078c2:	e000      	b.n	80078c6 <osTimerCreate+0x4a>
 80078c4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2101      	movs	r1, #1
 80078d0:	4803      	ldr	r0, [pc, #12]	@ (80078e0 <osTimerCreate+0x64>)
 80078d2:	f002 fb49 	bl	8009f68 <xTimerCreate>
 80078d6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	0800b780 	.word	0x0800b780

080078e4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <osTimerStart+0x20>
    ticks = 1;
 8007900:	2301      	movs	r3, #1
 8007902:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8007904:	f7ff ff39 	bl	800777a <inHandlerMode>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01a      	beq.n	8007944 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	2200      	movs	r2, #0
 8007914:	9200      	str	r2, [sp, #0]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	2109      	movs	r1, #9
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f002 fbc8 	bl	800a0b0 <xTimerGenericCommand>
 8007920:	4603      	mov	r3, r0
 8007922:	2b01      	cmp	r3, #1
 8007924:	d002      	beq.n	800792c <osTimerStart+0x48>
    {
      result = osErrorOS;
 8007926:	23ff      	movs	r3, #255	@ 0xff
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	e018      	b.n	800795e <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d015      	beq.n	800795e <osTimerStart+0x7a>
 8007932:	4b0d      	ldr	r3, [pc, #52]	@ (8007968 <osTimerStart+0x84>)
 8007934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	e00c      	b.n	800795e <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007944:	2300      	movs	r3, #0
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	2300      	movs	r3, #0
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	2104      	movs	r1, #4
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f002 fbae 	bl	800a0b0 <xTimerGenericCommand>
 8007954:	4603      	mov	r3, r0
 8007956:	2b01      	cmp	r3, #1
 8007958:	d001      	beq.n	800795e <osTimerStart+0x7a>
      result = osErrorOS;
 800795a:	23ff      	movs	r3, #255	@ 0xff
 800795c:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800795e:	697b      	ldr	r3, [r7, #20]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af02      	add	r7, sp, #8
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800797a:	2300      	movs	r3, #0
 800797c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800797e:	f7ff fefc 	bl	800777a <inHandlerMode>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01c      	beq.n	80079c2 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	f107 0208 	add.w	r2, r7, #8
 800798e:	f107 030c 	add.w	r3, r7, #12
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	4613      	mov	r3, r2
 8007996:	2201      	movs	r2, #1
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f002 f94d 	bl	8009c38 <xTaskGenericNotifyFromISR>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d002      	beq.n	80079aa <osSignalSet+0x3e>
      return 0x80000000;
 80079a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80079a8:	e019      	b.n	80079de <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d015      	beq.n	80079dc <osSignalSet+0x70>
 80079b0:	4b0d      	ldr	r3, [pc, #52]	@ (80079e8 <osSignalSet+0x7c>)
 80079b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	e00c      	b.n	80079dc <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	f107 0308 	add.w	r3, r7, #8
 80079c8:	2201      	movs	r2, #1
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f002 f876 	bl	8009abc <xTaskGenericNotify>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d002      	beq.n	80079dc <osSignalSet+0x70>
    return 0x80000000;
 80079d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80079da:	e000      	b.n	80079de <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80079dc:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80079ec:	b590      	push	{r4, r7, lr}
 80079ee:	b089      	sub	sp, #36	@ 0x24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a06:	d103      	bne.n	8007a10 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8007a08:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	e009      	b.n	8007a24 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d006      	beq.n	8007a24 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <osSignalWait+0x38>
      ticks = 1;
 8007a20:	2301      	movs	r3, #1
 8007a22:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8007a24:	f7ff fea9 	bl	800777a <inHandlerMode>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8007a2e:	2382      	movs	r3, #130	@ 0x82
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	e01b      	b.n	8007a6c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	f107 0310 	add.w	r3, r7, #16
 8007a3a:	1d1a      	adds	r2, r3, #4
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f001 ffe2 	bl	8009a08 <xTaskNotifyWait>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d008      	beq.n	8007a5c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <osSignalWait+0x6a>
 8007a50:	2300      	movs	r3, #0
 8007a52:	613b      	str	r3, [r7, #16]
 8007a54:	e00a      	b.n	8007a6c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8007a56:	2340      	movs	r3, #64	@ 0x40
 8007a58:	613b      	str	r3, [r7, #16]
 8007a5a:	e007      	b.n	8007a6c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	da02      	bge.n	8007a68 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8007a62:	2386      	movs	r3, #134	@ 0x86
 8007a64:	613b      	str	r3, [r7, #16]
 8007a66:	e001      	b.n	8007a6c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8007a68:	2308      	movs	r3, #8
 8007a6a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	461c      	mov	r4, r3
 8007a70:	f107 0310 	add.w	r3, r7, #16
 8007a74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	3724      	adds	r7, #36	@ 0x24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd90      	pop	{r4, r7, pc}

08007a84 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	3303      	adds	r3, #3
 8007a92:	f023 0303 	bic.w	r3, r3, #3
 8007a96:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007a98:	2014      	movs	r0, #20
 8007a9a:	f003 f845 	bl	800ab28 <pvPortMalloc>
 8007a9e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d046      	beq.n	8007b34 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f003 f832 	bl	800ab28 <pvPortMalloc>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d02b      	beq.n	8007b2a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	fb02 f303 	mul.w	r3, r2, r3
 8007adc:	4618      	mov	r0, r3
 8007ade:	f003 f823 	bl	800ab28 <pvPortMalloc>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d011      	beq.n	8007b14 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007af0:	2300      	movs	r3, #0
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	e008      	b.n	8007b08 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	4413      	add	r3, r2
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	3301      	adds	r3, #1
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d3f1      	bcc.n	8007af6 <osPoolCreate+0x72>
 8007b12:	e00f      	b.n	8007b34 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f003 f8d3 	bl	800acc4 <vPortFree>
        vPortFree(thePool);
 8007b1e:	6978      	ldr	r0, [r7, #20]
 8007b20:	f003 f8d0 	bl	800acc4 <vPortFree>
        thePool = NULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	e004      	b.n	8007b34 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8007b2a:	6978      	ldr	r0, [r7, #20]
 8007b2c:	f003 f8ca 	bl	800acc4 <vPortFree>
      thePool = NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8007b34:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b08a      	sub	sp, #40	@ 0x28
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8007b4e:	f7ff fe14 	bl	800777a <inHandlerMode>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d010      	beq.n	8007b7a <osPoolAlloc+0x3c>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b58:	f3ef 8211 	mrs	r2, BASEPRI
 8007b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b60:	b672      	cpsid	i
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	b662      	cpsie	i
 8007b70:	617a      	str	r2, [r7, #20]
 8007b72:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b74:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b78:	e001      	b.n	8007b7e <osPoolAlloc+0x40>
  }
  else {
    vPortEnterCritical();
 8007b7a:	f002 fea7 	bl	800a8cc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61fb      	str	r3, [r7, #28]
 8007b82:	e029      	b.n	8007bd8 <osPoolAlloc+0x9a>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691a      	ldr	r2, [r3, #16]
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6892      	ldr	r2, [r2, #8]
 8007b90:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b94:	fb01 f202 	mul.w	r2, r1, r2
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d113      	bne.n	8007bd2 <osPoolAlloc+0x94>
      pool_id->markers[index] = 1;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	fb02 f303 	mul.w	r3, r2, r3
 8007bc6:	440b      	add	r3, r1
 8007bc8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	611a      	str	r2, [r3, #16]
      break;
 8007bd0:	e007      	b.n	8007be2 <osPoolAlloc+0xa4>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	61fb      	str	r3, [r7, #28]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	69fa      	ldr	r2, [r7, #28]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d3d0      	bcc.n	8007b84 <osPoolAlloc+0x46>
    }
  }
  
  if (inHandlerMode()) {
 8007be2:	f7ff fdca 	bl	800777a <inHandlerMode>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d005      	beq.n	8007bf8 <osPoolAlloc+0xba>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007bf6:	e001      	b.n	8007bfc <osPoolAlloc+0xbe>
  }
  else {
    vPortExitCritical();
 8007bf8:	f002 fe9e 	bl	800a938 <vPortExitCritical>
  }
  
  return p;
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3728      	adds	r7, #40	@ 0x28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <osPoolFree+0x14>
    return osErrorParameter;
 8007c16:	2380      	movs	r3, #128	@ 0x80
 8007c18:	e030      	b.n	8007c7c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <osPoolFree+0x1e>
    return osErrorParameter;
 8007c20:	2380      	movs	r3, #128	@ 0x80
 8007c22:	e02b      	b.n	8007c7c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d201      	bcs.n	8007c32 <osPoolFree+0x2c>
    return osErrorParameter;
 8007c2e:	2380      	movs	r3, #128	@ 0x80
 8007c30:	e024      	b.n	8007c7c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6812      	ldr	r2, [r2, #0]
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c46:	fb01 f202 	mul.w	r2, r1, r2
 8007c4a:	1a9b      	subs	r3, r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <osPoolFree+0x4e>
    return osErrorParameter;
 8007c50:	2380      	movs	r3, #128	@ 0x80
 8007c52:	e013      	b.n	8007c7c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c5e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d301      	bcc.n	8007c6e <osPoolFree+0x68>
    return osErrorParameter;
 8007c6a:	2380      	movs	r3, #128	@ 0x80
 8007c6c:	e006      	b.n	8007c7c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4413      	add	r3, r2
 8007c76:	2200      	movs	r2, #0
 8007c78:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8007c88:	b590      	push	{r4, r7, lr}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	613b      	str	r3, [r7, #16]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689c      	ldr	r4, [r3, #8]
 8007ca6:	200c      	movs	r0, #12
 8007ca8:	f002 ff3e 	bl	800ab28 <pvPortMalloc>
 8007cac:	4603      	mov	r3, r0
 8007cae:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <osMailCreate+0x36>
    return NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e038      	b.n	8007d30 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	681c      	ldr	r4, [r3, #0]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2104      	movs	r1, #4
 8007cd6:	f000 fab4 	bl	8008242 <xQueueGenericCreate>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d107      	bne.n	8007cfa <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f002 ffe7 	bl	800acc4 <vPortFree>
    return NULL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e01a      	b.n	8007d30 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	681c      	ldr	r4, [r3, #0]
 8007d00:	f107 030c 	add.w	r3, r7, #12
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff febd 	bl	8007a84 <osPoolCreate>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d107      	bne.n	8007d2a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f002 ffcf 	bl	800acc4 <vPortFree>
    return NULL;
 8007d26:	2300      	movs	r3, #0
 8007d28:	e002      	b.n	8007d30 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	371c      	adds	r7, #28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd90      	pop	{r4, r7, pc}

08007d38 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <osMailAlloc+0x14>
    return NULL;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	e006      	b.n	8007d5a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff fef4 	bl	8007b3e <osPoolAlloc>
 8007d56:	60f8      	str	r0, [r7, #12]
  
  return p;
 8007d58:	68fb      	ldr	r3, [r7, #12]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <osMailPut+0x14>
    return osErrorParameter;
 8007d74:	2380      	movs	r3, #128	@ 0x80
 8007d76:	e02c      	b.n	8007dd2 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8007d7c:	f7ff fcfd 	bl	800777a <inHandlerMode>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d018      	beq.n	8007db8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6858      	ldr	r0, [r3, #4]
 8007d8a:	f107 020c 	add.w	r2, r7, #12
 8007d8e:	4639      	mov	r1, r7
 8007d90:	2300      	movs	r3, #0
 8007d92:	f000 fbc3 	bl	800851c <xQueueGenericSendFromISR>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d001      	beq.n	8007da0 <osMailPut+0x3c>
      return osErrorOS;
 8007d9c:	23ff      	movs	r3, #255	@ 0xff
 8007d9e:	e018      	b.n	8007dd2 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d014      	beq.n	8007dd0 <osMailPut+0x6c>
 8007da6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ddc <osMailPut+0x78>)
 8007da8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	e00b      	b.n	8007dd0 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6858      	ldr	r0, [r3, #4]
 8007dbc:	4639      	mov	r1, r7
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f000 faa1 	bl	8008308 <xQueueGenericSend>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d001      	beq.n	8007dd0 <osMailPut+0x6c>
      return osErrorOS;
 8007dcc:	23ff      	movs	r3, #255	@ 0xff
 8007dce:	e000      	b.n	8007dd2 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	e000ed04 	.word	0xe000ed04

08007de0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8007de0:	b590      	push	{r4, r7, lr}
 8007de2:	b08b      	sub	sp, #44	@ 0x2c
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8007df6:	2380      	movs	r3, #128	@ 0x80
 8007df8:	617b      	str	r3, [r7, #20]
    return event;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	461c      	mov	r4, r3
 8007dfe:	f107 0314 	add.w	r3, r7, #20
 8007e02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e0a:	e056      	b.n	8007eba <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1a:	d103      	bne.n	8007e24 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8007e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e22:	e009      	b.n	8007e38 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d006      	beq.n	8007e38 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <osMailGet+0x58>
      ticks = 1;
 8007e34:	2301      	movs	r3, #1
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007e38:	f7ff fc9f 	bl	800777a <inHandlerMode>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d01d      	beq.n	8007e7e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	6858      	ldr	r0, [r3, #4]
 8007e46:	f107 0220 	add.w	r2, r7, #32
 8007e4a:	f107 0314 	add.w	r3, r7, #20
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4619      	mov	r1, r3
 8007e52:	f000 fcef 	bl	8008834 <xQueueReceiveFromISR>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d102      	bne.n	8007e62 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8007e5c:	2320      	movs	r3, #32
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	e001      	b.n	8007e66 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01e      	beq.n	8007eaa <osMailGet+0xca>
 8007e6c:	4b15      	ldr	r3, [pc, #84]	@ (8007ec4 <osMailGet+0xe4>)
 8007e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	e015      	b.n	8007eaa <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	6858      	ldr	r0, [r3, #4]
 8007e82:	f107 0314 	add.w	r3, r7, #20
 8007e86:	3304      	adds	r3, #4
 8007e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	f000 fbea 	bl	8008664 <xQueueReceive>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d102      	bne.n	8007e9c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8007e96:	2320      	movs	r3, #32
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	e006      	b.n	8007eaa <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <osMailGet+0xc6>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e000      	b.n	8007ea8 <osMailGet+0xc8>
 8007ea6:	2340      	movs	r3, #64	@ 0x40
 8007ea8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	461c      	mov	r4, r3
 8007eae:	f107 0314 	add.w	r3, r7, #20
 8007eb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	372c      	adds	r7, #44	@ 0x2c
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd90      	pop	{r4, r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <osMailFree+0x14>
    return osErrorParameter;
 8007ed8:	2380      	movs	r3, #128	@ 0x80
 8007eda:	e006      	b.n	8007eea <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff fe8f 	bl	8007c06 <osPoolFree>
 8007ee8:	4603      	mov	r3, r0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f103 0208 	add.w	r2, r3, #8
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f103 0208 	add.w	r2, r3, #8
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f103 0208 	add.w	r2, r3, #8
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	689a      	ldr	r2, [r3, #8]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	601a      	str	r2, [r3, #0]
}
 8007f88:	bf00      	nop
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d103      	bne.n	8007fb4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	e00c      	b.n	8007fce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3308      	adds	r3, #8
 8007fb8:	60fb      	str	r3, [r7, #12]
 8007fba:	e002      	b.n	8007fc2 <vListInsert+0x2e>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d2f6      	bcs.n	8007fbc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	1c5a      	adds	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	601a      	str	r2, [r3, #0]
}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008006:	b480      	push	{r7}
 8008008:	b085      	sub	sp, #20
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	6892      	ldr	r2, [r2, #8]
 800801c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6852      	ldr	r2, [r2, #4]
 8008026:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	429a      	cmp	r2, r3
 8008030:	d103      	bne.n	800803a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	689a      	ldr	r2, [r3, #8]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	1e5a      	subs	r2, r3, #1
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
	...

0800805c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10d      	bne.n	800808c <xQueueGenericReset+0x30>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008074:	b672      	cpsid	i
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	b662      	cpsie	i
 8008084:	60bb      	str	r3, [r7, #8]
}
 8008086:	bf00      	nop
 8008088:	bf00      	nop
 800808a:	e7fd      	b.n	8008088 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800808c:	f002 fc1e 	bl	800a8cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008098:	68f9      	ldr	r1, [r7, #12]
 800809a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800809c:	fb01 f303 	mul.w	r3, r1, r3
 80080a0:	441a      	add	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080bc:	3b01      	subs	r3, #1
 80080be:	68f9      	ldr	r1, [r7, #12]
 80080c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080c2:	fb01 f303 	mul.w	r3, r1, r3
 80080c6:	441a      	add	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	22ff      	movs	r2, #255	@ 0xff
 80080d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	22ff      	movs	r2, #255	@ 0xff
 80080d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d114      	bne.n	800810c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d01a      	beq.n	8008120 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3310      	adds	r3, #16
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 fa08 	bl	8009504 <xTaskRemoveFromEventList>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d012      	beq.n	8008120 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008130 <xQueueGenericReset+0xd4>)
 80080fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	e009      	b.n	8008120 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3310      	adds	r3, #16
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff feee 	bl	8007ef2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3324      	adds	r3, #36	@ 0x24
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff fee9 	bl	8007ef2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008120:	f002 fc0a 	bl	800a938 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008124:	2301      	movs	r3, #1
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08e      	sub	sp, #56	@ 0x38
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10d      	bne.n	8008164 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814c:	b672      	cpsid	i
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	b662      	cpsie	i
 800815c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	e7fd      	b.n	8008160 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10d      	bne.n	8008186 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816e:	b672      	cpsid	i
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	b662      	cpsie	i
 800817e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008180:	bf00      	nop
 8008182:	bf00      	nop
 8008184:	e7fd      	b.n	8008182 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <xQueueGenericCreateStatic+0x5e>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <xQueueGenericCreateStatic+0x62>
 8008192:	2301      	movs	r3, #1
 8008194:	e000      	b.n	8008198 <xQueueGenericCreateStatic+0x64>
 8008196:	2300      	movs	r3, #0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10d      	bne.n	80081b8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a0:	b672      	cpsid	i
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	b662      	cpsie	i
 80081b0:	623b      	str	r3, [r7, #32]
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d102      	bne.n	80081c4 <xQueueGenericCreateStatic+0x90>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <xQueueGenericCreateStatic+0x94>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e000      	b.n	80081ca <xQueueGenericCreateStatic+0x96>
 80081c8:	2300      	movs	r3, #0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10d      	bne.n	80081ea <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	b672      	cpsid	i
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	b662      	cpsie	i
 80081e2:	61fb      	str	r3, [r7, #28]
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop
 80081e8:	e7fd      	b.n	80081e6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081ea:	2348      	movs	r3, #72	@ 0x48
 80081ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b48      	cmp	r3, #72	@ 0x48
 80081f2:	d00d      	beq.n	8008210 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f8:	b672      	cpsid	i
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	b662      	cpsie	i
 8008208:	61bb      	str	r3, [r7, #24]
}
 800820a:	bf00      	nop
 800820c:	bf00      	nop
 800820e:	e7fd      	b.n	800820c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008210:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00d      	beq.n	8008238 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800821c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008224:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	4613      	mov	r3, r2
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	68b9      	ldr	r1, [r7, #8]
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 f848 	bl	80082c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800823a:	4618      	mov	r0, r3
 800823c:	3730      	adds	r7, #48	@ 0x30
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008242:	b580      	push	{r7, lr}
 8008244:	b08a      	sub	sp, #40	@ 0x28
 8008246:	af02      	add	r7, sp, #8
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	4613      	mov	r3, r2
 800824e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10d      	bne.n	8008272 <xQueueGenericCreate+0x30>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825a:	b672      	cpsid	i
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	b662      	cpsie	i
 800826a:	613b      	str	r3, [r7, #16]
}
 800826c:	bf00      	nop
 800826e:	bf00      	nop
 8008270:	e7fd      	b.n	800826e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008278:	2300      	movs	r3, #0
 800827a:	61fb      	str	r3, [r7, #28]
 800827c:	e004      	b.n	8008288 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	fb02 f303 	mul.w	r3, r2, r3
 8008286:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	3348      	adds	r3, #72	@ 0x48
 800828c:	4618      	mov	r0, r3
 800828e:	f002 fc4b 	bl	800ab28 <pvPortMalloc>
 8008292:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d011      	beq.n	80082be <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	3348      	adds	r3, #72	@ 0x48
 80082a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082ac:	79fa      	ldrb	r2, [r7, #7]
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	4613      	mov	r3, r2
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	68b9      	ldr	r1, [r7, #8]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 f805 	bl	80082c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082be:	69bb      	ldr	r3, [r7, #24]
	}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	e002      	b.n	80082ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80082f6:	2101      	movs	r1, #1
 80082f8:	69b8      	ldr	r0, [r7, #24]
 80082fa:	f7ff feaf 	bl	800805c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08e      	sub	sp, #56	@ 0x38
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008316:	2300      	movs	r3, #0
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10d      	bne.n	8008340 <xQueueGenericSend+0x38>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008328:	b672      	cpsid	i
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	b662      	cpsie	i
 8008338:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	e7fd      	b.n	800833c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d103      	bne.n	800834e <xQueueGenericSend+0x46>
 8008346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <xQueueGenericSend+0x4a>
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <xQueueGenericSend+0x4c>
 8008352:	2300      	movs	r3, #0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10d      	bne.n	8008374 <xQueueGenericSend+0x6c>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835c:	b672      	cpsid	i
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	b662      	cpsie	i
 800836c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	e7fd      	b.n	8008370 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d103      	bne.n	8008382 <xQueueGenericSend+0x7a>
 800837a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800837e:	2b01      	cmp	r3, #1
 8008380:	d101      	bne.n	8008386 <xQueueGenericSend+0x7e>
 8008382:	2301      	movs	r3, #1
 8008384:	e000      	b.n	8008388 <xQueueGenericSend+0x80>
 8008386:	2300      	movs	r3, #0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10d      	bne.n	80083a8 <xQueueGenericSend+0xa0>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008390:	b672      	cpsid	i
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	b662      	cpsie	i
 80083a0:	623b      	str	r3, [r7, #32]
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	e7fd      	b.n	80083a4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083a8:	f001 fa84 	bl	80098b4 <xTaskGetSchedulerState>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <xQueueGenericSend+0xb0>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <xQueueGenericSend+0xb4>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e000      	b.n	80083be <xQueueGenericSend+0xb6>
 80083bc:	2300      	movs	r3, #0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10d      	bne.n	80083de <xQueueGenericSend+0xd6>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c6:	b672      	cpsid	i
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	b662      	cpsie	i
 80083d6:	61fb      	str	r3, [r7, #28]
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	e7fd      	b.n	80083da <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083de:	f002 fa75 	bl	800a8cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d302      	bcc.n	80083f4 <xQueueGenericSend+0xec>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d129      	bne.n	8008448 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	68b9      	ldr	r1, [r7, #8]
 80083f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083fa:	f000 faa3 	bl	8008944 <prvCopyDataToQueue>
 80083fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008404:	2b00      	cmp	r3, #0
 8008406:	d010      	beq.n	800842a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840a:	3324      	adds	r3, #36	@ 0x24
 800840c:	4618      	mov	r0, r3
 800840e:	f001 f879 	bl	8009504 <xTaskRemoveFromEventList>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d013      	beq.n	8008440 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008418:	4b3f      	ldr	r3, [pc, #252]	@ (8008518 <xQueueGenericSend+0x210>)
 800841a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	e00a      	b.n	8008440 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800842a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d007      	beq.n	8008440 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008430:	4b39      	ldr	r3, [pc, #228]	@ (8008518 <xQueueGenericSend+0x210>)
 8008432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008440:	f002 fa7a 	bl	800a938 <vPortExitCritical>
				return pdPASS;
 8008444:	2301      	movs	r3, #1
 8008446:	e063      	b.n	8008510 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d103      	bne.n	8008456 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800844e:	f002 fa73 	bl	800a938 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008452:	2300      	movs	r3, #0
 8008454:	e05c      	b.n	8008510 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008458:	2b00      	cmp	r3, #0
 800845a:	d106      	bne.n	800846a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800845c:	f107 0314 	add.w	r3, r7, #20
 8008460:	4618      	mov	r0, r3
 8008462:	f001 f8b5 	bl	80095d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008466:	2301      	movs	r3, #1
 8008468:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800846a:	f002 fa65 	bl	800a938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800846e:	f000 fe1b 	bl	80090a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008472:	f002 fa2b 	bl	800a8cc <vPortEnterCritical>
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800847c:	b25b      	sxtb	r3, r3
 800847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008482:	d103      	bne.n	800848c <xQueueGenericSend+0x184>
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800848c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008492:	b25b      	sxtb	r3, r3
 8008494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008498:	d103      	bne.n	80084a2 <xQueueGenericSend+0x19a>
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084a2:	f002 fa49 	bl	800a938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084a6:	1d3a      	adds	r2, r7, #4
 80084a8:	f107 0314 	add.w	r3, r7, #20
 80084ac:	4611      	mov	r1, r2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f001 f8a4 	bl	80095fc <xTaskCheckForTimeOut>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d124      	bne.n	8008504 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084bc:	f000 fb3a 	bl	8008b34 <prvIsQueueFull>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d018      	beq.n	80084f8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c8:	3310      	adds	r3, #16
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	4611      	mov	r1, r2
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 ffc2 	bl	8009458 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084d6:	f000 fac5 	bl	8008a64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084da:	f000 fdf3 	bl	80090c4 <xTaskResumeAll>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f47f af7c 	bne.w	80083de <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80084e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008518 <xQueueGenericSend+0x210>)
 80084e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	e772      	b.n	80083de <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084fa:	f000 fab3 	bl	8008a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084fe:	f000 fde1 	bl	80090c4 <xTaskResumeAll>
 8008502:	e76c      	b.n	80083de <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008504:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008506:	f000 faad 	bl	8008a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800850a:	f000 fddb 	bl	80090c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800850e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008510:	4618      	mov	r0, r3
 8008512:	3738      	adds	r7, #56	@ 0x38
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08e      	sub	sp, #56	@ 0x38
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10d      	bne.n	8008550 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008538:	b672      	cpsid	i
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	b662      	cpsie	i
 8008548:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	e7fd      	b.n	800854c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d103      	bne.n	800855e <xQueueGenericSendFromISR+0x42>
 8008556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <xQueueGenericSendFromISR+0x46>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <xQueueGenericSendFromISR+0x48>
 8008562:	2300      	movs	r3, #0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10d      	bne.n	8008584 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856c:	b672      	cpsid	i
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	b662      	cpsie	i
 800857c:	623b      	str	r3, [r7, #32]
}
 800857e:	bf00      	nop
 8008580:	bf00      	nop
 8008582:	e7fd      	b.n	8008580 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d103      	bne.n	8008592 <xQueueGenericSendFromISR+0x76>
 800858a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800858e:	2b01      	cmp	r3, #1
 8008590:	d101      	bne.n	8008596 <xQueueGenericSendFromISR+0x7a>
 8008592:	2301      	movs	r3, #1
 8008594:	e000      	b.n	8008598 <xQueueGenericSendFromISR+0x7c>
 8008596:	2300      	movs	r3, #0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10d      	bne.n	80085b8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a0:	b672      	cpsid	i
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	b662      	cpsie	i
 80085b0:	61fb      	str	r3, [r7, #28]
}
 80085b2:	bf00      	nop
 80085b4:	bf00      	nop
 80085b6:	e7fd      	b.n	80085b4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085b8:	f002 fa70 	bl	800aa9c <vPortValidateInterruptPriority>
	__asm volatile
 80085bc:	f3ef 8211 	mrs	r2, BASEPRI
 80085c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c4:	b672      	cpsid	i
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	b662      	cpsie	i
 80085d4:	61ba      	str	r2, [r7, #24]
 80085d6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80085d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d302      	bcc.n	80085ee <xQueueGenericSendFromISR+0xd2>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d12c      	bne.n	8008648 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085fe:	f000 f9a1 	bl	8008944 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008602:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860a:	d112      	bne.n	8008632 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008610:	2b00      	cmp	r3, #0
 8008612:	d016      	beq.n	8008642 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	3324      	adds	r3, #36	@ 0x24
 8008618:	4618      	mov	r0, r3
 800861a:	f000 ff73 	bl	8009504 <xTaskRemoveFromEventList>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00e      	beq.n	8008642 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00b      	beq.n	8008642 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	e007      	b.n	8008642 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008632:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008636:	3301      	adds	r3, #1
 8008638:	b2db      	uxtb	r3, r3
 800863a:	b25a      	sxtb	r2, r3
 800863c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008642:	2301      	movs	r3, #1
 8008644:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008646:	e001      	b.n	800864c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008648:	2300      	movs	r3, #0
 800864a:	637b      	str	r3, [r7, #52]	@ 0x34
 800864c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f383 8811 	msr	BASEPRI, r3
}
 8008656:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800865a:	4618      	mov	r0, r3
 800865c:	3738      	adds	r7, #56	@ 0x38
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08c      	sub	sp, #48	@ 0x30
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008670:	2300      	movs	r3, #0
 8008672:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10d      	bne.n	800869a <xQueueReceive+0x36>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008682:	b672      	cpsid	i
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	b662      	cpsie	i
 8008692:	623b      	str	r3, [r7, #32]
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop
 8008698:	e7fd      	b.n	8008696 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d103      	bne.n	80086a8 <xQueueReceive+0x44>
 80086a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <xQueueReceive+0x48>
 80086a8:	2301      	movs	r3, #1
 80086aa:	e000      	b.n	80086ae <xQueueReceive+0x4a>
 80086ac:	2300      	movs	r3, #0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10d      	bne.n	80086ce <xQueueReceive+0x6a>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b6:	b672      	cpsid	i
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	b662      	cpsie	i
 80086c6:	61fb      	str	r3, [r7, #28]
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	e7fd      	b.n	80086ca <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086ce:	f001 f8f1 	bl	80098b4 <xTaskGetSchedulerState>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d102      	bne.n	80086de <xQueueReceive+0x7a>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <xQueueReceive+0x7e>
 80086de:	2301      	movs	r3, #1
 80086e0:	e000      	b.n	80086e4 <xQueueReceive+0x80>
 80086e2:	2300      	movs	r3, #0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10d      	bne.n	8008704 <xQueueReceive+0xa0>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ec:	b672      	cpsid	i
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	b662      	cpsie	i
 80086fc:	61bb      	str	r3, [r7, #24]
}
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	e7fd      	b.n	8008700 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008704:	f002 f8e2 	bl	800a8cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800870c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800870e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008710:	2b00      	cmp	r3, #0
 8008712:	d01f      	beq.n	8008754 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008718:	f000 f97e 	bl	8008a18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800871c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871e:	1e5a      	subs	r2, r3, #1
 8008720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008722:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00f      	beq.n	800874c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	3310      	adds	r3, #16
 8008730:	4618      	mov	r0, r3
 8008732:	f000 fee7 	bl	8009504 <xTaskRemoveFromEventList>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d007      	beq.n	800874c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800873c:	4b3c      	ldr	r3, [pc, #240]	@ (8008830 <xQueueReceive+0x1cc>)
 800873e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800874c:	f002 f8f4 	bl	800a938 <vPortExitCritical>
				return pdPASS;
 8008750:	2301      	movs	r3, #1
 8008752:	e069      	b.n	8008828 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d103      	bne.n	8008762 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800875a:	f002 f8ed 	bl	800a938 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800875e:	2300      	movs	r3, #0
 8008760:	e062      	b.n	8008828 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008764:	2b00      	cmp	r3, #0
 8008766:	d106      	bne.n	8008776 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008768:	f107 0310 	add.w	r3, r7, #16
 800876c:	4618      	mov	r0, r3
 800876e:	f000 ff2f 	bl	80095d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008772:	2301      	movs	r3, #1
 8008774:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008776:	f002 f8df 	bl	800a938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800877a:	f000 fc95 	bl	80090a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800877e:	f002 f8a5 	bl	800a8cc <vPortEnterCritical>
 8008782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008784:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008788:	b25b      	sxtb	r3, r3
 800878a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878e:	d103      	bne.n	8008798 <xQueueReceive+0x134>
 8008790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800879e:	b25b      	sxtb	r3, r3
 80087a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a4:	d103      	bne.n	80087ae <xQueueReceive+0x14a>
 80087a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087ae:	f002 f8c3 	bl	800a938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087b2:	1d3a      	adds	r2, r7, #4
 80087b4:	f107 0310 	add.w	r3, r7, #16
 80087b8:	4611      	mov	r1, r2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 ff1e 	bl	80095fc <xTaskCheckForTimeOut>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d123      	bne.n	800880e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087c8:	f000 f99e 	bl	8008b08 <prvIsQueueEmpty>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d017      	beq.n	8008802 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d4:	3324      	adds	r3, #36	@ 0x24
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	4611      	mov	r1, r2
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fe3c 	bl	8009458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087e2:	f000 f93f 	bl	8008a64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087e6:	f000 fc6d 	bl	80090c4 <xTaskResumeAll>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d189      	bne.n	8008704 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80087f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008830 <xQueueReceive+0x1cc>)
 80087f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	e780      	b.n	8008704 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008804:	f000 f92e 	bl	8008a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008808:	f000 fc5c 	bl	80090c4 <xTaskResumeAll>
 800880c:	e77a      	b.n	8008704 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800880e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008810:	f000 f928 	bl	8008a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008814:	f000 fc56 	bl	80090c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800881a:	f000 f975 	bl	8008b08 <prvIsQueueEmpty>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	f43f af6f 	beq.w	8008704 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008826:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008828:	4618      	mov	r0, r3
 800882a:	3730      	adds	r7, #48	@ 0x30
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08e      	sub	sp, #56	@ 0x38
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10d      	bne.n	8008866 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884e:	b672      	cpsid	i
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	b662      	cpsie	i
 800885e:	623b      	str	r3, [r7, #32]
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	e7fd      	b.n	8008862 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d103      	bne.n	8008874 <xQueueReceiveFromISR+0x40>
 800886c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <xQueueReceiveFromISR+0x44>
 8008874:	2301      	movs	r3, #1
 8008876:	e000      	b.n	800887a <xQueueReceiveFromISR+0x46>
 8008878:	2300      	movs	r3, #0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10d      	bne.n	800889a <xQueueReceiveFromISR+0x66>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008882:	b672      	cpsid	i
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	b662      	cpsie	i
 8008892:	61fb      	str	r3, [r7, #28]
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop
 8008898:	e7fd      	b.n	8008896 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800889a:	f002 f8ff 	bl	800aa9c <vPortValidateInterruptPriority>
	__asm volatile
 800889e:	f3ef 8211 	mrs	r2, BASEPRI
 80088a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a6:	b672      	cpsid	i
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	b662      	cpsie	i
 80088b6:	61ba      	str	r2, [r7, #24]
 80088b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80088ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d02f      	beq.n	800892a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088d8:	f000 f89e 	bl	8008a18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088de:	1e5a      	subs	r2, r3, #1
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80088e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d112      	bne.n	8008914 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d016      	beq.n	8008924 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f8:	3310      	adds	r3, #16
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fe02 	bl	8009504 <xTaskRemoveFromEventList>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00e      	beq.n	8008924 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00b      	beq.n	8008924 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	e007      	b.n	8008924 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008918:	3301      	adds	r3, #1
 800891a:	b2db      	uxtb	r3, r3
 800891c:	b25a      	sxtb	r2, r3
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008924:	2301      	movs	r3, #1
 8008926:	637b      	str	r3, [r7, #52]	@ 0x34
 8008928:	e001      	b.n	800892e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800892a:	2300      	movs	r3, #0
 800892c:	637b      	str	r3, [r7, #52]	@ 0x34
 800892e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008930:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f383 8811 	msr	BASEPRI, r3
}
 8008938:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800893a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800893c:	4618      	mov	r0, r3
 800893e:	3738      	adds	r7, #56	@ 0x38
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008950:	2300      	movs	r3, #0
 8008952:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008958:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10d      	bne.n	800897e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d14d      	bne.n	8008a06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	4618      	mov	r0, r3
 8008970:	f000 ffbe 	bl	80098f0 <xTaskPriorityDisinherit>
 8008974:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	609a      	str	r2, [r3, #8]
 800897c:	e043      	b.n	8008a06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d119      	bne.n	80089b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6858      	ldr	r0, [r3, #4]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800898c:	461a      	mov	r2, r3
 800898e:	68b9      	ldr	r1, [r7, #8]
 8008990:	f002 fb8c 	bl	800b0ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899c:	441a      	add	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d32b      	bcc.n	8008a06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	605a      	str	r2, [r3, #4]
 80089b6:	e026      	b.n	8008a06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	68d8      	ldr	r0, [r3, #12]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c0:	461a      	mov	r2, r3
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	f002 fb72 	bl	800b0ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	68da      	ldr	r2, [r3, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d0:	425b      	negs	r3, r3
 80089d2:	441a      	add	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d207      	bcs.n	80089f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ec:	425b      	negs	r3, r3
 80089ee:	441a      	add	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d105      	bne.n	8008a06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008a0e:	697b      	ldr	r3, [r7, #20]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d018      	beq.n	8008a5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a32:	441a      	add	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d303      	bcc.n	8008a4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68d9      	ldr	r1, [r3, #12]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a54:	461a      	mov	r2, r3
 8008a56:	6838      	ldr	r0, [r7, #0]
 8008a58:	f002 fb28 	bl	800b0ac <memcpy>
	}
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a6c:	f001 ff2e 	bl	800a8cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a78:	e011      	b.n	8008a9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d012      	beq.n	8008aa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3324      	adds	r3, #36	@ 0x24
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 fd3c 	bl	8009504 <xTaskRemoveFromEventList>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a92:	f000 fe1b 	bl	80096cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dce9      	bgt.n	8008a7a <prvUnlockQueue+0x16>
 8008aa6:	e000      	b.n	8008aaa <prvUnlockQueue+0x46>
					break;
 8008aa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	22ff      	movs	r2, #255	@ 0xff
 8008aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008ab2:	f001 ff41 	bl	800a938 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ab6:	f001 ff09 	bl	800a8cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ac0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ac2:	e011      	b.n	8008ae8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d012      	beq.n	8008af2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3310      	adds	r3, #16
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 fd17 	bl	8009504 <xTaskRemoveFromEventList>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008adc:	f000 fdf6 	bl	80096cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	dce9      	bgt.n	8008ac4 <prvUnlockQueue+0x60>
 8008af0:	e000      	b.n	8008af4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008af2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	22ff      	movs	r2, #255	@ 0xff
 8008af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008afc:	f001 ff1c 	bl	800a938 <vPortExitCritical>
}
 8008b00:	bf00      	nop
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b10:	f001 fedc 	bl	800a8cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d102      	bne.n	8008b22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	e001      	b.n	8008b26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b26:	f001 ff07 	bl	800a938 <vPortExitCritical>

	return xReturn;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b3c:	f001 fec6 	bl	800a8cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d102      	bne.n	8008b52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	e001      	b.n	8008b56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b56:	f001 feef 	bl	800a938 <vPortExitCritical>

	return xReturn;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60fb      	str	r3, [r7, #12]
 8008b72:	e014      	b.n	8008b9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b74:	4a0f      	ldr	r2, [pc, #60]	@ (8008bb4 <vQueueAddToRegistry+0x50>)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10b      	bne.n	8008b98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b80:	490c      	ldr	r1, [pc, #48]	@ (8008bb4 <vQueueAddToRegistry+0x50>)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008bb4 <vQueueAddToRegistry+0x50>)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	4413      	add	r3, r2
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b96:	e006      	b.n	8008ba6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2b07      	cmp	r3, #7
 8008ba2:	d9e7      	bls.n	8008b74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	20001344 	.word	0x20001344

08008bb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008bc8:	f001 fe80 	bl	800a8cc <vPortEnterCritical>
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bd2:	b25b      	sxtb	r3, r3
 8008bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd8:	d103      	bne.n	8008be2 <vQueueWaitForMessageRestricted+0x2a>
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008be8:	b25b      	sxtb	r3, r3
 8008bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bee:	d103      	bne.n	8008bf8 <vQueueWaitForMessageRestricted+0x40>
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bf8:	f001 fe9e 	bl	800a938 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d106      	bne.n	8008c12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	3324      	adds	r3, #36	@ 0x24
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	68b9      	ldr	r1, [r7, #8]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fc4b 	bl	80094a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c12:	6978      	ldr	r0, [r7, #20]
 8008c14:	f7ff ff26 	bl	8008a64 <prvUnlockQueue>
	}
 8008c18:	bf00      	nop
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b08e      	sub	sp, #56	@ 0x38
 8008c24:	af04      	add	r7, sp, #16
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10d      	bne.n	8008c50 <xTaskCreateStatic+0x30>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c38:	b672      	cpsid	i
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	b662      	cpsie	i
 8008c48:	623b      	str	r3, [r7, #32]
}
 8008c4a:	bf00      	nop
 8008c4c:	bf00      	nop
 8008c4e:	e7fd      	b.n	8008c4c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10d      	bne.n	8008c72 <xTaskCreateStatic+0x52>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	b672      	cpsid	i
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	b662      	cpsie	i
 8008c6a:	61fb      	str	r3, [r7, #28]
}
 8008c6c:	bf00      	nop
 8008c6e:	bf00      	nop
 8008c70:	e7fd      	b.n	8008c6e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c72:	2354      	movs	r3, #84	@ 0x54
 8008c74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	2b54      	cmp	r3, #84	@ 0x54
 8008c7a:	d00d      	beq.n	8008c98 <xTaskCreateStatic+0x78>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c80:	b672      	cpsid	i
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	b662      	cpsie	i
 8008c90:	61bb      	str	r3, [r7, #24]
}
 8008c92:	bf00      	nop
 8008c94:	bf00      	nop
 8008c96:	e7fd      	b.n	8008c94 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01e      	beq.n	8008cde <xTaskCreateStatic+0xbe>
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d01b      	beq.n	8008cde <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9303      	str	r3, [sp, #12]
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbe:	9302      	str	r3, [sp, #8]
 8008cc0:	f107 0314 	add.w	r3, r7, #20
 8008cc4:	9301      	str	r3, [sp, #4]
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 f850 	bl	8008d76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008cd8:	f000 f8d8 	bl	8008e8c <prvAddNewTaskToReadyList>
 8008cdc:	e001      	b.n	8008ce2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ce2:	697b      	ldr	r3, [r7, #20]
	}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3728      	adds	r7, #40	@ 0x28
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08c      	sub	sp, #48	@ 0x30
 8008cf0:	af04      	add	r7, sp, #16
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cfc:	88fb      	ldrh	r3, [r7, #6]
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f001 ff11 	bl	800ab28 <pvPortMalloc>
 8008d06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00e      	beq.n	8008d2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d0e:	2054      	movs	r0, #84	@ 0x54
 8008d10:	f001 ff0a 	bl	800ab28 <pvPortMalloc>
 8008d14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d22:	e005      	b.n	8008d30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d24:	6978      	ldr	r0, [r7, #20]
 8008d26:	f001 ffcd 	bl	800acc4 <vPortFree>
 8008d2a:	e001      	b.n	8008d30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d017      	beq.n	8008d66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d3e:	88fa      	ldrh	r2, [r7, #6]
 8008d40:	2300      	movs	r3, #0
 8008d42:	9303      	str	r3, [sp, #12]
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	9302      	str	r3, [sp, #8]
 8008d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	68b9      	ldr	r1, [r7, #8]
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 f80e 	bl	8008d76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d5a:	69f8      	ldr	r0, [r7, #28]
 8008d5c:	f000 f896 	bl	8008e8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d60:	2301      	movs	r3, #1
 8008d62:	61bb      	str	r3, [r7, #24]
 8008d64:	e002      	b.n	8008d6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d66:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d6c:	69bb      	ldr	r3, [r7, #24]
	}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3720      	adds	r7, #32
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b088      	sub	sp, #32
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	607a      	str	r2, [r7, #4]
 8008d82:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d88:	6879      	ldr	r1, [r7, #4]
 8008d8a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008d8e:	440b      	add	r3, r1
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	f023 0307 	bic.w	r3, r3, #7
 8008d9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	f003 0307 	and.w	r3, r3, #7
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00d      	beq.n	8008dc4 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dac:	b672      	cpsid	i
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	b662      	cpsie	i
 8008dbc:	617b      	str	r3, [r7, #20]
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	e7fd      	b.n	8008dc0 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01f      	beq.n	8008e0a <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61fb      	str	r3, [r7, #28]
 8008dce:	e012      	b.n	8008df6 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	7819      	ldrb	r1, [r3, #0]
 8008dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	3334      	adds	r3, #52	@ 0x34
 8008de0:	460a      	mov	r2, r1
 8008de2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	4413      	add	r3, r2
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d006      	beq.n	8008dfe <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	3301      	adds	r3, #1
 8008df4:	61fb      	str	r3, [r7, #28]
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	2b0f      	cmp	r3, #15
 8008dfa:	d9e9      	bls.n	8008dd0 <prvInitialiseNewTask+0x5a>
 8008dfc:	e000      	b.n	8008e00 <prvInitialiseNewTask+0x8a>
			{
				break;
 8008dfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e08:	e003      	b.n	8008e12 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e14:	2b06      	cmp	r3, #6
 8008e16:	d901      	bls.n	8008e1c <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e18:	2306      	movs	r3, #6
 8008e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e20:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e26:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e30:	3304      	adds	r3, #4
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff f87d 	bl	8007f32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3a:	3318      	adds	r3, #24
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff f878 	bl	8007f32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4a:	f1c3 0207 	rsb	r2, r3, #7
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e56:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	68f9      	ldr	r1, [r7, #12]
 8008e6a:	69b8      	ldr	r0, [r7, #24]
 8008e6c:	f001 fc1e 	bl	800a6ac <pxPortInitialiseStack>
 8008e70:	4602      	mov	r2, r0
 8008e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d002      	beq.n	8008e82 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e82:	bf00      	nop
 8008e84:	3720      	adds	r7, #32
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e94:	f001 fd1a 	bl	800a8cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e98:	4b2a      	ldr	r3, [pc, #168]	@ (8008f44 <prvAddNewTaskToReadyList+0xb8>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	4a29      	ldr	r2, [pc, #164]	@ (8008f44 <prvAddNewTaskToReadyList+0xb8>)
 8008ea0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ea2:	4b29      	ldr	r3, [pc, #164]	@ (8008f48 <prvAddNewTaskToReadyList+0xbc>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d109      	bne.n	8008ebe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008eaa:	4a27      	ldr	r2, [pc, #156]	@ (8008f48 <prvAddNewTaskToReadyList+0xbc>)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008eb0:	4b24      	ldr	r3, [pc, #144]	@ (8008f44 <prvAddNewTaskToReadyList+0xb8>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d110      	bne.n	8008eda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008eb8:	f000 fc2c 	bl	8009714 <prvInitialiseTaskLists>
 8008ebc:	e00d      	b.n	8008eda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ebe:	4b23      	ldr	r3, [pc, #140]	@ (8008f4c <prvAddNewTaskToReadyList+0xc0>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d109      	bne.n	8008eda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ec6:	4b20      	ldr	r3, [pc, #128]	@ (8008f48 <prvAddNewTaskToReadyList+0xbc>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d802      	bhi.n	8008eda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8008f48 <prvAddNewTaskToReadyList+0xbc>)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008eda:	4b1d      	ldr	r3, [pc, #116]	@ (8008f50 <prvAddNewTaskToReadyList+0xc4>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8008f50 <prvAddNewTaskToReadyList+0xc4>)
 8008ee2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee8:	2201      	movs	r2, #1
 8008eea:	409a      	lsls	r2, r3
 8008eec:	4b19      	ldr	r3, [pc, #100]	@ (8008f54 <prvAddNewTaskToReadyList+0xc8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	4a18      	ldr	r2, [pc, #96]	@ (8008f54 <prvAddNewTaskToReadyList+0xc8>)
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008efa:	4613      	mov	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4a15      	ldr	r2, [pc, #84]	@ (8008f58 <prvAddNewTaskToReadyList+0xcc>)
 8008f04:	441a      	add	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	f7ff f81d 	bl	8007f4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f12:	f001 fd11 	bl	800a938 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f16:	4b0d      	ldr	r3, [pc, #52]	@ (8008f4c <prvAddNewTaskToReadyList+0xc0>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00e      	beq.n	8008f3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f48 <prvAddNewTaskToReadyList+0xbc>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d207      	bcs.n	8008f3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f5c <prvAddNewTaskToReadyList+0xd0>)
 8008f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	20001484 	.word	0x20001484
 8008f48:	20001384 	.word	0x20001384
 8008f4c:	20001490 	.word	0x20001490
 8008f50:	200014a0 	.word	0x200014a0
 8008f54:	2000148c 	.word	0x2000148c
 8008f58:	20001388 	.word	0x20001388
 8008f5c:	e000ed04 	.word	0xe000ed04

08008f60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d01a      	beq.n	8008fa8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f72:	4b15      	ldr	r3, [pc, #84]	@ (8008fc8 <vTaskDelay+0x68>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00d      	beq.n	8008f96 <vTaskDelay+0x36>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7e:	b672      	cpsid	i
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	b662      	cpsie	i
 8008f8e:	60bb      	str	r3, [r7, #8]
}
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
 8008f94:	e7fd      	b.n	8008f92 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008f96:	f000 f887 	bl	80090a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 ff31 	bl	8009e04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fa2:	f000 f88f 	bl	80090c4 <xTaskResumeAll>
 8008fa6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d107      	bne.n	8008fbe <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008fae:	4b07      	ldr	r3, [pc, #28]	@ (8008fcc <vTaskDelay+0x6c>)
 8008fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	200014ac 	.word	0x200014ac
 8008fcc:	e000ed04 	.word	0xe000ed04

08008fd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	@ 0x28
 8008fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fde:	463a      	mov	r2, r7
 8008fe0:	1d39      	adds	r1, r7, #4
 8008fe2:	f107 0308 	add.w	r3, r7, #8
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fa fc0e 	bl	8003808 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	9202      	str	r2, [sp, #8]
 8008ff4:	9301      	str	r3, [sp, #4]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	460a      	mov	r2, r1
 8008ffe:	4924      	ldr	r1, [pc, #144]	@ (8009090 <vTaskStartScheduler+0xc0>)
 8009000:	4824      	ldr	r0, [pc, #144]	@ (8009094 <vTaskStartScheduler+0xc4>)
 8009002:	f7ff fe0d 	bl	8008c20 <xTaskCreateStatic>
 8009006:	4603      	mov	r3, r0
 8009008:	4a23      	ldr	r2, [pc, #140]	@ (8009098 <vTaskStartScheduler+0xc8>)
 800900a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800900c:	4b22      	ldr	r3, [pc, #136]	@ (8009098 <vTaskStartScheduler+0xc8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009014:	2301      	movs	r3, #1
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	e001      	b.n	800901e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800901a:	2300      	movs	r3, #0
 800901c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d102      	bne.n	800902a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009024:	f000 ff54 	bl	8009ed0 <xTimerCreateTimerTask>
 8009028:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d118      	bne.n	8009062 <vTaskStartScheduler+0x92>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009034:	b672      	cpsid	i
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	b662      	cpsie	i
 8009044:	613b      	str	r3, [r7, #16]
}
 8009046:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009048:	4b14      	ldr	r3, [pc, #80]	@ (800909c <vTaskStartScheduler+0xcc>)
 800904a:	f04f 32ff 	mov.w	r2, #4294967295
 800904e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009050:	4b13      	ldr	r3, [pc, #76]	@ (80090a0 <vTaskStartScheduler+0xd0>)
 8009052:	2201      	movs	r2, #1
 8009054:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009056:	4b13      	ldr	r3, [pc, #76]	@ (80090a4 <vTaskStartScheduler+0xd4>)
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800905c:	f001 fbb8 	bl	800a7d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009060:	e011      	b.n	8009086 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009068:	d10d      	bne.n	8009086 <vTaskStartScheduler+0xb6>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906e:	b672      	cpsid	i
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	b662      	cpsie	i
 800907e:	60fb      	str	r3, [r7, #12]
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop
 8009084:	e7fd      	b.n	8009082 <vTaskStartScheduler+0xb2>
}
 8009086:	bf00      	nop
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	0800b784 	.word	0x0800b784
 8009094:	080096e5 	.word	0x080096e5
 8009098:	200014a8 	.word	0x200014a8
 800909c:	200014a4 	.word	0x200014a4
 80090a0:	20001490 	.word	0x20001490
 80090a4:	20001488 	.word	0x20001488

080090a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80090ac:	4b04      	ldr	r3, [pc, #16]	@ (80090c0 <vTaskSuspendAll+0x18>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3301      	adds	r3, #1
 80090b2:	4a03      	ldr	r2, [pc, #12]	@ (80090c0 <vTaskSuspendAll+0x18>)
 80090b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80090b6:	bf00      	nop
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	200014ac 	.word	0x200014ac

080090c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090ce:	2300      	movs	r3, #0
 80090d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090d2:	4b43      	ldr	r3, [pc, #268]	@ (80091e0 <xTaskResumeAll+0x11c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10d      	bne.n	80090f6 <xTaskResumeAll+0x32>
	__asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090de:	b672      	cpsid	i
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	b662      	cpsie	i
 80090ee:	603b      	str	r3, [r7, #0]
}
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
 80090f4:	e7fd      	b.n	80090f2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090f6:	f001 fbe9 	bl	800a8cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090fa:	4b39      	ldr	r3, [pc, #228]	@ (80091e0 <xTaskResumeAll+0x11c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3b01      	subs	r3, #1
 8009100:	4a37      	ldr	r2, [pc, #220]	@ (80091e0 <xTaskResumeAll+0x11c>)
 8009102:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009104:	4b36      	ldr	r3, [pc, #216]	@ (80091e0 <xTaskResumeAll+0x11c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d161      	bne.n	80091d0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800910c:	4b35      	ldr	r3, [pc, #212]	@ (80091e4 <xTaskResumeAll+0x120>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d05d      	beq.n	80091d0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009114:	e02e      	b.n	8009174 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009116:	4b34      	ldr	r3, [pc, #208]	@ (80091e8 <xTaskResumeAll+0x124>)
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3318      	adds	r3, #24
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe ff6f 	bl	8008006 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3304      	adds	r3, #4
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe ff6a 	bl	8008006 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009136:	2201      	movs	r2, #1
 8009138:	409a      	lsls	r2, r3
 800913a:	4b2c      	ldr	r3, [pc, #176]	@ (80091ec <xTaskResumeAll+0x128>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4313      	orrs	r3, r2
 8009140:	4a2a      	ldr	r2, [pc, #168]	@ (80091ec <xTaskResumeAll+0x128>)
 8009142:	6013      	str	r3, [r2, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4a27      	ldr	r2, [pc, #156]	@ (80091f0 <xTaskResumeAll+0x12c>)
 8009152:	441a      	add	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	3304      	adds	r3, #4
 8009158:	4619      	mov	r1, r3
 800915a:	4610      	mov	r0, r2
 800915c:	f7fe fef6 	bl	8007f4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009164:	4b23      	ldr	r3, [pc, #140]	@ (80091f4 <xTaskResumeAll+0x130>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916a:	429a      	cmp	r2, r3
 800916c:	d302      	bcc.n	8009174 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800916e:	4b22      	ldr	r3, [pc, #136]	@ (80091f8 <xTaskResumeAll+0x134>)
 8009170:	2201      	movs	r2, #1
 8009172:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009174:	4b1c      	ldr	r3, [pc, #112]	@ (80091e8 <xTaskResumeAll+0x124>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1cc      	bne.n	8009116 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009182:	f000 fb67 	bl	8009854 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009186:	4b1d      	ldr	r3, [pc, #116]	@ (80091fc <xTaskResumeAll+0x138>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d010      	beq.n	80091b4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009192:	f000 f847 	bl	8009224 <xTaskIncrementTick>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800919c:	4b16      	ldr	r3, [pc, #88]	@ (80091f8 <xTaskResumeAll+0x134>)
 800919e:	2201      	movs	r2, #1
 80091a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1f1      	bne.n	8009192 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80091ae:	4b13      	ldr	r3, [pc, #76]	@ (80091fc <xTaskResumeAll+0x138>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091b4:	4b10      	ldr	r3, [pc, #64]	@ (80091f8 <xTaskResumeAll+0x134>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d009      	beq.n	80091d0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091bc:	2301      	movs	r3, #1
 80091be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009200 <xTaskResumeAll+0x13c>)
 80091c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091d0:	f001 fbb2 	bl	800a938 <vPortExitCritical>

	return xAlreadyYielded;
 80091d4:	68bb      	ldr	r3, [r7, #8]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	200014ac 	.word	0x200014ac
 80091e4:	20001484 	.word	0x20001484
 80091e8:	20001444 	.word	0x20001444
 80091ec:	2000148c 	.word	0x2000148c
 80091f0:	20001388 	.word	0x20001388
 80091f4:	20001384 	.word	0x20001384
 80091f8:	20001498 	.word	0x20001498
 80091fc:	20001494 	.word	0x20001494
 8009200:	e000ed04 	.word	0xe000ed04

08009204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800920a:	4b05      	ldr	r3, [pc, #20]	@ (8009220 <xTaskGetTickCount+0x1c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009210:	687b      	ldr	r3, [r7, #4]
}
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20001488 	.word	0x20001488

08009224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800922e:	4b50      	ldr	r3, [pc, #320]	@ (8009370 <xTaskIncrementTick+0x14c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	f040 808b 	bne.w	800934e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009238:	4b4e      	ldr	r3, [pc, #312]	@ (8009374 <xTaskIncrementTick+0x150>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3301      	adds	r3, #1
 800923e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009240:	4a4c      	ldr	r2, [pc, #304]	@ (8009374 <xTaskIncrementTick+0x150>)
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d123      	bne.n	8009294 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800924c:	4b4a      	ldr	r3, [pc, #296]	@ (8009378 <xTaskIncrementTick+0x154>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00d      	beq.n	8009272 <xTaskIncrementTick+0x4e>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925a:	b672      	cpsid	i
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	b662      	cpsie	i
 800926a:	603b      	str	r3, [r7, #0]
}
 800926c:	bf00      	nop
 800926e:	bf00      	nop
 8009270:	e7fd      	b.n	800926e <xTaskIncrementTick+0x4a>
 8009272:	4b41      	ldr	r3, [pc, #260]	@ (8009378 <xTaskIncrementTick+0x154>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	4b40      	ldr	r3, [pc, #256]	@ (800937c <xTaskIncrementTick+0x158>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a3e      	ldr	r2, [pc, #248]	@ (8009378 <xTaskIncrementTick+0x154>)
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	4a3e      	ldr	r2, [pc, #248]	@ (800937c <xTaskIncrementTick+0x158>)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	4b3e      	ldr	r3, [pc, #248]	@ (8009380 <xTaskIncrementTick+0x15c>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3301      	adds	r3, #1
 800928c:	4a3c      	ldr	r2, [pc, #240]	@ (8009380 <xTaskIncrementTick+0x15c>)
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	f000 fae0 	bl	8009854 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009294:	4b3b      	ldr	r3, [pc, #236]	@ (8009384 <xTaskIncrementTick+0x160>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	429a      	cmp	r2, r3
 800929c:	d348      	bcc.n	8009330 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800929e:	4b36      	ldr	r3, [pc, #216]	@ (8009378 <xTaskIncrementTick+0x154>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d104      	bne.n	80092b2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092a8:	4b36      	ldr	r3, [pc, #216]	@ (8009384 <xTaskIncrementTick+0x160>)
 80092aa:	f04f 32ff 	mov.w	r2, #4294967295
 80092ae:	601a      	str	r2, [r3, #0]
					break;
 80092b0:	e03e      	b.n	8009330 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092b2:	4b31      	ldr	r3, [pc, #196]	@ (8009378 <xTaskIncrementTick+0x154>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d203      	bcs.n	80092d2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009384 <xTaskIncrementTick+0x160>)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092d0:	e02e      	b.n	8009330 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	3304      	adds	r3, #4
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fe fe95 	bl	8008006 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d004      	beq.n	80092ee <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	3318      	adds	r3, #24
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe fe8c 	bl	8008006 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f2:	2201      	movs	r2, #1
 80092f4:	409a      	lsls	r2, r3
 80092f6:	4b24      	ldr	r3, [pc, #144]	@ (8009388 <xTaskIncrementTick+0x164>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	4a22      	ldr	r2, [pc, #136]	@ (8009388 <xTaskIncrementTick+0x164>)
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4a1f      	ldr	r2, [pc, #124]	@ (800938c <xTaskIncrementTick+0x168>)
 800930e:	441a      	add	r2, r3
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	3304      	adds	r3, #4
 8009314:	4619      	mov	r1, r3
 8009316:	4610      	mov	r0, r2
 8009318:	f7fe fe18 	bl	8007f4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009320:	4b1b      	ldr	r3, [pc, #108]	@ (8009390 <xTaskIncrementTick+0x16c>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009326:	429a      	cmp	r2, r3
 8009328:	d3b9      	bcc.n	800929e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800932a:	2301      	movs	r3, #1
 800932c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800932e:	e7b6      	b.n	800929e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009330:	4b17      	ldr	r3, [pc, #92]	@ (8009390 <xTaskIncrementTick+0x16c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009336:	4915      	ldr	r1, [pc, #84]	@ (800938c <xTaskIncrementTick+0x168>)
 8009338:	4613      	mov	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4413      	add	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	440b      	add	r3, r1
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d907      	bls.n	8009358 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009348:	2301      	movs	r3, #1
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	e004      	b.n	8009358 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800934e:	4b11      	ldr	r3, [pc, #68]	@ (8009394 <xTaskIncrementTick+0x170>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3301      	adds	r3, #1
 8009354:	4a0f      	ldr	r2, [pc, #60]	@ (8009394 <xTaskIncrementTick+0x170>)
 8009356:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009358:	4b0f      	ldr	r3, [pc, #60]	@ (8009398 <xTaskIncrementTick+0x174>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009364:	697b      	ldr	r3, [r7, #20]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	200014ac 	.word	0x200014ac
 8009374:	20001488 	.word	0x20001488
 8009378:	2000143c 	.word	0x2000143c
 800937c:	20001440 	.word	0x20001440
 8009380:	2000149c 	.word	0x2000149c
 8009384:	200014a4 	.word	0x200014a4
 8009388:	2000148c 	.word	0x2000148c
 800938c:	20001388 	.word	0x20001388
 8009390:	20001384 	.word	0x20001384
 8009394:	20001494 	.word	0x20001494
 8009398:	20001498 	.word	0x20001498

0800939c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093a2:	4b28      	ldr	r3, [pc, #160]	@ (8009444 <vTaskSwitchContext+0xa8>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d003      	beq.n	80093b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093aa:	4b27      	ldr	r3, [pc, #156]	@ (8009448 <vTaskSwitchContext+0xac>)
 80093ac:	2201      	movs	r2, #1
 80093ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093b0:	e042      	b.n	8009438 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80093b2:	4b25      	ldr	r3, [pc, #148]	@ (8009448 <vTaskSwitchContext+0xac>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093b8:	4b24      	ldr	r3, [pc, #144]	@ (800944c <vTaskSwitchContext+0xb0>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	fab3 f383 	clz	r3, r3
 80093c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80093c6:	7afb      	ldrb	r3, [r7, #11]
 80093c8:	f1c3 031f 	rsb	r3, r3, #31
 80093cc:	617b      	str	r3, [r7, #20]
 80093ce:	4920      	ldr	r1, [pc, #128]	@ (8009450 <vTaskSwitchContext+0xb4>)
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	440b      	add	r3, r1
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10d      	bne.n	80093fe <vTaskSwitchContext+0x62>
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e6:	b672      	cpsid	i
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	b662      	cpsie	i
 80093f6:	607b      	str	r3, [r7, #4]
}
 80093f8:	bf00      	nop
 80093fa:	bf00      	nop
 80093fc:	e7fd      	b.n	80093fa <vTaskSwitchContext+0x5e>
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4a11      	ldr	r2, [pc, #68]	@ (8009450 <vTaskSwitchContext+0xb4>)
 800940a:	4413      	add	r3, r2
 800940c:	613b      	str	r3, [r7, #16]
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	605a      	str	r2, [r3, #4]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	3308      	adds	r3, #8
 8009420:	429a      	cmp	r2, r3
 8009422:	d104      	bne.n	800942e <vTaskSwitchContext+0x92>
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	605a      	str	r2, [r3, #4]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	4a07      	ldr	r2, [pc, #28]	@ (8009454 <vTaskSwitchContext+0xb8>)
 8009436:	6013      	str	r3, [r2, #0]
}
 8009438:	bf00      	nop
 800943a:	371c      	adds	r7, #28
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	200014ac 	.word	0x200014ac
 8009448:	20001498 	.word	0x20001498
 800944c:	2000148c 	.word	0x2000148c
 8009450:	20001388 	.word	0x20001388
 8009454:	20001384 	.word	0x20001384

08009458 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10d      	bne.n	8009484 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800946c:	b672      	cpsid	i
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	b662      	cpsie	i
 800947c:	60fb      	str	r3, [r7, #12]
}
 800947e:	bf00      	nop
 8009480:	bf00      	nop
 8009482:	e7fd      	b.n	8009480 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009484:	4b07      	ldr	r3, [pc, #28]	@ (80094a4 <vTaskPlaceOnEventList+0x4c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3318      	adds	r3, #24
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7fe fd81 	bl	8007f94 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009492:	2101      	movs	r1, #1
 8009494:	6838      	ldr	r0, [r7, #0]
 8009496:	f000 fcb5 	bl	8009e04 <prvAddCurrentTaskToDelayedList>
}
 800949a:	bf00      	nop
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20001384 	.word	0x20001384

080094a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10d      	bne.n	80094d6 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094be:	b672      	cpsid	i
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	b662      	cpsie	i
 80094ce:	617b      	str	r3, [r7, #20]
}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	e7fd      	b.n	80094d2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009500 <vTaskPlaceOnEventListRestricted+0x58>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3318      	adds	r3, #24
 80094dc:	4619      	mov	r1, r3
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f7fe fd34 	bl	8007f4c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80094ea:	f04f 33ff 	mov.w	r3, #4294967295
 80094ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	68b8      	ldr	r0, [r7, #8]
 80094f4:	f000 fc86 	bl	8009e04 <prvAddCurrentTaskToDelayedList>
	}
 80094f8:	bf00      	nop
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20001384 	.word	0x20001384

08009504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10d      	bne.n	8009536 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951e:	b672      	cpsid	i
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	b662      	cpsie	i
 800952e:	60fb      	str	r3, [r7, #12]
}
 8009530:	bf00      	nop
 8009532:	bf00      	nop
 8009534:	e7fd      	b.n	8009532 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	3318      	adds	r3, #24
 800953a:	4618      	mov	r0, r3
 800953c:	f7fe fd63 	bl	8008006 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009540:	4b1d      	ldr	r3, [pc, #116]	@ (80095b8 <xTaskRemoveFromEventList+0xb4>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d11c      	bne.n	8009582 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	3304      	adds	r3, #4
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe fd5a 	bl	8008006 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009556:	2201      	movs	r2, #1
 8009558:	409a      	lsls	r2, r3
 800955a:	4b18      	ldr	r3, [pc, #96]	@ (80095bc <xTaskRemoveFromEventList+0xb8>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4313      	orrs	r3, r2
 8009560:	4a16      	ldr	r2, [pc, #88]	@ (80095bc <xTaskRemoveFromEventList+0xb8>)
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4a13      	ldr	r2, [pc, #76]	@ (80095c0 <xTaskRemoveFromEventList+0xbc>)
 8009572:	441a      	add	r2, r3
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	3304      	adds	r3, #4
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7fe fce6 	bl	8007f4c <vListInsertEnd>
 8009580:	e005      	b.n	800958e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	3318      	adds	r3, #24
 8009586:	4619      	mov	r1, r3
 8009588:	480e      	ldr	r0, [pc, #56]	@ (80095c4 <xTaskRemoveFromEventList+0xc0>)
 800958a:	f7fe fcdf 	bl	8007f4c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009592:	4b0d      	ldr	r3, [pc, #52]	@ (80095c8 <xTaskRemoveFromEventList+0xc4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009598:	429a      	cmp	r2, r3
 800959a:	d905      	bls.n	80095a8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800959c:	2301      	movs	r3, #1
 800959e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095a0:	4b0a      	ldr	r3, [pc, #40]	@ (80095cc <xTaskRemoveFromEventList+0xc8>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	601a      	str	r2, [r3, #0]
 80095a6:	e001      	b.n	80095ac <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80095a8:	2300      	movs	r3, #0
 80095aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095ac:	697b      	ldr	r3, [r7, #20]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	200014ac 	.word	0x200014ac
 80095bc:	2000148c 	.word	0x2000148c
 80095c0:	20001388 	.word	0x20001388
 80095c4:	20001444 	.word	0x20001444
 80095c8:	20001384 	.word	0x20001384
 80095cc:	20001498 	.word	0x20001498

080095d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095d8:	4b06      	ldr	r3, [pc, #24]	@ (80095f4 <vTaskInternalSetTimeOutState+0x24>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095e0:	4b05      	ldr	r3, [pc, #20]	@ (80095f8 <vTaskInternalSetTimeOutState+0x28>)
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	605a      	str	r2, [r3, #4]
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	2000149c 	.word	0x2000149c
 80095f8:	20001488 	.word	0x20001488

080095fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10d      	bne.n	8009628 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009610:	b672      	cpsid	i
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	b662      	cpsie	i
 8009620:	613b      	str	r3, [r7, #16]
}
 8009622:	bf00      	nop
 8009624:	bf00      	nop
 8009626:	e7fd      	b.n	8009624 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10d      	bne.n	800964a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009632:	b672      	cpsid	i
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	b662      	cpsie	i
 8009642:	60fb      	str	r3, [r7, #12]
}
 8009644:	bf00      	nop
 8009646:	bf00      	nop
 8009648:	e7fd      	b.n	8009646 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800964a:	f001 f93f 	bl	800a8cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800964e:	4b1d      	ldr	r3, [pc, #116]	@ (80096c4 <xTaskCheckForTimeOut+0xc8>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	d102      	bne.n	800966e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009668:	2300      	movs	r3, #0
 800966a:	61fb      	str	r3, [r7, #28]
 800966c:	e023      	b.n	80096b6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	4b15      	ldr	r3, [pc, #84]	@ (80096c8 <xTaskCheckForTimeOut+0xcc>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d007      	beq.n	800968a <xTaskCheckForTimeOut+0x8e>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	429a      	cmp	r2, r3
 8009682:	d302      	bcc.n	800968a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009684:	2301      	movs	r3, #1
 8009686:	61fb      	str	r3, [r7, #28]
 8009688:	e015      	b.n	80096b6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	429a      	cmp	r2, r3
 8009692:	d20b      	bcs.n	80096ac <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	1ad2      	subs	r2, r2, r3
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff ff95 	bl	80095d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096a6:	2300      	movs	r3, #0
 80096a8:	61fb      	str	r3, [r7, #28]
 80096aa:	e004      	b.n	80096b6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2200      	movs	r2, #0
 80096b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096b2:	2301      	movs	r3, #1
 80096b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096b6:	f001 f93f 	bl	800a938 <vPortExitCritical>

	return xReturn;
 80096ba:	69fb      	ldr	r3, [r7, #28]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3720      	adds	r7, #32
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20001488 	.word	0x20001488
 80096c8:	2000149c 	.word	0x2000149c

080096cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096cc:	b480      	push	{r7}
 80096ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096d0:	4b03      	ldr	r3, [pc, #12]	@ (80096e0 <vTaskMissedYield+0x14>)
 80096d2:	2201      	movs	r2, #1
 80096d4:	601a      	str	r2, [r3, #0]
}
 80096d6:	bf00      	nop
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	20001498 	.word	0x20001498

080096e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096ec:	f000 f852 	bl	8009794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096f0:	4b06      	ldr	r3, [pc, #24]	@ (800970c <prvIdleTask+0x28>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d9f9      	bls.n	80096ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80096f8:	4b05      	ldr	r3, [pc, #20]	@ (8009710 <prvIdleTask+0x2c>)
 80096fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009708:	e7f0      	b.n	80096ec <prvIdleTask+0x8>
 800970a:	bf00      	nop
 800970c:	20001388 	.word	0x20001388
 8009710:	e000ed04 	.word	0xe000ed04

08009714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800971a:	2300      	movs	r3, #0
 800971c:	607b      	str	r3, [r7, #4]
 800971e:	e00c      	b.n	800973a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	4613      	mov	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4413      	add	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4a12      	ldr	r2, [pc, #72]	@ (8009774 <prvInitialiseTaskLists+0x60>)
 800972c:	4413      	add	r3, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fbdf 	bl	8007ef2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3301      	adds	r3, #1
 8009738:	607b      	str	r3, [r7, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b06      	cmp	r3, #6
 800973e:	d9ef      	bls.n	8009720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009740:	480d      	ldr	r0, [pc, #52]	@ (8009778 <prvInitialiseTaskLists+0x64>)
 8009742:	f7fe fbd6 	bl	8007ef2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009746:	480d      	ldr	r0, [pc, #52]	@ (800977c <prvInitialiseTaskLists+0x68>)
 8009748:	f7fe fbd3 	bl	8007ef2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800974c:	480c      	ldr	r0, [pc, #48]	@ (8009780 <prvInitialiseTaskLists+0x6c>)
 800974e:	f7fe fbd0 	bl	8007ef2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009752:	480c      	ldr	r0, [pc, #48]	@ (8009784 <prvInitialiseTaskLists+0x70>)
 8009754:	f7fe fbcd 	bl	8007ef2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009758:	480b      	ldr	r0, [pc, #44]	@ (8009788 <prvInitialiseTaskLists+0x74>)
 800975a:	f7fe fbca 	bl	8007ef2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800975e:	4b0b      	ldr	r3, [pc, #44]	@ (800978c <prvInitialiseTaskLists+0x78>)
 8009760:	4a05      	ldr	r2, [pc, #20]	@ (8009778 <prvInitialiseTaskLists+0x64>)
 8009762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009764:	4b0a      	ldr	r3, [pc, #40]	@ (8009790 <prvInitialiseTaskLists+0x7c>)
 8009766:	4a05      	ldr	r2, [pc, #20]	@ (800977c <prvInitialiseTaskLists+0x68>)
 8009768:	601a      	str	r2, [r3, #0]
}
 800976a:	bf00      	nop
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20001388 	.word	0x20001388
 8009778:	20001414 	.word	0x20001414
 800977c:	20001428 	.word	0x20001428
 8009780:	20001444 	.word	0x20001444
 8009784:	20001458 	.word	0x20001458
 8009788:	20001470 	.word	0x20001470
 800978c:	2000143c 	.word	0x2000143c
 8009790:	20001440 	.word	0x20001440

08009794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800979a:	e019      	b.n	80097d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800979c:	f001 f896 	bl	800a8cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097a0:	4b10      	ldr	r3, [pc, #64]	@ (80097e4 <prvCheckTasksWaitingTermination+0x50>)
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe fc2a 	bl	8008006 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097b2:	4b0d      	ldr	r3, [pc, #52]	@ (80097e8 <prvCheckTasksWaitingTermination+0x54>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3b01      	subs	r3, #1
 80097b8:	4a0b      	ldr	r2, [pc, #44]	@ (80097e8 <prvCheckTasksWaitingTermination+0x54>)
 80097ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097bc:	4b0b      	ldr	r3, [pc, #44]	@ (80097ec <prvCheckTasksWaitingTermination+0x58>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3b01      	subs	r3, #1
 80097c2:	4a0a      	ldr	r2, [pc, #40]	@ (80097ec <prvCheckTasksWaitingTermination+0x58>)
 80097c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097c6:	f001 f8b7 	bl	800a938 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f810 	bl	80097f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097d0:	4b06      	ldr	r3, [pc, #24]	@ (80097ec <prvCheckTasksWaitingTermination+0x58>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e1      	bne.n	800979c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097d8:	bf00      	nop
 80097da:	bf00      	nop
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20001458 	.word	0x20001458
 80097e8:	20001484 	.word	0x20001484
 80097ec:	2000146c 	.word	0x2000146c

080097f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d108      	bne.n	8009814 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009806:	4618      	mov	r0, r3
 8009808:	f001 fa5c 	bl	800acc4 <vPortFree>
				vPortFree( pxTCB );
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f001 fa59 	bl	800acc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009812:	e01b      	b.n	800984c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800981a:	2b01      	cmp	r3, #1
 800981c:	d103      	bne.n	8009826 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f001 fa50 	bl	800acc4 <vPortFree>
	}
 8009824:	e012      	b.n	800984c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800982c:	2b02      	cmp	r3, #2
 800982e:	d00d      	beq.n	800984c <prvDeleteTCB+0x5c>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009834:	b672      	cpsid	i
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	b662      	cpsie	i
 8009844:	60fb      	str	r3, [r7, #12]
}
 8009846:	bf00      	nop
 8009848:	bf00      	nop
 800984a:	e7fd      	b.n	8009848 <prvDeleteTCB+0x58>
	}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800985a:	4b0c      	ldr	r3, [pc, #48]	@ (800988c <prvResetNextTaskUnblockTime+0x38>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d104      	bne.n	800986e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009864:	4b0a      	ldr	r3, [pc, #40]	@ (8009890 <prvResetNextTaskUnblockTime+0x3c>)
 8009866:	f04f 32ff 	mov.w	r2, #4294967295
 800986a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800986c:	e008      	b.n	8009880 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800986e:	4b07      	ldr	r3, [pc, #28]	@ (800988c <prvResetNextTaskUnblockTime+0x38>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	4a04      	ldr	r2, [pc, #16]	@ (8009890 <prvResetNextTaskUnblockTime+0x3c>)
 800987e:	6013      	str	r3, [r2, #0]
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	2000143c 	.word	0x2000143c
 8009890:	200014a4 	.word	0x200014a4

08009894 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800989a:	4b05      	ldr	r3, [pc, #20]	@ (80098b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80098a0:	687b      	ldr	r3, [r7, #4]
	}
 80098a2:	4618      	mov	r0, r3
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	20001384 	.word	0x20001384

080098b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098ba:	4b0b      	ldr	r3, [pc, #44]	@ (80098e8 <xTaskGetSchedulerState+0x34>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098c2:	2301      	movs	r3, #1
 80098c4:	607b      	str	r3, [r7, #4]
 80098c6:	e008      	b.n	80098da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098c8:	4b08      	ldr	r3, [pc, #32]	@ (80098ec <xTaskGetSchedulerState+0x38>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d102      	bne.n	80098d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098d0:	2302      	movs	r3, #2
 80098d2:	607b      	str	r3, [r7, #4]
 80098d4:	e001      	b.n	80098da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098d6:	2300      	movs	r3, #0
 80098d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098da:	687b      	ldr	r3, [r7, #4]
	}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	20001490 	.word	0x20001490
 80098ec:	200014ac 	.word	0x200014ac

080098f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d074      	beq.n	80099f0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009906:	4b3d      	ldr	r3, [pc, #244]	@ (80099fc <xTaskPriorityDisinherit+0x10c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	429a      	cmp	r2, r3
 800990e:	d00d      	beq.n	800992c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009914:	b672      	cpsid	i
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	b662      	cpsie	i
 8009924:	60fb      	str	r3, [r7, #12]
}
 8009926:	bf00      	nop
 8009928:	bf00      	nop
 800992a:	e7fd      	b.n	8009928 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10d      	bne.n	8009950 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009938:	b672      	cpsid	i
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	b662      	cpsie	i
 8009948:	60bb      	str	r3, [r7, #8]
}
 800994a:	bf00      	nop
 800994c:	bf00      	nop
 800994e:	e7fd      	b.n	800994c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009954:	1e5a      	subs	r2, r3, #1
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009962:	429a      	cmp	r2, r3
 8009964:	d044      	beq.n	80099f0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800996a:	2b00      	cmp	r3, #0
 800996c:	d140      	bne.n	80099f0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	3304      	adds	r3, #4
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe fb47 	bl	8008006 <uxListRemove>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d115      	bne.n	80099aa <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009982:	491f      	ldr	r1, [pc, #124]	@ (8009a00 <xTaskPriorityDisinherit+0x110>)
 8009984:	4613      	mov	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	440b      	add	r3, r1
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10a      	bne.n	80099aa <xTaskPriorityDisinherit+0xba>
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009998:	2201      	movs	r2, #1
 800999a:	fa02 f303 	lsl.w	r3, r2, r3
 800999e:	43da      	mvns	r2, r3
 80099a0:	4b18      	ldr	r3, [pc, #96]	@ (8009a04 <xTaskPriorityDisinherit+0x114>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4013      	ands	r3, r2
 80099a6:	4a17      	ldr	r2, [pc, #92]	@ (8009a04 <xTaskPriorityDisinherit+0x114>)
 80099a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b6:	f1c3 0207 	rsb	r2, r3, #7
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c2:	2201      	movs	r2, #1
 80099c4:	409a      	lsls	r2, r3
 80099c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009a04 <xTaskPriorityDisinherit+0x114>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	4a0d      	ldr	r2, [pc, #52]	@ (8009a04 <xTaskPriorityDisinherit+0x114>)
 80099ce:	6013      	str	r3, [r2, #0]
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099d4:	4613      	mov	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4a08      	ldr	r2, [pc, #32]	@ (8009a00 <xTaskPriorityDisinherit+0x110>)
 80099de:	441a      	add	r2, r3
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4619      	mov	r1, r3
 80099e6:	4610      	mov	r0, r2
 80099e8:	f7fe fab0 	bl	8007f4c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099ec:	2301      	movs	r3, #1
 80099ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099f0:	697b      	ldr	r3, [r7, #20]
	}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20001384 	.word	0x20001384
 8009a00:	20001388 	.word	0x20001388
 8009a04:	2000148c 	.word	0x2000148c

08009a08 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009a16:	f000 ff59 	bl	800a8cc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009a1a:	4b26      	ldr	r3, [pc, #152]	@ (8009ab4 <xTaskNotifyWait+0xac>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d01a      	beq.n	8009a5e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009a28:	4b22      	ldr	r3, [pc, #136]	@ (8009ab4 <xTaskNotifyWait+0xac>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	43d2      	mvns	r2, r2
 8009a32:	400a      	ands	r2, r1
 8009a34:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009a36:	4b1f      	ldr	r3, [pc, #124]	@ (8009ab4 <xTaskNotifyWait+0xac>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00b      	beq.n	8009a5e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a46:	2101      	movs	r1, #1
 8009a48:	6838      	ldr	r0, [r7, #0]
 8009a4a:	f000 f9db 	bl	8009e04 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab8 <xTaskNotifyWait+0xb0>)
 8009a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009a5e:	f000 ff6b 	bl	800a938 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009a62:	f000 ff33 	bl	800a8cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d004      	beq.n	8009a76 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009a6c:	4b11      	ldr	r3, [pc, #68]	@ (8009ab4 <xTaskNotifyWait+0xac>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009a76:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab4 <xTaskNotifyWait+0xac>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d002      	beq.n	8009a8a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009a84:	2300      	movs	r3, #0
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	e008      	b.n	8009a9c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8009ab4 <xTaskNotifyWait+0xac>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	43d2      	mvns	r2, r2
 8009a94:	400a      	ands	r2, r1
 8009a96:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a9c:	4b05      	ldr	r3, [pc, #20]	@ (8009ab4 <xTaskNotifyWait+0xac>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8009aa6:	f000 ff47 	bl	800a938 <vPortExitCritical>

		return xReturn;
 8009aaa:	697b      	ldr	r3, [r7, #20]
	}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	20001384 	.word	0x20001384
 8009ab8:	e000ed04 	.word	0xe000ed04

08009abc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08a      	sub	sp, #40	@ 0x28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	603b      	str	r3, [r7, #0]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009acc:	2301      	movs	r3, #1
 8009ace:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10d      	bne.n	8009af2 <xTaskGenericNotify+0x36>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ada:	b672      	cpsid	i
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	b662      	cpsie	i
 8009aea:	61bb      	str	r3, [r7, #24]
}
 8009aec:	bf00      	nop
 8009aee:	bf00      	nop
 8009af0:	e7fd      	b.n	8009aee <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009af6:	f000 fee9 	bl	800a8cc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009b0e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009b10:	6a3b      	ldr	r3, [r7, #32]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8009b18:	79fb      	ldrb	r3, [r7, #7]
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	d827      	bhi.n	8009b6e <xTaskGenericNotify+0xb2>
 8009b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b24 <xTaskGenericNotify+0x68>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009b95 	.word	0x08009b95
 8009b28:	08009b39 	.word	0x08009b39
 8009b2c:	08009b47 	.word	0x08009b47
 8009b30:	08009b53 	.word	0x08009b53
 8009b34:	08009b5b 	.word	0x08009b5b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	431a      	orrs	r2, r3
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8009b44:	e029      	b.n	8009b9a <xTaskGenericNotify+0xde>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8009b50:	e023      	b.n	8009b9a <xTaskGenericNotify+0xde>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8009b58:	e01f      	b.n	8009b9a <xTaskGenericNotify+0xde>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009b5a:	7ffb      	ldrb	r3, [r7, #31]
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d003      	beq.n	8009b68 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009b66:	e018      	b.n	8009b9a <xTaskGenericNotify+0xde>
						xReturn = pdFAIL;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009b6c:	e015      	b.n	8009b9a <xTaskGenericNotify+0xde>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b76:	d00f      	beq.n	8009b98 <xTaskGenericNotify+0xdc>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7c:	b672      	cpsid	i
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	b662      	cpsie	i
 8009b8c:	617b      	str	r3, [r7, #20]
}
 8009b8e:	bf00      	nop
 8009b90:	bf00      	nop
 8009b92:	e7fd      	b.n	8009b90 <xTaskGenericNotify+0xd4>
					break;
 8009b94:	bf00      	nop
 8009b96:	e000      	b.n	8009b9a <xTaskGenericNotify+0xde>

					break;
 8009b98:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009b9a:	7ffb      	ldrb	r3, [r7, #31]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d13c      	bne.n	8009c1a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7fe fa2e 	bl	8008006 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bae:	2201      	movs	r2, #1
 8009bb0:	409a      	lsls	r2, r3
 8009bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8009c28 <xTaskGenericNotify+0x16c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8009c28 <xTaskGenericNotify+0x16c>)
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4a18      	ldr	r2, [pc, #96]	@ (8009c2c <xTaskGenericNotify+0x170>)
 8009bca:	441a      	add	r2, r3
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	f7fe f9ba 	bl	8007f4c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00d      	beq.n	8009bfc <xTaskGenericNotify+0x140>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be4:	b672      	cpsid	i
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	b662      	cpsie	i
 8009bf4:	613b      	str	r3, [r7, #16]
}
 8009bf6:	bf00      	nop
 8009bf8:	bf00      	nop
 8009bfa:	e7fd      	b.n	8009bf8 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c00:	4b0b      	ldr	r3, [pc, #44]	@ (8009c30 <xTaskGenericNotify+0x174>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d907      	bls.n	8009c1a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c34 <xTaskGenericNotify+0x178>)
 8009c0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009c1a:	f000 fe8d 	bl	800a938 <vPortExitCritical>

		return xReturn;
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3728      	adds	r7, #40	@ 0x28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	2000148c 	.word	0x2000148c
 8009c2c:	20001388 	.word	0x20001388
 8009c30:	20001384 	.word	0x20001384
 8009c34:	e000ed04 	.word	0xe000ed04

08009c38 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08e      	sub	sp, #56	@ 0x38
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	603b      	str	r3, [r7, #0]
 8009c44:	4613      	mov	r3, r2
 8009c46:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10d      	bne.n	8009c6e <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c56:	b672      	cpsid	i
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	b662      	cpsie	i
 8009c66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	e7fd      	b.n	8009c6a <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c6e:	f000 ff15 	bl	800aa9c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8009c76:	f3ef 8211 	mrs	r2, BASEPRI
 8009c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7e:	b672      	cpsid	i
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	b662      	cpsie	i
 8009c8e:	623a      	str	r2, [r7, #32]
 8009c90:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009c92:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d003      	beq.n	8009ca4 <xTaskGenericNotifyFromISR+0x6c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	2b04      	cmp	r3, #4
 8009cba:	d829      	bhi.n	8009d10 <xTaskGenericNotifyFromISR+0xd8>
 8009cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8009cc4 <xTaskGenericNotifyFromISR+0x8c>)
 8009cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc2:	bf00      	nop
 8009cc4:	08009d37 	.word	0x08009d37
 8009cc8:	08009cd9 	.word	0x08009cd9
 8009ccc:	08009ce7 	.word	0x08009ce7
 8009cd0:	08009cf3 	.word	0x08009cf3
 8009cd4:	08009cfb 	.word	0x08009cfb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	431a      	orrs	r2, r3
 8009ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8009ce4:	e02a      	b.n	8009d3c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cee:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8009cf0:	e024      	b.n	8009d3c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8009cf8:	e020      	b.n	8009d3c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d003      	beq.n	8009d0a <xTaskGenericNotifyFromISR+0xd2>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009d08:	e018      	b.n	8009d3c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8009d0e:	e015      	b.n	8009d3c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d18:	d00f      	beq.n	8009d3a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1e:	b672      	cpsid	i
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	b662      	cpsie	i
 8009d2e:	61bb      	str	r3, [r7, #24]
}
 8009d30:	bf00      	nop
 8009d32:	bf00      	nop
 8009d34:	e7fd      	b.n	8009d32 <xTaskGenericNotifyFromISR+0xfa>
					break;
 8009d36:	bf00      	nop
 8009d38:	e000      	b.n	8009d3c <xTaskGenericNotifyFromISR+0x104>
					break;
 8009d3a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009d3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d148      	bne.n	8009dd6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00d      	beq.n	8009d68 <xTaskGenericNotifyFromISR+0x130>
	__asm volatile
 8009d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d50:	b672      	cpsid	i
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	b662      	cpsie	i
 8009d60:	617b      	str	r3, [r7, #20]
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	e7fd      	b.n	8009d64 <xTaskGenericNotifyFromISR+0x12c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d68:	4b20      	ldr	r3, [pc, #128]	@ (8009dec <xTaskGenericNotifyFromISR+0x1b4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d11c      	bne.n	8009daa <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d72:	3304      	adds	r3, #4
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fe f946 	bl	8008006 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7e:	2201      	movs	r2, #1
 8009d80:	409a      	lsls	r2, r3
 8009d82:	4b1b      	ldr	r3, [pc, #108]	@ (8009df0 <xTaskGenericNotifyFromISR+0x1b8>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	4a19      	ldr	r2, [pc, #100]	@ (8009df0 <xTaskGenericNotifyFromISR+0x1b8>)
 8009d8a:	6013      	str	r3, [r2, #0]
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4a16      	ldr	r2, [pc, #88]	@ (8009df4 <xTaskGenericNotifyFromISR+0x1bc>)
 8009d9a:	441a      	add	r2, r3
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9e:	3304      	adds	r3, #4
 8009da0:	4619      	mov	r1, r3
 8009da2:	4610      	mov	r0, r2
 8009da4:	f7fe f8d2 	bl	8007f4c <vListInsertEnd>
 8009da8:	e005      	b.n	8009db6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	3318      	adds	r3, #24
 8009dae:	4619      	mov	r1, r3
 8009db0:	4811      	ldr	r0, [pc, #68]	@ (8009df8 <xTaskGenericNotifyFromISR+0x1c0>)
 8009db2:	f7fe f8cb 	bl	8007f4c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dba:	4b10      	ldr	r3, [pc, #64]	@ (8009dfc <xTaskGenericNotifyFromISR+0x1c4>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d908      	bls.n	8009dd6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d002      	beq.n	8009dd0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dcc:	2201      	movs	r2, #1
 8009dce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8009e00 <xTaskGenericNotifyFromISR+0x1c8>)
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	601a      	str	r2, [r3, #0]
 8009dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	f383 8811 	msr	BASEPRI, r3
}
 8009de0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3738      	adds	r7, #56	@ 0x38
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	200014ac 	.word	0x200014ac
 8009df0:	2000148c 	.word	0x2000148c
 8009df4:	20001388 	.word	0x20001388
 8009df8:	20001444 	.word	0x20001444
 8009dfc:	20001384 	.word	0x20001384
 8009e00:	20001498 	.word	0x20001498

08009e04 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e0e:	4b29      	ldr	r3, [pc, #164]	@ (8009eb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e14:	4b28      	ldr	r3, [pc, #160]	@ (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe f8f3 	bl	8008006 <uxListRemove>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10b      	bne.n	8009e3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009e26:	4b24      	ldr	r3, [pc, #144]	@ (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e32:	43da      	mvns	r2, r3
 8009e34:	4b21      	ldr	r3, [pc, #132]	@ (8009ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4013      	ands	r3, r2
 8009e3a:	4a20      	ldr	r2, [pc, #128]	@ (8009ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e44:	d10a      	bne.n	8009e5c <prvAddCurrentTaskToDelayedList+0x58>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d007      	beq.n	8009e5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3304      	adds	r3, #4
 8009e52:	4619      	mov	r1, r3
 8009e54:	481a      	ldr	r0, [pc, #104]	@ (8009ec0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009e56:	f7fe f879 	bl	8007f4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e5a:	e026      	b.n	8009eaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e64:	4b14      	ldr	r3, [pc, #80]	@ (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d209      	bcs.n	8009e88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e74:	4b13      	ldr	r3, [pc, #76]	@ (8009ec4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	4b0f      	ldr	r3, [pc, #60]	@ (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4610      	mov	r0, r2
 8009e82:	f7fe f887 	bl	8007f94 <vListInsert>
}
 8009e86:	e010      	b.n	8009eaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e88:	4b0f      	ldr	r3, [pc, #60]	@ (8009ec8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3304      	adds	r3, #4
 8009e92:	4619      	mov	r1, r3
 8009e94:	4610      	mov	r0, r2
 8009e96:	f7fe f87d 	bl	8007f94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8009ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d202      	bcs.n	8009eaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009ea4:	4a09      	ldr	r2, [pc, #36]	@ (8009ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	6013      	str	r3, [r2, #0]
}
 8009eaa:	bf00      	nop
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20001488 	.word	0x20001488
 8009eb8:	20001384 	.word	0x20001384
 8009ebc:	2000148c 	.word	0x2000148c
 8009ec0:	20001470 	.word	0x20001470
 8009ec4:	20001440 	.word	0x20001440
 8009ec8:	2000143c 	.word	0x2000143c
 8009ecc:	200014a4 	.word	0x200014a4

08009ed0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b08a      	sub	sp, #40	@ 0x28
 8009ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009eda:	f000 fba7 	bl	800a62c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ede:	4b1e      	ldr	r3, [pc, #120]	@ (8009f58 <xTimerCreateTimerTask+0x88>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d021      	beq.n	8009f2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009eee:	1d3a      	adds	r2, r7, #4
 8009ef0:	f107 0108 	add.w	r1, r7, #8
 8009ef4:	f107 030c 	add.w	r3, r7, #12
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7f9 fc9f 	bl	800383c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009efe:	6879      	ldr	r1, [r7, #4]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	9202      	str	r2, [sp, #8]
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	2302      	movs	r3, #2
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	460a      	mov	r2, r1
 8009f10:	4912      	ldr	r1, [pc, #72]	@ (8009f5c <xTimerCreateTimerTask+0x8c>)
 8009f12:	4813      	ldr	r0, [pc, #76]	@ (8009f60 <xTimerCreateTimerTask+0x90>)
 8009f14:	f7fe fe84 	bl	8008c20 <xTaskCreateStatic>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	4a12      	ldr	r2, [pc, #72]	@ (8009f64 <xTimerCreateTimerTask+0x94>)
 8009f1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f1e:	4b11      	ldr	r3, [pc, #68]	@ (8009f64 <xTimerCreateTimerTask+0x94>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f26:	2301      	movs	r3, #1
 8009f28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10d      	bne.n	8009f4c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f34:	b672      	cpsid	i
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	b662      	cpsie	i
 8009f44:	613b      	str	r3, [r7, #16]
}
 8009f46:	bf00      	nop
 8009f48:	bf00      	nop
 8009f4a:	e7fd      	b.n	8009f48 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009f4c:	697b      	ldr	r3, [r7, #20]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	200014e0 	.word	0x200014e0
 8009f5c:	0800b78c 	.word	0x0800b78c
 8009f60:	0800a1f1 	.word	0x0800a1f1
 8009f64:	200014e4 	.word	0x200014e4

08009f68 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af02      	add	r7, sp, #8
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009f76:	2028      	movs	r0, #40	@ 0x28
 8009f78:	f000 fdd6 	bl	800ab28 <pvPortMalloc>
 8009f7c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00d      	beq.n	8009fa0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	68b9      	ldr	r1, [r7, #8]
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 f849 	bl	800a032 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009fa0:	697b      	ldr	r3, [r7, #20]
	}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b08a      	sub	sp, #40	@ 0x28
 8009fae:	af02      	add	r7, sp, #8
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	607a      	str	r2, [r7, #4]
 8009fb6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009fb8:	2328      	movs	r3, #40	@ 0x28
 8009fba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	2b28      	cmp	r3, #40	@ 0x28
 8009fc0:	d00d      	beq.n	8009fde <xTimerCreateStatic+0x34>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc6:	b672      	cpsid	i
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	b662      	cpsie	i
 8009fd6:	61bb      	str	r3, [r7, #24]
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	e7fd      	b.n	8009fda <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009fde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10d      	bne.n	800a002 <xTimerCreateStatic+0x58>
	__asm volatile
 8009fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fea:	b672      	cpsid	i
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	b662      	cpsie	i
 8009ffa:	617b      	str	r3, [r7, #20]
}
 8009ffc:	bf00      	nop
 8009ffe:	bf00      	nop
 800a000:	e7fd      	b.n	8009ffe <xTimerCreateStatic+0x54>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a004:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00d      	beq.n	800a028 <xTimerCreateStatic+0x7e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	2202      	movs	r2, #2
 800a010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	9301      	str	r3, [sp, #4]
 800a018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 f805 	bl	800a032 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a028:	69fb      	ldr	r3, [r7, #28]
	}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3720      	adds	r7, #32
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b086      	sub	sp, #24
 800a036:	af00      	add	r7, sp, #0
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	607a      	str	r2, [r7, #4]
 800a03e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10d      	bne.n	800a062 <prvInitialiseNewTimer+0x30>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04a:	b672      	cpsid	i
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	b662      	cpsie	i
 800a05a:	617b      	str	r3, [r7, #20]
}
 800a05c:	bf00      	nop
 800a05e:	bf00      	nop
 800a060:	e7fd      	b.n	800a05e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	2b00      	cmp	r3, #0
 800a066:	d01e      	beq.n	800a0a6 <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a068:	f000 fae0 	bl	800a62c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a080:	6a3a      	ldr	r2, [r7, #32]
 800a082:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a086:	3304      	adds	r3, #4
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fd ff52 	bl	8007f32 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d008      	beq.n	800a0a6 <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a096:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a09a:	f043 0304 	orr.w	r3, r3, #4
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a0a6:	bf00      	nop
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08a      	sub	sp, #40	@ 0x28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
 800a0bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10d      	bne.n	800a0e4 <xTimerGenericCommand+0x34>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0cc:	b672      	cpsid	i
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	b662      	cpsie	i
 800a0dc:	623b      	str	r3, [r7, #32]
}
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
 800a0e2:	e7fd      	b.n	800a0e0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0e4:	4b19      	ldr	r3, [pc, #100]	@ (800a14c <xTimerGenericCommand+0x9c>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d02a      	beq.n	800a142 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	2b05      	cmp	r3, #5
 800a0fc:	dc18      	bgt.n	800a130 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a0fe:	f7ff fbd9 	bl	80098b4 <xTaskGetSchedulerState>
 800a102:	4603      	mov	r3, r0
 800a104:	2b02      	cmp	r3, #2
 800a106:	d109      	bne.n	800a11c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a108:	4b10      	ldr	r3, [pc, #64]	@ (800a14c <xTimerGenericCommand+0x9c>)
 800a10a:	6818      	ldr	r0, [r3, #0]
 800a10c:	f107 0114 	add.w	r1, r7, #20
 800a110:	2300      	movs	r3, #0
 800a112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a114:	f7fe f8f8 	bl	8008308 <xQueueGenericSend>
 800a118:	6278      	str	r0, [r7, #36]	@ 0x24
 800a11a:	e012      	b.n	800a142 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a11c:	4b0b      	ldr	r3, [pc, #44]	@ (800a14c <xTimerGenericCommand+0x9c>)
 800a11e:	6818      	ldr	r0, [r3, #0]
 800a120:	f107 0114 	add.w	r1, r7, #20
 800a124:	2300      	movs	r3, #0
 800a126:	2200      	movs	r2, #0
 800a128:	f7fe f8ee 	bl	8008308 <xQueueGenericSend>
 800a12c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a12e:	e008      	b.n	800a142 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a130:	4b06      	ldr	r3, [pc, #24]	@ (800a14c <xTimerGenericCommand+0x9c>)
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	f107 0114 	add.w	r1, r7, #20
 800a138:	2300      	movs	r3, #0
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	f7fe f9ee 	bl	800851c <xQueueGenericSendFromISR>
 800a140:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a144:	4618      	mov	r0, r3
 800a146:	3728      	adds	r7, #40	@ 0x28
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	200014e0 	.word	0x200014e0

0800a150 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af02      	add	r7, sp, #8
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a15a:	4b24      	ldr	r3, [pc, #144]	@ (800a1ec <prvProcessExpiredTimer+0x9c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	3304      	adds	r3, #4
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fd ff4c 	bl	8008006 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a174:	f003 0304 	and.w	r3, r3, #4
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d025      	beq.n	800a1c8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	699a      	ldr	r2, [r3, #24]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	18d1      	adds	r1, r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	6978      	ldr	r0, [r7, #20]
 800a18a:	f000 f8d7 	bl	800a33c <prvInsertTimerInActiveList>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d022      	beq.n	800a1da <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a194:	2300      	movs	r3, #0
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	2300      	movs	r3, #0
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	2100      	movs	r1, #0
 800a19e:	6978      	ldr	r0, [r7, #20]
 800a1a0:	f7ff ff86 	bl	800a0b0 <xTimerGenericCommand>
 800a1a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d116      	bne.n	800a1da <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b0:	b672      	cpsid	i
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	b662      	cpsie	i
 800a1c0:	60fb      	str	r3, [r7, #12]
}
 800a1c2:	bf00      	nop
 800a1c4:	bf00      	nop
 800a1c6:	e7fd      	b.n	800a1c4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a1ce:	f023 0301 	bic.w	r3, r3, #1
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	6978      	ldr	r0, [r7, #20]
 800a1e0:	4798      	blx	r3
}
 800a1e2:	bf00      	nop
 800a1e4:	3718      	adds	r7, #24
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	200014d8 	.word	0x200014d8

0800a1f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1f8:	f107 0308 	add.w	r3, r7, #8
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 f859 	bl	800a2b4 <prvGetNextExpireTime>
 800a202:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	4619      	mov	r1, r3
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f000 f805 	bl	800a218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a20e:	f000 f8d7 	bl	800a3c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a212:	bf00      	nop
 800a214:	e7f0      	b.n	800a1f8 <prvTimerTask+0x8>
	...

0800a218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a222:	f7fe ff41 	bl	80090a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a226:	f107 0308 	add.w	r3, r7, #8
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f866 	bl	800a2fc <prvSampleTimeNow>
 800a230:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d130      	bne.n	800a29a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10a      	bne.n	800a254 <prvProcessTimerOrBlockTask+0x3c>
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	429a      	cmp	r2, r3
 800a244:	d806      	bhi.n	800a254 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a246:	f7fe ff3d 	bl	80090c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a24a:	68f9      	ldr	r1, [r7, #12]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7ff ff7f 	bl	800a150 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a252:	e024      	b.n	800a29e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d008      	beq.n	800a26c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a25a:	4b13      	ldr	r3, [pc, #76]	@ (800a2a8 <prvProcessTimerOrBlockTask+0x90>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <prvProcessTimerOrBlockTask+0x50>
 800a264:	2301      	movs	r3, #1
 800a266:	e000      	b.n	800a26a <prvProcessTimerOrBlockTask+0x52>
 800a268:	2300      	movs	r3, #0
 800a26a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a26c:	4b0f      	ldr	r3, [pc, #60]	@ (800a2ac <prvProcessTimerOrBlockTask+0x94>)
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	4619      	mov	r1, r3
 800a27a:	f7fe fc9d 	bl	8008bb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a27e:	f7fe ff21 	bl	80090c4 <xTaskResumeAll>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10a      	bne.n	800a29e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a288:	4b09      	ldr	r3, [pc, #36]	@ (800a2b0 <prvProcessTimerOrBlockTask+0x98>)
 800a28a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	f3bf 8f6f 	isb	sy
}
 800a298:	e001      	b.n	800a29e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a29a:	f7fe ff13 	bl	80090c4 <xTaskResumeAll>
}
 800a29e:	bf00      	nop
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200014dc 	.word	0x200014dc
 800a2ac:	200014e0 	.word	0x200014e0
 800a2b0:	e000ed04 	.word	0xe000ed04

0800a2b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a2f8 <prvGetNextExpireTime+0x44>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <prvGetNextExpireTime+0x16>
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	e000      	b.n	800a2cc <prvGetNextExpireTime+0x18>
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d105      	bne.n	800a2e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2d8:	4b07      	ldr	r3, [pc, #28]	@ (800a2f8 <prvGetNextExpireTime+0x44>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60fb      	str	r3, [r7, #12]
 800a2e2:	e001      	b.n	800a2e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	200014d8 	.word	0x200014d8

0800a2fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a304:	f7fe ff7e 	bl	8009204 <xTaskGetTickCount>
 800a308:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a30a:	4b0b      	ldr	r3, [pc, #44]	@ (800a338 <prvSampleTimeNow+0x3c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	429a      	cmp	r2, r3
 800a312:	d205      	bcs.n	800a320 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a314:	f000 f922 	bl	800a55c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	e002      	b.n	800a326 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a326:	4a04      	ldr	r2, [pc, #16]	@ (800a338 <prvSampleTimeNow+0x3c>)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a32c:	68fb      	ldr	r3, [r7, #12]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	200014e8 	.word	0x200014e8

0800a33c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a34a:	2300      	movs	r3, #0
 800a34c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d812      	bhi.n	800a388 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	1ad2      	subs	r2, r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d302      	bcc.n	800a376 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a370:	2301      	movs	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	e01b      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a376:	4b10      	ldr	r3, [pc, #64]	@ (800a3b8 <prvInsertTimerInActiveList+0x7c>)
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7fd fe07 	bl	8007f94 <vListInsert>
 800a386:	e012      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d206      	bcs.n	800a39e <prvInsertTimerInActiveList+0x62>
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	429a      	cmp	r2, r3
 800a396:	d302      	bcc.n	800a39e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a398:	2301      	movs	r3, #1
 800a39a:	617b      	str	r3, [r7, #20]
 800a39c:	e007      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a39e:	4b07      	ldr	r3, [pc, #28]	@ (800a3bc <prvInsertTimerInActiveList+0x80>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	f7fd fdf3 	bl	8007f94 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3ae:	697b      	ldr	r3, [r7, #20]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	200014dc 	.word	0x200014dc
 800a3bc:	200014d8 	.word	0x200014d8

0800a3c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08c      	sub	sp, #48	@ 0x30
 800a3c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3c6:	e0b6      	b.n	800a536 <prvProcessReceivedCommands+0x176>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f2c0 80b3 	blt.w	800a536 <prvProcessReceivedCommands+0x176>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d004      	beq.n	800a3e6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fd fe10 	bl	8008006 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3e6:	1d3b      	adds	r3, r7, #4
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff ff87 	bl	800a2fc <prvSampleTimeNow>
 800a3ee:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b09      	cmp	r3, #9
 800a3f4:	f200 809c 	bhi.w	800a530 <prvProcessReceivedCommands+0x170>
 800a3f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a400 <prvProcessReceivedCommands+0x40>)
 800a3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fe:	bf00      	nop
 800a400:	0800a429 	.word	0x0800a429
 800a404:	0800a429 	.word	0x0800a429
 800a408:	0800a429 	.word	0x0800a429
 800a40c:	0800a4a3 	.word	0x0800a4a3
 800a410:	0800a4b7 	.word	0x0800a4b7
 800a414:	0800a507 	.word	0x0800a507
 800a418:	0800a429 	.word	0x0800a429
 800a41c:	0800a429 	.word	0x0800a429
 800a420:	0800a4a3 	.word	0x0800a4a3
 800a424:	0800a4b7 	.word	0x0800a4b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a42e:	f043 0301 	orr.w	r3, r3, #1
 800a432:	b2da      	uxtb	r2, r3
 800a434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	18d1      	adds	r1, r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6a3a      	ldr	r2, [r7, #32]
 800a446:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a448:	f7ff ff78 	bl	800a33c <prvInsertTimerInActiveList>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d070      	beq.n	800a534 <prvProcessReceivedCommands+0x174>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a458:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a460:	f003 0304 	and.w	r3, r3, #4
 800a464:	2b00      	cmp	r3, #0
 800a466:	d065      	beq.n	800a534 <prvProcessReceivedCommands+0x174>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	441a      	add	r2, r3
 800a470:	2300      	movs	r3, #0
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	2300      	movs	r3, #0
 800a476:	2100      	movs	r1, #0
 800a478:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a47a:	f7ff fe19 	bl	800a0b0 <xTimerGenericCommand>
 800a47e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d156      	bne.n	800a534 <prvProcessReceivedCommands+0x174>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48a:	b672      	cpsid	i
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	b662      	cpsie	i
 800a49a:	61bb      	str	r3, [r7, #24]
}
 800a49c:	bf00      	nop
 800a49e:	bf00      	nop
 800a4a0:	e7fd      	b.n	800a49e <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a4a8:	f023 0301 	bic.w	r3, r3, #1
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800a4b4:	e03f      	b.n	800a536 <prvProcessReceivedCommands+0x176>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a4bc:	f043 0301 	orr.w	r3, r3, #1
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d10d      	bne.n	800a4f2 <prvProcessReceivedCommands+0x132>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4da:	b672      	cpsid	i
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	b662      	cpsie	i
 800a4ea:	617b      	str	r3, [r7, #20]
}
 800a4ec:	bf00      	nop
 800a4ee:	bf00      	nop
 800a4f0:	e7fd      	b.n	800a4ee <prvProcessReceivedCommands+0x12e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f4:	699a      	ldr	r2, [r3, #24]
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	18d1      	adds	r1, r2, r3
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	6a3a      	ldr	r2, [r7, #32]
 800a4fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a500:	f7ff ff1c 	bl	800a33c <prvInsertTimerInActiveList>
					break;
 800a504:	e017      	b.n	800a536 <prvProcessReceivedCommands+0x176>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a508:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a50c:	f003 0302 	and.w	r3, r3, #2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d103      	bne.n	800a51c <prvProcessReceivedCommands+0x15c>
						{
							vPortFree( pxTimer );
 800a514:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a516:	f000 fbd5 	bl	800acc4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a51a:	e00c      	b.n	800a536 <prvProcessReceivedCommands+0x176>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a522:	f023 0301 	bic.w	r3, r3, #1
 800a526:	b2da      	uxtb	r2, r3
 800a528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800a52e:	e002      	b.n	800a536 <prvProcessReceivedCommands+0x176>

				default	:
					/* Don't expect to get here. */
					break;
 800a530:	bf00      	nop
 800a532:	e000      	b.n	800a536 <prvProcessReceivedCommands+0x176>
					break;
 800a534:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a536:	4b08      	ldr	r3, [pc, #32]	@ (800a558 <prvProcessReceivedCommands+0x198>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f107 0108 	add.w	r1, r7, #8
 800a53e:	2200      	movs	r2, #0
 800a540:	4618      	mov	r0, r3
 800a542:	f7fe f88f 	bl	8008664 <xQueueReceive>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f47f af3d 	bne.w	800a3c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a54e:	bf00      	nop
 800a550:	bf00      	nop
 800a552:	3728      	adds	r7, #40	@ 0x28
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	200014e0 	.word	0x200014e0

0800a55c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a562:	e04b      	b.n	800a5fc <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a564:	4b2f      	ldr	r3, [pc, #188]	@ (800a624 <prvSwitchTimerLists+0xc8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a56e:	4b2d      	ldr	r3, [pc, #180]	@ (800a624 <prvSwitchTimerLists+0xc8>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	3304      	adds	r3, #4
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fd fd42 	bl	8008006 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a590:	f003 0304 	and.w	r3, r3, #4
 800a594:	2b00      	cmp	r3, #0
 800a596:	d031      	beq.n	800a5fc <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	4413      	add	r3, r2
 800a5a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d90e      	bls.n	800a5c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5b6:	4b1b      	ldr	r3, [pc, #108]	@ (800a624 <prvSwitchTimerLists+0xc8>)
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	f7fd fce7 	bl	8007f94 <vListInsert>
 800a5c6:	e019      	b.n	800a5fc <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f7ff fd6c 	bl	800a0b0 <xTimerGenericCommand>
 800a5d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10d      	bne.n	800a5fc <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e4:	b672      	cpsid	i
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	b662      	cpsie	i
 800a5f4:	603b      	str	r3, [r7, #0]
}
 800a5f6:	bf00      	nop
 800a5f8:	bf00      	nop
 800a5fa:	e7fd      	b.n	800a5f8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5fc:	4b09      	ldr	r3, [pc, #36]	@ (800a624 <prvSwitchTimerLists+0xc8>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d1ae      	bne.n	800a564 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a606:	4b07      	ldr	r3, [pc, #28]	@ (800a624 <prvSwitchTimerLists+0xc8>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a60c:	4b06      	ldr	r3, [pc, #24]	@ (800a628 <prvSwitchTimerLists+0xcc>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a04      	ldr	r2, [pc, #16]	@ (800a624 <prvSwitchTimerLists+0xc8>)
 800a612:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a614:	4a04      	ldr	r2, [pc, #16]	@ (800a628 <prvSwitchTimerLists+0xcc>)
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	6013      	str	r3, [r2, #0]
}
 800a61a:	bf00      	nop
 800a61c:	3718      	adds	r7, #24
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	200014d8 	.word	0x200014d8
 800a628:	200014dc 	.word	0x200014dc

0800a62c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a632:	f000 f94b 	bl	800a8cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a636:	4b15      	ldr	r3, [pc, #84]	@ (800a68c <prvCheckForValidListAndQueue+0x60>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d120      	bne.n	800a680 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a63e:	4814      	ldr	r0, [pc, #80]	@ (800a690 <prvCheckForValidListAndQueue+0x64>)
 800a640:	f7fd fc57 	bl	8007ef2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a644:	4813      	ldr	r0, [pc, #76]	@ (800a694 <prvCheckForValidListAndQueue+0x68>)
 800a646:	f7fd fc54 	bl	8007ef2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a64a:	4b13      	ldr	r3, [pc, #76]	@ (800a698 <prvCheckForValidListAndQueue+0x6c>)
 800a64c:	4a10      	ldr	r2, [pc, #64]	@ (800a690 <prvCheckForValidListAndQueue+0x64>)
 800a64e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a650:	4b12      	ldr	r3, [pc, #72]	@ (800a69c <prvCheckForValidListAndQueue+0x70>)
 800a652:	4a10      	ldr	r2, [pc, #64]	@ (800a694 <prvCheckForValidListAndQueue+0x68>)
 800a654:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a656:	2300      	movs	r3, #0
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	4b11      	ldr	r3, [pc, #68]	@ (800a6a0 <prvCheckForValidListAndQueue+0x74>)
 800a65c:	4a11      	ldr	r2, [pc, #68]	@ (800a6a4 <prvCheckForValidListAndQueue+0x78>)
 800a65e:	210c      	movs	r1, #12
 800a660:	200a      	movs	r0, #10
 800a662:	f7fd fd67 	bl	8008134 <xQueueGenericCreateStatic>
 800a666:	4603      	mov	r3, r0
 800a668:	4a08      	ldr	r2, [pc, #32]	@ (800a68c <prvCheckForValidListAndQueue+0x60>)
 800a66a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a66c:	4b07      	ldr	r3, [pc, #28]	@ (800a68c <prvCheckForValidListAndQueue+0x60>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d005      	beq.n	800a680 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a674:	4b05      	ldr	r3, [pc, #20]	@ (800a68c <prvCheckForValidListAndQueue+0x60>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	490b      	ldr	r1, [pc, #44]	@ (800a6a8 <prvCheckForValidListAndQueue+0x7c>)
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe fa72 	bl	8008b64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a680:	f000 f95a 	bl	800a938 <vPortExitCritical>
}
 800a684:	bf00      	nop
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	200014e0 	.word	0x200014e0
 800a690:	200014b0 	.word	0x200014b0
 800a694:	200014c4 	.word	0x200014c4
 800a698:	200014d8 	.word	0x200014d8
 800a69c:	200014dc 	.word	0x200014dc
 800a6a0:	20001564 	.word	0x20001564
 800a6a4:	200014ec 	.word	0x200014ec
 800a6a8:	0800b794 	.word	0x0800b794

0800a6ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	3b04      	subs	r3, #4
 800a6bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a6c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	3b04      	subs	r3, #4
 800a6ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	f023 0201 	bic.w	r2, r3, #1
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	3b04      	subs	r3, #4
 800a6da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6dc:	4a0c      	ldr	r2, [pc, #48]	@ (800a710 <pxPortInitialiseStack+0x64>)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3b14      	subs	r3, #20
 800a6e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3b04      	subs	r3, #4
 800a6f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f06f 0202 	mvn.w	r2, #2
 800a6fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	3b20      	subs	r3, #32
 800a700:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a702:	68fb      	ldr	r3, [r7, #12]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	0800a715 	.word	0x0800a715

0800a714 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a71e:	4b15      	ldr	r3, [pc, #84]	@ (800a774 <prvTaskExitError+0x60>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a726:	d00d      	beq.n	800a744 <prvTaskExitError+0x30>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72c:	b672      	cpsid	i
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	b662      	cpsie	i
 800a73c:	60fb      	str	r3, [r7, #12]
}
 800a73e:	bf00      	nop
 800a740:	bf00      	nop
 800a742:	e7fd      	b.n	800a740 <prvTaskExitError+0x2c>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a748:	b672      	cpsid	i
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	b662      	cpsie	i
 800a758:	60bb      	str	r3, [r7, #8]
}
 800a75a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a75c:	bf00      	nop
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0fc      	beq.n	800a75e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a764:	bf00      	nop
 800a766:	bf00      	nop
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	20000014 	.word	0x20000014
	...

0800a780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a780:	4b07      	ldr	r3, [pc, #28]	@ (800a7a0 <pxCurrentTCBConst2>)
 800a782:	6819      	ldr	r1, [r3, #0]
 800a784:	6808      	ldr	r0, [r1, #0]
 800a786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78a:	f380 8809 	msr	PSP, r0
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f04f 0000 	mov.w	r0, #0
 800a796:	f380 8811 	msr	BASEPRI, r0
 800a79a:	4770      	bx	lr
 800a79c:	f3af 8000 	nop.w

0800a7a0 <pxCurrentTCBConst2>:
 800a7a0:	20001384 	.word	0x20001384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop

0800a7a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7a8:	4808      	ldr	r0, [pc, #32]	@ (800a7cc <prvPortStartFirstTask+0x24>)
 800a7aa:	6800      	ldr	r0, [r0, #0]
 800a7ac:	6800      	ldr	r0, [r0, #0]
 800a7ae:	f380 8808 	msr	MSP, r0
 800a7b2:	f04f 0000 	mov.w	r0, #0
 800a7b6:	f380 8814 	msr	CONTROL, r0
 800a7ba:	b662      	cpsie	i
 800a7bc:	b661      	cpsie	f
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	df00      	svc	0
 800a7c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ca:	bf00      	nop
 800a7cc:	e000ed08 	.word	0xe000ed08

0800a7d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7d6:	4b37      	ldr	r3, [pc, #220]	@ (800a8b4 <xPortStartScheduler+0xe4>)
 800a7d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	22ff      	movs	r2, #255	@ 0xff
 800a7e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a8b8 <xPortStartScheduler+0xe8>)
 800a7fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7fe:	4b2f      	ldr	r3, [pc, #188]	@ (800a8bc <xPortStartScheduler+0xec>)
 800a800:	2207      	movs	r2, #7
 800a802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a804:	e009      	b.n	800a81a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a806:	4b2d      	ldr	r3, [pc, #180]	@ (800a8bc <xPortStartScheduler+0xec>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3b01      	subs	r3, #1
 800a80c:	4a2b      	ldr	r2, [pc, #172]	@ (800a8bc <xPortStartScheduler+0xec>)
 800a80e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	b2db      	uxtb	r3, r3
 800a818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a822:	2b80      	cmp	r3, #128	@ 0x80
 800a824:	d0ef      	beq.n	800a806 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a826:	4b25      	ldr	r3, [pc, #148]	@ (800a8bc <xPortStartScheduler+0xec>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f1c3 0307 	rsb	r3, r3, #7
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d00d      	beq.n	800a84e <xPortStartScheduler+0x7e>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a836:	b672      	cpsid	i
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	b662      	cpsie	i
 800a846:	60bb      	str	r3, [r7, #8]
}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	e7fd      	b.n	800a84a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a84e:	4b1b      	ldr	r3, [pc, #108]	@ (800a8bc <xPortStartScheduler+0xec>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	4a19      	ldr	r2, [pc, #100]	@ (800a8bc <xPortStartScheduler+0xec>)
 800a856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a858:	4b18      	ldr	r3, [pc, #96]	@ (800a8bc <xPortStartScheduler+0xec>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a860:	4a16      	ldr	r2, [pc, #88]	@ (800a8bc <xPortStartScheduler+0xec>)
 800a862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	b2da      	uxtb	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a86c:	4b14      	ldr	r3, [pc, #80]	@ (800a8c0 <xPortStartScheduler+0xf0>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a13      	ldr	r2, [pc, #76]	@ (800a8c0 <xPortStartScheduler+0xf0>)
 800a872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a878:	4b11      	ldr	r3, [pc, #68]	@ (800a8c0 <xPortStartScheduler+0xf0>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a10      	ldr	r2, [pc, #64]	@ (800a8c0 <xPortStartScheduler+0xf0>)
 800a87e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a884:	f000 f8dc 	bl	800aa40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a888:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c4 <xPortStartScheduler+0xf4>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a88e:	f000 f8fb 	bl	800aa88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a892:	4b0d      	ldr	r3, [pc, #52]	@ (800a8c8 <xPortStartScheduler+0xf8>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a0c      	ldr	r2, [pc, #48]	@ (800a8c8 <xPortStartScheduler+0xf8>)
 800a898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a89c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a89e:	f7ff ff83 	bl	800a7a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8a2:	f7fe fd7b 	bl	800939c <vTaskSwitchContext>
	prvTaskExitError();
 800a8a6:	f7ff ff35 	bl	800a714 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	e000e400 	.word	0xe000e400
 800a8b8:	200015ac 	.word	0x200015ac
 800a8bc:	200015b0 	.word	0x200015b0
 800a8c0:	e000ed20 	.word	0xe000ed20
 800a8c4:	20000014 	.word	0x20000014
 800a8c8:	e000ef34 	.word	0xe000ef34

0800a8cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d6:	b672      	cpsid	i
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	b662      	cpsie	i
 800a8e6:	607b      	str	r3, [r7, #4]
}
 800a8e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8ea:	4b11      	ldr	r3, [pc, #68]	@ (800a930 <vPortEnterCritical+0x64>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	4a0f      	ldr	r2, [pc, #60]	@ (800a930 <vPortEnterCritical+0x64>)
 800a8f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8f4:	4b0e      	ldr	r3, [pc, #56]	@ (800a930 <vPortEnterCritical+0x64>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d112      	bne.n	800a922 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a934 <vPortEnterCritical+0x68>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00d      	beq.n	800a922 <vPortEnterCritical+0x56>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90a:	b672      	cpsid	i
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	b662      	cpsie	i
 800a91a:	603b      	str	r3, [r7, #0]
}
 800a91c:	bf00      	nop
 800a91e:	bf00      	nop
 800a920:	e7fd      	b.n	800a91e <vPortEnterCritical+0x52>
	}
}
 800a922:	bf00      	nop
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	20000014 	.word	0x20000014
 800a934:	e000ed04 	.word	0xe000ed04

0800a938 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a93e:	4b13      	ldr	r3, [pc, #76]	@ (800a98c <vPortExitCritical+0x54>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10d      	bne.n	800a962 <vPortExitCritical+0x2a>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94a:	b672      	cpsid	i
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	b662      	cpsie	i
 800a95a:	607b      	str	r3, [r7, #4]
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	e7fd      	b.n	800a95e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a962:	4b0a      	ldr	r3, [pc, #40]	@ (800a98c <vPortExitCritical+0x54>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3b01      	subs	r3, #1
 800a968:	4a08      	ldr	r2, [pc, #32]	@ (800a98c <vPortExitCritical+0x54>)
 800a96a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a96c:	4b07      	ldr	r3, [pc, #28]	@ (800a98c <vPortExitCritical+0x54>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d105      	bne.n	800a980 <vPortExitCritical+0x48>
 800a974:	2300      	movs	r3, #0
 800a976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	f383 8811 	msr	BASEPRI, r3
}
 800a97e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	20000014 	.word	0x20000014

0800a990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a990:	f3ef 8009 	mrs	r0, PSP
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	4b15      	ldr	r3, [pc, #84]	@ (800a9f0 <pxCurrentTCBConst>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	f01e 0f10 	tst.w	lr, #16
 800a9a0:	bf08      	it	eq
 800a9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	6010      	str	r0, [r2, #0]
 800a9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a9b4:	b672      	cpsid	i
 800a9b6:	f380 8811 	msr	BASEPRI, r0
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	b662      	cpsie	i
 800a9c4:	f7fe fcea 	bl	800939c <vTaskSwitchContext>
 800a9c8:	f04f 0000 	mov.w	r0, #0
 800a9cc:	f380 8811 	msr	BASEPRI, r0
 800a9d0:	bc09      	pop	{r0, r3}
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	6808      	ldr	r0, [r1, #0]
 800a9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9da:	f01e 0f10 	tst.w	lr, #16
 800a9de:	bf08      	it	eq
 800a9e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9e4:	f380 8809 	msr	PSP, r0
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop

0800a9f0 <pxCurrentTCBConst>:
 800a9f0:	20001384 	.word	0x20001384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop

0800a9f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa02:	b672      	cpsid	i
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	b662      	cpsie	i
 800aa12:	607b      	str	r3, [r7, #4]
}
 800aa14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa16:	f7fe fc05 	bl	8009224 <xTaskIncrementTick>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa20:	4b06      	ldr	r3, [pc, #24]	@ (800aa3c <xPortSysTickHandler+0x44>)
 800aa22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa26:	601a      	str	r2, [r3, #0]
 800aa28:	2300      	movs	r3, #0
 800aa2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	f383 8811 	msr	BASEPRI, r3
}
 800aa32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa34:	bf00      	nop
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	e000ed04 	.word	0xe000ed04

0800aa40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa40:	b480      	push	{r7}
 800aa42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa44:	4b0b      	ldr	r3, [pc, #44]	@ (800aa74 <vPortSetupTimerInterrupt+0x34>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa4a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa78 <vPortSetupTimerInterrupt+0x38>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa50:	4b0a      	ldr	r3, [pc, #40]	@ (800aa7c <vPortSetupTimerInterrupt+0x3c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a0a      	ldr	r2, [pc, #40]	@ (800aa80 <vPortSetupTimerInterrupt+0x40>)
 800aa56:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5a:	099b      	lsrs	r3, r3, #6
 800aa5c:	4a09      	ldr	r2, [pc, #36]	@ (800aa84 <vPortSetupTimerInterrupt+0x44>)
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa62:	4b04      	ldr	r3, [pc, #16]	@ (800aa74 <vPortSetupTimerInterrupt+0x34>)
 800aa64:	2207      	movs	r2, #7
 800aa66:	601a      	str	r2, [r3, #0]
}
 800aa68:	bf00      	nop
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	e000e010 	.word	0xe000e010
 800aa78:	e000e018 	.word	0xe000e018
 800aa7c:	20000008 	.word	0x20000008
 800aa80:	10624dd3 	.word	0x10624dd3
 800aa84:	e000e014 	.word	0xe000e014

0800aa88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aa98 <vPortEnableVFP+0x10>
 800aa8c:	6801      	ldr	r1, [r0, #0]
 800aa8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aa92:	6001      	str	r1, [r0, #0]
 800aa94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa96:	bf00      	nop
 800aa98:	e000ed88 	.word	0xe000ed88

0800aa9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aaa2:	f3ef 8305 	mrs	r3, IPSR
 800aaa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2b0f      	cmp	r3, #15
 800aaac:	d917      	bls.n	800aade <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aaae:	4a1a      	ldr	r2, [pc, #104]	@ (800ab18 <vPortValidateInterruptPriority+0x7c>)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4413      	add	r3, r2
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aab8:	4b18      	ldr	r3, [pc, #96]	@ (800ab1c <vPortValidateInterruptPriority+0x80>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	7afa      	ldrb	r2, [r7, #11]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d20d      	bcs.n	800aade <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac6:	b672      	cpsid	i
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	b662      	cpsie	i
 800aad6:	607b      	str	r3, [r7, #4]
}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop
 800aadc:	e7fd      	b.n	800aada <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aade:	4b10      	ldr	r3, [pc, #64]	@ (800ab20 <vPortValidateInterruptPriority+0x84>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aae6:	4b0f      	ldr	r3, [pc, #60]	@ (800ab24 <vPortValidateInterruptPriority+0x88>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d90d      	bls.n	800ab0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf2:	b672      	cpsid	i
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	b662      	cpsie	i
 800ab02:	603b      	str	r3, [r7, #0]
}
 800ab04:	bf00      	nop
 800ab06:	bf00      	nop
 800ab08:	e7fd      	b.n	800ab06 <vPortValidateInterruptPriority+0x6a>
	}
 800ab0a:	bf00      	nop
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	e000e3f0 	.word	0xe000e3f0
 800ab1c:	200015ac 	.word	0x200015ac
 800ab20:	e000ed0c 	.word	0xe000ed0c
 800ab24:	200015b0 	.word	0x200015b0

0800ab28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b08a      	sub	sp, #40	@ 0x28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab30:	2300      	movs	r3, #0
 800ab32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab34:	f7fe fab8 	bl	80090a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab38:	4b5d      	ldr	r3, [pc, #372]	@ (800acb0 <pvPortMalloc+0x188>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d101      	bne.n	800ab44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab40:	f000 f920 	bl	800ad84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab44:	4b5b      	ldr	r3, [pc, #364]	@ (800acb4 <pvPortMalloc+0x18c>)
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f040 8094 	bne.w	800ac7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d020      	beq.n	800ab9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ab58:	2208      	movs	r2, #8
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f003 0307 	and.w	r3, r3, #7
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d017      	beq.n	800ab9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f023 0307 	bic.w	r3, r3, #7
 800ab70:	3308      	adds	r3, #8
 800ab72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00d      	beq.n	800ab9a <pvPortMalloc+0x72>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab82:	b672      	cpsid	i
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	b662      	cpsie	i
 800ab92:	617b      	str	r3, [r7, #20]
}
 800ab94:	bf00      	nop
 800ab96:	bf00      	nop
 800ab98:	e7fd      	b.n	800ab96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d06c      	beq.n	800ac7a <pvPortMalloc+0x152>
 800aba0:	4b45      	ldr	r3, [pc, #276]	@ (800acb8 <pvPortMalloc+0x190>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d867      	bhi.n	800ac7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abaa:	4b44      	ldr	r3, [pc, #272]	@ (800acbc <pvPortMalloc+0x194>)
 800abac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abae:	4b43      	ldr	r3, [pc, #268]	@ (800acbc <pvPortMalloc+0x194>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abb4:	e004      	b.n	800abc0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800abb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d903      	bls.n	800abd2 <pvPortMalloc+0xaa>
 800abca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1f1      	bne.n	800abb6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abd2:	4b37      	ldr	r3, [pc, #220]	@ (800acb0 <pvPortMalloc+0x188>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abd8:	429a      	cmp	r2, r3
 800abda:	d04e      	beq.n	800ac7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2208      	movs	r2, #8
 800abe2:	4413      	add	r3, r2
 800abe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf0:	685a      	ldr	r2, [r3, #4]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	1ad2      	subs	r2, r2, r3
 800abf6:	2308      	movs	r3, #8
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d922      	bls.n	800ac44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4413      	add	r3, r2
 800ac04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00d      	beq.n	800ac2c <pvPortMalloc+0x104>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac14:	b672      	cpsid	i
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	b662      	cpsie	i
 800ac24:	613b      	str	r3, [r7, #16]
}
 800ac26:	bf00      	nop
 800ac28:	bf00      	nop
 800ac2a:	e7fd      	b.n	800ac28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2e:	685a      	ldr	r2, [r3, #4]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	1ad2      	subs	r2, r2, r3
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac3e:	69b8      	ldr	r0, [r7, #24]
 800ac40:	f000 f902 	bl	800ae48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac44:	4b1c      	ldr	r3, [pc, #112]	@ (800acb8 <pvPortMalloc+0x190>)
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	4a1a      	ldr	r2, [pc, #104]	@ (800acb8 <pvPortMalloc+0x190>)
 800ac50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac52:	4b19      	ldr	r3, [pc, #100]	@ (800acb8 <pvPortMalloc+0x190>)
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	4b1a      	ldr	r3, [pc, #104]	@ (800acc0 <pvPortMalloc+0x198>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d203      	bcs.n	800ac66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac5e:	4b16      	ldr	r3, [pc, #88]	@ (800acb8 <pvPortMalloc+0x190>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a17      	ldr	r2, [pc, #92]	@ (800acc0 <pvPortMalloc+0x198>)
 800ac64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	4b12      	ldr	r3, [pc, #72]	@ (800acb4 <pvPortMalloc+0x18c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac76:	2200      	movs	r2, #0
 800ac78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac7a:	f7fe fa23 	bl	80090c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	f003 0307 	and.w	r3, r3, #7
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00d      	beq.n	800aca4 <pvPortMalloc+0x17c>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac8c:	b672      	cpsid	i
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	b662      	cpsie	i
 800ac9c:	60fb      	str	r3, [r7, #12]
}
 800ac9e:	bf00      	nop
 800aca0:	bf00      	nop
 800aca2:	e7fd      	b.n	800aca0 <pvPortMalloc+0x178>
	return pvReturn;
 800aca4:	69fb      	ldr	r3, [r7, #28]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3728      	adds	r7, #40	@ 0x28
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	200415bc 	.word	0x200415bc
 800acb4:	200415c8 	.word	0x200415c8
 800acb8:	200415c0 	.word	0x200415c0
 800acbc:	200415b4 	.word	0x200415b4
 800acc0:	200415c4 	.word	0x200415c4

0800acc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d04e      	beq.n	800ad74 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acd6:	2308      	movs	r3, #8
 800acd8:	425b      	negs	r3, r3
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	4413      	add	r3, r2
 800acde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	4b24      	ldr	r3, [pc, #144]	@ (800ad7c <vPortFree+0xb8>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4013      	ands	r3, r2
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10d      	bne.n	800ad0e <vPortFree+0x4a>
	__asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf6:	b672      	cpsid	i
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	b662      	cpsie	i
 800ad06:	60fb      	str	r3, [r7, #12]
}
 800ad08:	bf00      	nop
 800ad0a:	bf00      	nop
 800ad0c:	e7fd      	b.n	800ad0a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00d      	beq.n	800ad32 <vPortFree+0x6e>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad1a:	b672      	cpsid	i
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	b662      	cpsie	i
 800ad2a:	60bb      	str	r3, [r7, #8]
}
 800ad2c:	bf00      	nop
 800ad2e:	bf00      	nop
 800ad30:	e7fd      	b.n	800ad2e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	4b11      	ldr	r3, [pc, #68]	@ (800ad7c <vPortFree+0xb8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d019      	beq.n	800ad74 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d115      	bne.n	800ad74 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ad7c <vPortFree+0xb8>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	43db      	mvns	r3, r3
 800ad52:	401a      	ands	r2, r3
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad58:	f7fe f9a6 	bl	80090a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	4b07      	ldr	r3, [pc, #28]	@ (800ad80 <vPortFree+0xbc>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4413      	add	r3, r2
 800ad66:	4a06      	ldr	r2, [pc, #24]	@ (800ad80 <vPortFree+0xbc>)
 800ad68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad6a:	6938      	ldr	r0, [r7, #16]
 800ad6c:	f000 f86c 	bl	800ae48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ad70:	f7fe f9a8 	bl	80090c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad74:	bf00      	nop
 800ad76:	3718      	adds	r7, #24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	200415c8 	.word	0x200415c8
 800ad80:	200415c0 	.word	0x200415c0

0800ad84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad8a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ad8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad90:	4b27      	ldr	r3, [pc, #156]	@ (800ae30 <prvHeapInit+0xac>)
 800ad92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f003 0307 	and.w	r3, r3, #7
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00c      	beq.n	800adb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3307      	adds	r3, #7
 800ada2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f023 0307 	bic.w	r3, r3, #7
 800adaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	4a1f      	ldr	r2, [pc, #124]	@ (800ae30 <prvHeapInit+0xac>)
 800adb4:	4413      	add	r3, r2
 800adb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adbc:	4a1d      	ldr	r2, [pc, #116]	@ (800ae34 <prvHeapInit+0xb0>)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800adc2:	4b1c      	ldr	r3, [pc, #112]	@ (800ae34 <prvHeapInit+0xb0>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	4413      	add	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800add0:	2208      	movs	r2, #8
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	1a9b      	subs	r3, r3, r2
 800add6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f023 0307 	bic.w	r3, r3, #7
 800adde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4a15      	ldr	r2, [pc, #84]	@ (800ae38 <prvHeapInit+0xb4>)
 800ade4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ade6:	4b14      	ldr	r3, [pc, #80]	@ (800ae38 <prvHeapInit+0xb4>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2200      	movs	r2, #0
 800adec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adee:	4b12      	ldr	r3, [pc, #72]	@ (800ae38 <prvHeapInit+0xb4>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2200      	movs	r2, #0
 800adf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	1ad2      	subs	r2, r2, r3
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae04:	4b0c      	ldr	r3, [pc, #48]	@ (800ae38 <prvHeapInit+0xb4>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	4a0a      	ldr	r2, [pc, #40]	@ (800ae3c <prvHeapInit+0xb8>)
 800ae12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	4a09      	ldr	r2, [pc, #36]	@ (800ae40 <prvHeapInit+0xbc>)
 800ae1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae1c:	4b09      	ldr	r3, [pc, #36]	@ (800ae44 <prvHeapInit+0xc0>)
 800ae1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ae22:	601a      	str	r2, [r3, #0]
}
 800ae24:	bf00      	nop
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr
 800ae30:	200015b4 	.word	0x200015b4
 800ae34:	200415b4 	.word	0x200415b4
 800ae38:	200415bc 	.word	0x200415bc
 800ae3c:	200415c4 	.word	0x200415c4
 800ae40:	200415c0 	.word	0x200415c0
 800ae44:	200415c8 	.word	0x200415c8

0800ae48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae50:	4b28      	ldr	r3, [pc, #160]	@ (800aef4 <prvInsertBlockIntoFreeList+0xac>)
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	e002      	b.n	800ae5c <prvInsertBlockIntoFreeList+0x14>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	60fb      	str	r3, [r7, #12]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d8f7      	bhi.n	800ae56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	4413      	add	r3, r2
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d108      	bne.n	800ae8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	441a      	add	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	441a      	add	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d118      	bne.n	800aed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	4b15      	ldr	r3, [pc, #84]	@ (800aef8 <prvInsertBlockIntoFreeList+0xb0>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d00d      	beq.n	800aec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	441a      	add	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	e008      	b.n	800aed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aec6:	4b0c      	ldr	r3, [pc, #48]	@ (800aef8 <prvInsertBlockIntoFreeList+0xb0>)
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	e003      	b.n	800aed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d002      	beq.n	800aee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aee6:	bf00      	nop
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	200415b4 	.word	0x200415b4
 800aef8:	200415bc 	.word	0x200415bc

0800aefc <atoi>:
 800aefc:	220a      	movs	r2, #10
 800aefe:	2100      	movs	r1, #0
 800af00:	f000 b87a 	b.w	800aff8 <strtol>

0800af04 <_strtol_l.constprop.0>:
 800af04:	2b24      	cmp	r3, #36	@ 0x24
 800af06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af0a:	4686      	mov	lr, r0
 800af0c:	4690      	mov	r8, r2
 800af0e:	d801      	bhi.n	800af14 <_strtol_l.constprop.0+0x10>
 800af10:	2b01      	cmp	r3, #1
 800af12:	d106      	bne.n	800af22 <_strtol_l.constprop.0+0x1e>
 800af14:	f000 f8a0 	bl	800b058 <__errno>
 800af18:	2316      	movs	r3, #22
 800af1a:	6003      	str	r3, [r0, #0]
 800af1c:	2000      	movs	r0, #0
 800af1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af22:	4834      	ldr	r0, [pc, #208]	@ (800aff4 <_strtol_l.constprop.0+0xf0>)
 800af24:	460d      	mov	r5, r1
 800af26:	462a      	mov	r2, r5
 800af28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af2c:	5d06      	ldrb	r6, [r0, r4]
 800af2e:	f016 0608 	ands.w	r6, r6, #8
 800af32:	d1f8      	bne.n	800af26 <_strtol_l.constprop.0+0x22>
 800af34:	2c2d      	cmp	r4, #45	@ 0x2d
 800af36:	d12d      	bne.n	800af94 <_strtol_l.constprop.0+0x90>
 800af38:	782c      	ldrb	r4, [r5, #0]
 800af3a:	2601      	movs	r6, #1
 800af3c:	1c95      	adds	r5, r2, #2
 800af3e:	f033 0210 	bics.w	r2, r3, #16
 800af42:	d109      	bne.n	800af58 <_strtol_l.constprop.0+0x54>
 800af44:	2c30      	cmp	r4, #48	@ 0x30
 800af46:	d12a      	bne.n	800af9e <_strtol_l.constprop.0+0x9a>
 800af48:	782a      	ldrb	r2, [r5, #0]
 800af4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af4e:	2a58      	cmp	r2, #88	@ 0x58
 800af50:	d125      	bne.n	800af9e <_strtol_l.constprop.0+0x9a>
 800af52:	786c      	ldrb	r4, [r5, #1]
 800af54:	2310      	movs	r3, #16
 800af56:	3502      	adds	r5, #2
 800af58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af60:	2200      	movs	r2, #0
 800af62:	fbbc f9f3 	udiv	r9, ip, r3
 800af66:	4610      	mov	r0, r2
 800af68:	fb03 ca19 	mls	sl, r3, r9, ip
 800af6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af70:	2f09      	cmp	r7, #9
 800af72:	d81b      	bhi.n	800afac <_strtol_l.constprop.0+0xa8>
 800af74:	463c      	mov	r4, r7
 800af76:	42a3      	cmp	r3, r4
 800af78:	dd27      	ble.n	800afca <_strtol_l.constprop.0+0xc6>
 800af7a:	1c57      	adds	r7, r2, #1
 800af7c:	d007      	beq.n	800af8e <_strtol_l.constprop.0+0x8a>
 800af7e:	4581      	cmp	r9, r0
 800af80:	d320      	bcc.n	800afc4 <_strtol_l.constprop.0+0xc0>
 800af82:	d101      	bne.n	800af88 <_strtol_l.constprop.0+0x84>
 800af84:	45a2      	cmp	sl, r4
 800af86:	db1d      	blt.n	800afc4 <_strtol_l.constprop.0+0xc0>
 800af88:	fb00 4003 	mla	r0, r0, r3, r4
 800af8c:	2201      	movs	r2, #1
 800af8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af92:	e7eb      	b.n	800af6c <_strtol_l.constprop.0+0x68>
 800af94:	2c2b      	cmp	r4, #43	@ 0x2b
 800af96:	bf04      	itt	eq
 800af98:	782c      	ldrbeq	r4, [r5, #0]
 800af9a:	1c95      	addeq	r5, r2, #2
 800af9c:	e7cf      	b.n	800af3e <_strtol_l.constprop.0+0x3a>
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1da      	bne.n	800af58 <_strtol_l.constprop.0+0x54>
 800afa2:	2c30      	cmp	r4, #48	@ 0x30
 800afa4:	bf0c      	ite	eq
 800afa6:	2308      	moveq	r3, #8
 800afa8:	230a      	movne	r3, #10
 800afaa:	e7d5      	b.n	800af58 <_strtol_l.constprop.0+0x54>
 800afac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800afb0:	2f19      	cmp	r7, #25
 800afb2:	d801      	bhi.n	800afb8 <_strtol_l.constprop.0+0xb4>
 800afb4:	3c37      	subs	r4, #55	@ 0x37
 800afb6:	e7de      	b.n	800af76 <_strtol_l.constprop.0+0x72>
 800afb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800afbc:	2f19      	cmp	r7, #25
 800afbe:	d804      	bhi.n	800afca <_strtol_l.constprop.0+0xc6>
 800afc0:	3c57      	subs	r4, #87	@ 0x57
 800afc2:	e7d8      	b.n	800af76 <_strtol_l.constprop.0+0x72>
 800afc4:	f04f 32ff 	mov.w	r2, #4294967295
 800afc8:	e7e1      	b.n	800af8e <_strtol_l.constprop.0+0x8a>
 800afca:	1c53      	adds	r3, r2, #1
 800afcc:	d108      	bne.n	800afe0 <_strtol_l.constprop.0+0xdc>
 800afce:	2322      	movs	r3, #34	@ 0x22
 800afd0:	f8ce 3000 	str.w	r3, [lr]
 800afd4:	4660      	mov	r0, ip
 800afd6:	f1b8 0f00 	cmp.w	r8, #0
 800afda:	d0a0      	beq.n	800af1e <_strtol_l.constprop.0+0x1a>
 800afdc:	1e69      	subs	r1, r5, #1
 800afde:	e006      	b.n	800afee <_strtol_l.constprop.0+0xea>
 800afe0:	b106      	cbz	r6, 800afe4 <_strtol_l.constprop.0+0xe0>
 800afe2:	4240      	negs	r0, r0
 800afe4:	f1b8 0f00 	cmp.w	r8, #0
 800afe8:	d099      	beq.n	800af1e <_strtol_l.constprop.0+0x1a>
 800afea:	2a00      	cmp	r2, #0
 800afec:	d1f6      	bne.n	800afdc <_strtol_l.constprop.0+0xd8>
 800afee:	f8c8 1000 	str.w	r1, [r8]
 800aff2:	e794      	b.n	800af1e <_strtol_l.constprop.0+0x1a>
 800aff4:	0800bb2d 	.word	0x0800bb2d

0800aff8 <strtol>:
 800aff8:	4613      	mov	r3, r2
 800affa:	460a      	mov	r2, r1
 800affc:	4601      	mov	r1, r0
 800affe:	4802      	ldr	r0, [pc, #8]	@ (800b008 <strtol+0x10>)
 800b000:	6800      	ldr	r0, [r0, #0]
 800b002:	f7ff bf7f 	b.w	800af04 <_strtol_l.constprop.0>
 800b006:	bf00      	nop
 800b008:	20000018 	.word	0x20000018

0800b00c <memcmp>:
 800b00c:	b510      	push	{r4, lr}
 800b00e:	3901      	subs	r1, #1
 800b010:	4402      	add	r2, r0
 800b012:	4290      	cmp	r0, r2
 800b014:	d101      	bne.n	800b01a <memcmp+0xe>
 800b016:	2000      	movs	r0, #0
 800b018:	e005      	b.n	800b026 <memcmp+0x1a>
 800b01a:	7803      	ldrb	r3, [r0, #0]
 800b01c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b020:	42a3      	cmp	r3, r4
 800b022:	d001      	beq.n	800b028 <memcmp+0x1c>
 800b024:	1b18      	subs	r0, r3, r4
 800b026:	bd10      	pop	{r4, pc}
 800b028:	3001      	adds	r0, #1
 800b02a:	e7f2      	b.n	800b012 <memcmp+0x6>

0800b02c <memset>:
 800b02c:	4402      	add	r2, r0
 800b02e:	4603      	mov	r3, r0
 800b030:	4293      	cmp	r3, r2
 800b032:	d100      	bne.n	800b036 <memset+0xa>
 800b034:	4770      	bx	lr
 800b036:	f803 1b01 	strb.w	r1, [r3], #1
 800b03a:	e7f9      	b.n	800b030 <memset+0x4>

0800b03c <strchr>:
 800b03c:	b2c9      	uxtb	r1, r1
 800b03e:	4603      	mov	r3, r0
 800b040:	4618      	mov	r0, r3
 800b042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b046:	b112      	cbz	r2, 800b04e <strchr+0x12>
 800b048:	428a      	cmp	r2, r1
 800b04a:	d1f9      	bne.n	800b040 <strchr+0x4>
 800b04c:	4770      	bx	lr
 800b04e:	2900      	cmp	r1, #0
 800b050:	bf18      	it	ne
 800b052:	2000      	movne	r0, #0
 800b054:	4770      	bx	lr
	...

0800b058 <__errno>:
 800b058:	4b01      	ldr	r3, [pc, #4]	@ (800b060 <__errno+0x8>)
 800b05a:	6818      	ldr	r0, [r3, #0]
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	20000018 	.word	0x20000018

0800b064 <__libc_init_array>:
 800b064:	b570      	push	{r4, r5, r6, lr}
 800b066:	4d0d      	ldr	r5, [pc, #52]	@ (800b09c <__libc_init_array+0x38>)
 800b068:	4c0d      	ldr	r4, [pc, #52]	@ (800b0a0 <__libc_init_array+0x3c>)
 800b06a:	1b64      	subs	r4, r4, r5
 800b06c:	10a4      	asrs	r4, r4, #2
 800b06e:	2600      	movs	r6, #0
 800b070:	42a6      	cmp	r6, r4
 800b072:	d109      	bne.n	800b088 <__libc_init_array+0x24>
 800b074:	4d0b      	ldr	r5, [pc, #44]	@ (800b0a4 <__libc_init_array+0x40>)
 800b076:	4c0c      	ldr	r4, [pc, #48]	@ (800b0a8 <__libc_init_array+0x44>)
 800b078:	f000 f826 	bl	800b0c8 <_init>
 800b07c:	1b64      	subs	r4, r4, r5
 800b07e:	10a4      	asrs	r4, r4, #2
 800b080:	2600      	movs	r6, #0
 800b082:	42a6      	cmp	r6, r4
 800b084:	d105      	bne.n	800b092 <__libc_init_array+0x2e>
 800b086:	bd70      	pop	{r4, r5, r6, pc}
 800b088:	f855 3b04 	ldr.w	r3, [r5], #4
 800b08c:	4798      	blx	r3
 800b08e:	3601      	adds	r6, #1
 800b090:	e7ee      	b.n	800b070 <__libc_init_array+0xc>
 800b092:	f855 3b04 	ldr.w	r3, [r5], #4
 800b096:	4798      	blx	r3
 800b098:	3601      	adds	r6, #1
 800b09a:	e7f2      	b.n	800b082 <__libc_init_array+0x1e>
 800b09c:	0800bc38 	.word	0x0800bc38
 800b0a0:	0800bc38 	.word	0x0800bc38
 800b0a4:	0800bc38 	.word	0x0800bc38
 800b0a8:	0800bc3c 	.word	0x0800bc3c

0800b0ac <memcpy>:
 800b0ac:	440a      	add	r2, r1
 800b0ae:	4291      	cmp	r1, r2
 800b0b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0b4:	d100      	bne.n	800b0b8 <memcpy+0xc>
 800b0b6:	4770      	bx	lr
 800b0b8:	b510      	push	{r4, lr}
 800b0ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0c2:	4291      	cmp	r1, r2
 800b0c4:	d1f9      	bne.n	800b0ba <memcpy+0xe>
 800b0c6:	bd10      	pop	{r4, pc}

0800b0c8 <_init>:
 800b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ca:	bf00      	nop
 800b0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ce:	bc08      	pop	{r3}
 800b0d0:	469e      	mov	lr, r3
 800b0d2:	4770      	bx	lr

0800b0d4 <_fini>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	bf00      	nop
 800b0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0da:	bc08      	pop	{r3}
 800b0dc:	469e      	mov	lr, r3
 800b0de:	4770      	bx	lr
